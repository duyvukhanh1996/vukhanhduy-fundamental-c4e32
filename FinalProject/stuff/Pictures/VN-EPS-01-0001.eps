%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: VN-EPS-01-0001.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Ted
%%CreationDate: 7/11/2013
%%BoundingBox: 0 0 720 540
%%HiResBoundingBox: 0 0 720 540
%%CropBox: 0 0 720 540
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2013-07-11T02:41:33-07:00</xap:CreateDate>
         <xap:ModifyDate>2013-07-11T02:41:34-07:00</xap:ModifyDate>
         <xap:MetadataDate>2013-07-11T02:41:34-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>192</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9QYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqgbbXNIur6Swt7uKa7hXnJEjBiBWh3G2x6jt3xVHYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWET/mnpMGvvYN&#xA;EWsFZYzfKej/ALRKU3UHw/HFUFL+b1omotGlqXsVn4esCeRgpQuAf2uW4Hh74qk2rfmvql3Z3FpB&#xA;awxLN6kZmPIn0nHFaLXZqdT+GKsKtLy6s7hLi1meCdN0kjJVh9IxVluheevOt5qMNjDeRyTXUooZ&#xA;0QDpuuwFF9h9GKvZBWgrue5G2Kt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXnP5i+RhcSfpfTlSE0d9Q5FUjooLeoa/tHoaDfFXluKuxV2KqtrcSW1zFcRU9&#xA;SF1kSu45Iaiv3Yq9W8u/mtpc9sE1s/VLta8pY0ZomA6UC82B+jFWaadqNpqNnHd2jF4JBVSVKn6V&#xA;YAjFUTirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqF1TT4dR0&#xA;64sZiyxXCGN2Q0YA+GKvHLj8s/NUV9HbCBZI5XKJdK1YwAK8npVlFB3GKoXzR5J1by8I5Zys9rJQ&#xA;C4j+yHP7BB37Yqx7FV8UUs0qRRIZJZCFRFFSSdgABirOdH/LPVjJBLdoY/3qLNG3EcUqGLggvyHH&#xA;b9k1607qvVbO1jtoFiRESm5WNeK19hU4qr4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYqxrzhZeWNS0i5m1CVKWa8jcQtGZkFa8FLVALkUp3xV4aaVNNx2J2&#xA;xV6b5B/LyWKW11vUpOJASezt4zv8QqDLUe/2Rir0rFXCtN+uKuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZVdo3WNuDkEK9K8SRsad6Yq8S83+Stc0eaW7l&#xA;b65ZzMXe7iXgAzGp5xrsm/Tt+rFUg0uyF9qVtZtKsInkWMyuaKvI0qcVfRwFAB4Yq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq8i/MfyffWl9c&#xA;65AFbT5GQuForRs3w7gACnKm/virJ/Ivn9NYMWmXyFdSVDxlG6S8BUn/ACWoMVZtirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUL6ytb60ls7qMS&#xA;286lJEPcH3G4xV5Fqei6p5E1631S3Pr2JkKwt0LIR8UUm2xKk0PtXFXqWgeYNO12xF5YuSoPGWNh&#xA;R0aleLD+mKplirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVSvzPo7azoV3pquI3nUem56B0YOtdjtyXfFXkZHmXyLrXdUc1HeG4jVqb0/66XFXqfl&#xA;vzlo+vJxtn9O6VVMls+zAlanj/MAdq4qnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVhf5maBq2paatxYzsYbVWe5siaK6rvzXxZd9j9G/VV5Xo&#xA;Os3Oj6pDfQfF6ZpJHUgOh+0pp/nXFXvGh65ZazYR3tmWMUlQQwoVZdip9xiqYYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxj8ybqC38o3aySFHnKR&#xA;Q8ags5YMV2/yFatcVeHYq9R/J7VXe2vtLkYUhKzwL+1R6rJ9AIX78Vej4q7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxf8AMfR/0l5YuGWnrWX+lISS&#xA;BSMHn/wlcVeH4qy78rZjH5uiUMR6sUqEAVr8PKhPb7NcVe1Yq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHn1JX8oamIn9NhGGJ8VV1LL/ALJajFXg&#xA;2Ksg8hi7HmmyktSvqxuCVI5Eo59Nwo234uT7Cp7Yq94xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVpmCqWOwAqT8sVYJr35q6Xb25/RFLq6WUoySo6Lwofj&#xA;B2ruBtirznWvNOt6xO8t5ctwdQhgjJWIKCDThWnUV3xVKcVZt+U9lPL5ja5ERMEEL85TyChmIAAI&#xA;25ex7VxV7FirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rA9U/NvS7WeWC2s3uXid09QOgjYK1FZGXnUMN+mKvM9cOkNqDyaS0ps5BzVJh8aMeqk1NaeNcVS8&#xA;AkgAVJ6DFWaeVvy01PVOFzqHKxsg4DRupWZ1oGqgIoAa0qfuxV6pouhaXo1r9W0+IRoaeo3VnYCn&#xA;Jj44qmGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrZY/UieP&#xA;kyc1K8lNGFRSoPY4qxzV/KdvqWg2OnajeS+rZKjPdISzFljKlmrXY+JxV4jdx28dzLHby+vArERT&#xA;FSnNQdm4kkivhiqrpthPqGoQWUG8s7hEPYV7/Rir3jTvK2g2DxSwWMK3EShVl41II3qvKvHfwxVN&#xA;sVaCqCSAAWNWI7mlN/uxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FWqHlWppSnHanzxVB62zLo1+y/aW2mI+YQ4q8W8n+TbrzHcygSfVrSAD1pypbc9FUbVO3j&#xA;tir1nQPKOheX4P3KB5eQZrqfiX5EcRxag4jfYDxxVPcVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7iCK4gkgmUPFKpV0YAgg7bg1GKtWtpa2kIgtY&#xA;UghX7McShFFfZaDFVQgHYio67+2+Kt4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWjWhoaHscVYrNon&#xA;nx7hUj8wRRWHCMPS2Vp6rEFko52+OReVetCaUoMVVbLQfN6QRm48wVuGkilmUQI6gDmZolZuNVdn&#xA;FDxUinhsFW4dD85RqIT5jEkQi4iV7SIy+p6qNyJBCn92GSlO9e2KrI9C88cD6vmVPVa1liLJZx8R&#xA;cMhWKYKW6I7c+PegBOKrY9G/MIXUnLzFbNaemREv1JfV9QxleRbnxor0YfCfDt8Sqc6dZavBO73m&#xA;om7jcMBCYo0CnmSpVkCn7GzVrvuKdMVf/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:3A19C7D40DEAE2118972B9AC9558129F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4B0359130EEAE2118972B9AC9558129F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3919C7D40DEAE2118972B9AC9558129F</stRef:instanceID>
            <stRef:documentID>uuid:3819C7D40DEAE2118972B9AC9558129F</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>720.000000</stDim:w>
            <stDim:h>540.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Roboto-Light</stFnt:fontName>
                  <stFnt:fontFamily>Roboto</stFnt:fontFamily>
                  <stFnt:fontFace>Light</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 1.00000; 2011</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Roboto-Light.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Maps</xapG:groupName>
                  <xapG:groupType>1</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Sea</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>204</xapG:red>
                           <xapG:green>219</xapG:green>
                           <xapG:blue>229</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>River</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>147</xapG:red>
                           <xapG:green>182</xapG:green>
                           <xapG:blue>198</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Land</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>244</xapG:red>
                           <xapG:green>244</xapG:green>
                           <xapG:blue>244</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Country</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>249</xapG:red>
                           <xapG:green>241</xapG:green>
                           <xapG:blue>228</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Border</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>163</xapG:red>
                           <xapG:green>163</xapG:green>
                           <xapG:blue>163</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Marker</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>188</xapG:red>
                           <xapG:green>81</xapG:green>
                           <xapG:blue>81</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Text</xapG:swatchName>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:red>51</xapG:red>
                           <xapG:green>51</xapG:green>
                           <xapG:blue>51</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
720 540 li
720 0 li
cp
clp
[1 0 0 1 0 0 ]ct
720 540 mo
0 540 li
0 0 li
720 0 li
720 540 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.0156863 .00784314 .00784314 0 cmyk
f
447.484 353.654 mo
447.049 353.324 li
446.678 353.316 li
446.314 352.896 li
445.241 350.822 li
445.227 350.475 li
445.246 350.133 li
445.227 349.84 li
445.066 349.639 li
445.276 349.445 li
445.494 349.398 li
445.697 349.387 li
445.902 349.303 li
446.002 349.16 li
446.154 348.777 li
446.228 348.652 li
446.736 348.316 li
446.99 348.363 li
447.014 348.447 li
446.934 348.551 li
446.881 348.652 li
446.795 348.754 li
446.621 348.85 li
446.49 348.965 li
446.555 349.137 li
446.678 349.143 li
447.102 349.02 li
447.209 348.969 li
447.324 348.721 li
447.404 348.307 li
447.426 347.85 li
447.377 347.467 li
447.209 347.203 li
446.207 346.037 li
445.734 345.279 li
445.096 344.568 li
444.601 343.676 li
444.397 343.471 li
444.092 343.273 li
444.165 343.055 li
444.02 342.729 li
443.787 342.422 li
443.592 342.088 li
443.52 341.658 li
443.584 341.271 li
443.691 340.896 li
443.752 340.498 li
443.6 339.992 li
443.592 339.746 li
443.859 339.189 li
443.917 339 li
443.89 338.498 li
443.844 338.27 li
443.752 338.059 li
443.606 337.904 li
443.504 337.922 li
443.481 338.051 li
443.592 338.24 li
443.592 338.393 li
443.321 338.516 li
443.244 338.814 li
443.279 339.578 li
442.966 339.25 li
442.756 338.898 li
442.43 338.059 li
442.604 337.969 li
442.655 337.955 li
442.771 337.738 li
442.886 337.83 li
443.156 337.969 li
443.279 338.059 li
443.294 337.82 li
443.279 337.639 li
443.221 337.498 li
443.096 337.391 li
443.096 337.238 li
443.359 337.254 li
443.547 337.168 li
443.627 336.982 li
443.592 336.705 li
443.395 336.414 li
443.199 336.451 li
442.931 336.705 li
442.604 336.482 li
442.197 335.922 li
441.789 335.715 li
441.834 335.301 li
441.912 335.055 li
442.102 334.879 li
441.84 334.639 li
441.854 334.436 li
441.912 334.244 li
441.789 334.041 li
441.935 333.664 li
442.095 333.459 li
442.285 333.373 li
442.516 333.357 li
443.279 333.875 li
443.424 334.041 li
443.374 334.359 li
443.141 334.512 li
442.886 334.617 li
442.771 334.787 li
442.873 335.016 li
443.395 335.119 li
443.592 335.381 li
443.852 335.209 li
444.012 335 li
444.245 334.545 li
444.165 334.27 li
444.359 333.941 li
444.245 333.691 li
443.97 333.836 li
443.707 333.791 li
443.504 333.59 li
443.424 333.271 li
443.467 333.059 li
443.672 332.771 li
443.752 332.533 li
443.454 332.666 li
443.359 332.734 li
443.279 332.869 li
443.096 332.869 li
442.588 332.266 li
442.43 332 li
442.516 332.018 li
442.604 331.9 li
442.633 331.754 li
442.415 331.629 li
442.102 331.346 li
442 331.096 li
441.907 330.607 li
441.789 330.342 li
441.594 330.162 li
441.392 330.063 li
441.252 329.887 li
441.281 329.488 li
441.457 329.488 li
441.637 329.859 li
442.29 330.6 li
442.537 331.205 li
443.068 332.139 li
443.279 332.352 li
443.244 332.029 li
443.199 331.951 li
443.096 331.848 li
443.096 331.682 li
443.366 331.66 li
443.496 331.568 li
443.504 331.406 li
443.424 331.178 li
443.309 331.189 li
442.996 331.006 li
442.705 330.785 li
442.69 330.676 li
442.385 330.506 li
442.152 330.084 li
442 329.563 li
441.949 329.078 li
441.949 328.398 li
441.899 328.197 li
441.609 327.645 li
441.637 327.117 li
441.861 326.809 li
442.16 326.58 li
442.43 326.287 li
442.125 326.234 li
441.965 326.033 li
441.789 325.467 li
441.514 325.582 li
441.537 325.406 li
441.789 324.947 li
441.885 324.021 li
441.949 323.773 li
442.248 323.496 li
442.443 323.914 li
442.771 325.129 li
442.633 326.561 li
442.69 326.822 li
443.316 326.82 li
443.512 326.732 li
443.424 325.785 li
443.592 323.857 li
443.454 323.625 li
442.82 323.109 li
442.604 322.766 li
442.285 320.016 li
441.621 318.262 li
441.377 317.879 li
440.628 317.467 li
440.353 316.969 li
440.402 316.586 li
440.953 316.691 li
441.201 316.959 li
441.312 317.26 li
441.499 317.492 li
441.949 317.549 li
441.137 316.242 li
440.795 315.395 li
441.041 315.014 li
440.881 313.994 li
440.788 313.654 li
440.57 313.322 li
439.807 312.492 li
439.486 311.793 li
439.363 311.385 li
439.314 311.041 li
439.334 309.707 li
439.234 309.367 li
438.811 308.793 li
438.005 306.576 li
437.977 306.775 li
437.824 307.264 li
437.68 306.945 li
437.76 306.781 li
437.917 306.664 li
438.057 306.402 li
438.28 306.412 li
438.332 306.316 li
438.303 306.146 li
438.172 305.891 li
438.05 303.939 li
438.143 304.141 li
438.295 304.291 li
438.5 304.389 li
438.28 303.207 li
438.15 302.857 li
437.256 301.678 li
437.104 301.521 li
436.61 300.795 li
436.516 300.576 li
435.979 300.361 li
435.869 300.215 li
436.35 300.162 li
434.83 296.688 li
434.28 294.754 li
434.055 292.561 li
433.938 292.863 li
433.902 293.016 li
433.895 293.221 li
433.762 293.221 li
433.757 292.893 li
433.625 292.688 li
433.437 292.625 li
433.241 292.713 li
433.088 292.713 li
432.914 292.414 li
433.043 292.236 li
433.371 292.213 li
433.762 292.375 li
433.872 292.016 li
433.945 291.291 li
434.055 291.012 li
434.395 291.195 li
434.357 290.975 li
434.285 290.865 li
434.135 290.836 li
433.895 290.859 li
433.895 290.674 li
434.285 290.695 li
434.605 290.568 li
434.854 290.326 li
435.049 289.998 li
434.903 289.932 li
434.583 289.908 li
434.395 289.846 li
434.105 289.672 li
433.486 289.109 li
433.356 288.789 li
433.398 287.873 li
433.27 287.68 li
432.688 287.219 li
432.506 287.127 li
432.353 286.932 li
432.195 285.951 li
432.077 285.578 li
431.917 285.682 li
431.765 285.711 li
431.607 285.672 li
431.416 285.578 li
431.547 285.787 li
431.619 285.859 li
431.76 285.932 li
431.76 286.1 li
431.309 286.416 li
431.141 286.934 li
431.321 287.375 li
431.925 287.467 li
431.925 287.635 li
431.467 287.672 li
431.271 287.664 li
431.111 287.635 li
430.959 288.002 li
430.932 288.141 li
430.764 288.141 li
430.806 287.992 li
430.836 287.916 li
430.932 287.789 li
430.778 287.5 li
430.771 287.205 li
430.806 286.912 li
430.764 286.623 li
430.596 286.445 li
430.061 286.113 li
429.942 286.016 li
429.82 285.852 li
429.238 285.361 li
429.105 285.178 li
429.078 284.566 li
428.949 284.057 li
428.796 284.057 li
428.258 285.111 li
427.872 285.334 li
427.307 284.916 li
427.116 284.445 li
427.318 284.152 li
427.685 283.99 li
427.96 283.902 li
428.234 284.248 li
428.402 284.082 li
428.621 283.381 li
427.727 283.479 li
427.066 283.096 li
423.145 277.703 li
422.388 276.246 li
422.17 274.717 li
422.047 274.383 li
421.88 274.344 li
421.705 274.473 li
421.531 274.641 li
421.392 274.725 li
421.211 274.668 li
421.262 274.549 li
421.459 274.432 li
421.72 274.383 li
421.524 273.949 li
421.196 273.703 li
420.818 273.525 li
419.555 272.539 li
419.264 272.18 li
418.908 271.537 li
418.58 270.646 li
418.416 269.668 li
418.596 268.763 li
418.924 268.894 li
419.534 268.766 li
419.752 268.948 li
419.838 268.655 li
420.035 268.474 li
420.303 268.316 li
420.573 268.083 li
420.287 267.759 li
420.245 267.667 li
420.165 267.571 li
419.998 267.732 li
419.852 267.965 li
419.832 268.083 li
419.424 268.014 li
419.084 267.839 li
418.799 267.62 li
418.596 267.407 li
418.428 267.407 li
418.328 267.53 li
418.313 267.54 li
418.277 267.482 li
418.103 267.407 li
418.037 267.605 li
417.942 267.785 li
417.797 267.945 li
417.609 268.083 li
417.609 268.269 li
418.145 268.37 li
418.16 268.731 li
417.992 269.181 li
418.016 269.547 li
418.189 269.892 li
418.428 271.166 li
418.211 270.851 li
417.84 270.948 li
417.396 271.195 li
416.953 271.336 li
417.26 271.148 li
417.564 270.86 li
417.813 270.508 li
417.936 270.132 li
417.9 270.06 li
417.688 269.202 li
417.514 269.154 li
417.324 269.275 li
416.953 269.641 li
416.583 269.16 li
416.047 268.851 li
415.64 268.466 li
415.625 267.744 li
415.915 267.187 li
416.751 266.501 li
417.113 266.05 li
416.498 266.095 li
415.842 266.041 li
415.242 265.906 li
414.804 265.71 li
414.646 265.71 li
414.383 265.796 li
413.933 265.742 li
413.512 265.568 li
413.322 265.286 li
413.462 264.919 li
413.795 265.042 li
414.479 265.556 li
413.691 264.271 li
413.497 263.843 li
413.264 262.986 li
413.242 262.826 li
412.959 262.917 li
412.813 263.123 li
412.706 263.351 li
412.5 263.504 li
411.98 263.365 li
410.896 262.566 li
410.533 262.656 li
410.549 262.9 li
410.716 263.679 li
410.605 263.843 li
409.727 264.522 li
409.604 264.373 li
409.387 264.522 li
409.314 264.263 li
409.154 264.081 li
408.949 264.033 li
408.73 264.183 li
408.566 264.183 li
407.99 263.859 li
407.707 263.65 li
407.584 263.412 li
407.279 262.01 li
407.329 261.806 li
407.577 261.854 li
407.752 261.96 li
407.897 262.076 li
408.055 262.146 li
408.208 262.132 li
408.348 262.068 li
408.398 261.996 li
407.933 261.801 li
407.409 261.103 li
406.974 260.808 li
406.424 259.923 li
406.197 259.697 li
405.289 259.074 li
405.187 258.892 li
405.086 258.646 li
404.941 258.505 li
404.693 258.642 li
404.57 258.815 li
404.483 258.972 li
404.357 259.073 li
404.128 259.074 li
404.178 258.96 li
404.048 258.679 li
403.873 258.447 li
403.785 258.47 li
403.808 258.237 li
403.873 258.042 li
403.98 257.873 li
404.128 257.716 li
403.494 257.861 li
403.166 257.899 li
402.811 257.885 li
402.869 257.697 li
402.906 257.614 li
402.964 257.53 li
403.131 257.53 li
403.197 257.583 li
403.459 257.716 li
403.459 257.53 li
402.877 257.282 li
402.65 257.101 li
402.471 256.835 li
402.28 256.972 li
401.998 257.015 li
401.744 256.947 li
401.527 256.599 li
401.264 256.501 li
400.684 256.357 li
398.854 255.32 li
399.58 255.193 li
402.514 256.751 li
403.459 257.021 li
403.459 256.835 li
402.724 256.624 li
400.16 254.3 li
397.299 252.197 li
394.197 249.542 li
393.84 249.352 li
393.71 249.237 li
393.58 249.007 li
393.404 248.844 li
393.194 248.917 li
392.751 249.234 li
392.773 249.388 li
392.801 249.56 li
392.773 249.677 li
392.504 249.802 li
392.221 249.849 li
391.609 249.847 li
391.609 249.677 li
392.469 249.195 li
392.605 249.087 li
392.686 248.88 li
392.854 248.769 li
393.026 248.685 li
393.1 248.564 li
393.026 248.388 li
392.686 248.188 li
391.393 246.304 li
391.117 246.085 li
391.262 245.059 li
390.898 244.347 li
386.934 241.422 li
382.539 238.172 li
380.438 235.824 li
380.135 235.378 li
380.033 235.311 li
380.003 235.216 li
379.531 234.838 li
379.443 234.799 li
379.233 234.394 li
378.957 233.593 li
377.787 231.608 li
377.148 230.869 li
376.567 229.809 li
376.306 229.486 li
375.783 229.144 li
375.006 228.839 li
374.229 228.73 li
373.691 228.975 li
373.814 229.075 li
373.881 229.184 li
374.018 229.486 li
373.32 229.083 li
373.407 228.574 li
373.873 228.265 li
374.345 228.46 li
374.512 228.46 li
374.512 228.276 li
373.342 227.966 li
372.536 227.872 li
371.955 227.714 li
371.396 227.495 li
371.055 227.249 li
371.221 227.095 li
371.57 227.251 li
373.197 227.42 li
374.068 227.877 li
374.425 227.932 li
374.664 228.067 li
374.977 228.654 li
375.696 228.967 li
375.957 228.989 li
376.16 228.788 li
376.096 228.604 li
375.609 228.127 li
375.492 227.847 li
375.268 226.565 li
375.049 225.844 li
374.839 225.382 li
374.992 225.129 li
375.034 224.902 li
374.934 224.74 li
374.679 224.683 li
374.679 224.494 li
375.129 224.498 li
375.398 224.288 li
375.588 223.969 li
375.834 223.655 li
376.306 223.273 li
376.808 222.955 li
376.808 222.799 li
374.744 220.23 li
374.477 219.707 li
374.345 219.171 li
374.613 218.693 li
374.65 218.435 li
374.345 218.313 li
373.887 218.871 li
373.691 219.016 li
373.43 219.03 li
373.27 218.937 li
373.104 218.886 li
372.855 219.016 li
372.71 219.186 li
372.602 219.439 li
372.536 219.734 li
372.529 220.043 li
372.282 219.554 li
372.238 219.313 li
372.376 219.016 li
372.07 219.059 li
371.977 219.092 li
371.875 219.171 li
371.563 219.016 li
371.707 218.771 li
371.992 218.573 li
372.289 218.508 li
372.529 218.657 li
372.703 218.657 li
372.514 218.205 li
372.18 217.892 li
371.381 217.285 li
370.713 216.413 li
370.502 216.277 li
369.979 216.086 li
369.818 215.992 li
368.555 215.015 li
368.185 214.871 li
367.611 214.964 li
367.096 215.14 li
366.689 215.221 li
366.449 215.041 li
366.899 214.937 li
366.848 214.618 li
366.564 214.253 li
365.309 213.194 li
364.4 212.031 li
364.219 211.858 li
363.666 211.438 li
363.436 211.12 li
363.224 210.67 li
363.057 210.172 li
362.992 209.706 li
362.171 209.653 li
361.313 208.701 li
360.028 206.613 li
359.461 204.811 li
359.293 204.534 li
359.185 204.199 li
359.156 203.468 li
359.011 202.75 li
358.553 202.456 li
358.611 202.539 li
358.684 204.065 li
358.691 204.657 li
358.226 204.877 li
358.321 204.539 li
358.394 204.019 li
358.357 203.541 li
358.138 203.332 li
358.029 203.165 li
358.394 202.126 li
358.255 201.766 li
357.987 201.381 li
357.485 200.827 li
357.311 200.758 li
356.897 200.799 li
356.737 200.75 li
356.664 200.63 li
356.41 200.046 li
356.65 200.074 li
356.839 200.171 li
356.977 200.338 li
357.078 200.562 li
357.405 200.203 li
357.405 200.046 li
356.875 199.887 li
356.286 199.532 li
355.771 199.085 li
355.444 198.652 li
355.313 198.338 li
355.14 197.525 li
355.11 197.189 li
355.052 196.975 li
354.92 196.742 li
354.951 196.416 li
355.205 195.66 li
355.662 194.727 li
356.244 194.119 li
356.904 194.33 li
357.049 194.095 li
357.289 193.938 li
357.899 193.641 li
357.726 193 li
357.754 192.081 li
358.044 190.52 li
358.102 190.388 li
358.436 190.436 li
358.742 190.419 li
358.953 189.687 li
359.135 189.638 li
359.345 189.625 li
359.542 189.502 li
359.62 189.302 li
359.664 188.811 li
359.548 188.747 li
359.374 188.811 li
359.272 188.524 li
359.213 188.276 li
359.715 188.622 li
359.65 188.256 li
359.213 187.416 li
359.091 186.701 li
358.989 186.416 li
358.72 186.19 li
358.72 186.033 li
359.047 186.19 li
359.374 185.5 li
359.715 185.688 li
359.606 184.735 li
359.868 182.813 li
359.86 181.871 li
359.759 181.858 li
359.737 181.741 li
359.723 181.471 li
359.664 181.219 li
359.542 180.989 li
359.475 181.136 li
359.309 181.348 li
359.213 181.523 li
359.185 181.124 li
359.505 180.878 li
359.824 180.956 li
359.86 181.523 li
359.977 181.237 li
359.984 180.537 li
360.028 180.139 li
360.209 179.736 li
360.747 178.887 li
360.863 178.475 li
361.016 178.143 li
361.357 178.114 li
361.691 178.136 li
361.843 177.961 li
361.938 177.568 li
362.366 176.982 li
362.498 176.648 li
362.178 176.787 li
361.495 176.861 li
361.175 177.009 li
361.023 176.821 li
361.684 176.464 li
362.025 176.22 li
362.178 175.955 li
362.425 176.207 li
362.498 176.302 li
362.584 176.005 li
362.578 175.294 li
362.664 174.916 li
363.174 174.223 li
363.166 173.98 li
362.998 173.584 li
362.992 173.342 li
363.137 172.959 li
363.355 172.708 li
364.407 171.74 li
364.684 171.422 li
364.807 171.089 li
364.975 171.089 li
365.141 171.361 li
365.475 171.644 li
365.86 171.866 li
366.209 171.955 li
366.34 171.73 li
366.703 170.63 li
366.775 170.222 li
366.957 170.222 li
366.871 170.724 li
366.718 171.169 li
366.645 171.576 li
366.775 171.955 li
367.182 171.701 li
368.068 171.469 li
368.432 171.263 li
368.621 170.974 li
368.912 170.217 li
369.086 169.86 li
369.268 170.048 li
369.158 170.178 li
368.94 170.742 li
369.296 170.53 li
369.878 169.849 li
370.43 169.51 li
371.011 168.664 li
371.541 168.309 li
372.376 167.258 li
372.689 166.575 li
372.855 166.39 li
373.357 166.186 li
373.516 166.049 li
373.35 165.869 li
373.35 165.679 li
373.567 165.568 li
373.676 165.54 li
373.85 165.522 li
373.85 165.679 li
373.691 165.679 li
373.691 165.869 li
375.252 165.679 li
375.564 165.6 li
376.16 165.254 li
376.684 165.074 li
376.953 164.831 li
377.171 164.541 li
377.309 164.29 li
377.432 164.119 li
377.525 164.07 li
377.547 164.006 li
377.475 163.784 li
377.365 163.66 li
376.808 163.233 li
376.699 163.483 li
376.516 163.583 li
376.32 163.508 li
376.16 163.233 li
376.306 163.233 li
376.728 163.1 li
377.098 163.209 li
377.41 163.468 li
377.635 163.784 li
377.912 163.553 li
378.006 163.19 li
378.057 162.795 li
378.209 162.466 li
378.26 162.213 li
378.07 161.941 li
377.635 161.511 li
377.73 161.521 li
377.787 161.495 li
377.811 161.435 li
377.803 161.337 li
377.839 161.456 li
377.961 161.7 li
378.23 161.358 li
378.383 160.776 li
378.471 159.67 li
378.23 159.426 li
377.693 159.494 li
377.119 159.72 li
376.808 159.948 li
376.654 159.948 li
376.764 159.746 li
376.93 159.511 li
377.09 159.316 li
377.229 159.236 li
377.301 159.175 li
377.984 158.934 li
378.129 158.904 li
378.23 158.451 li
378.006 158.075 li
377.832 157.716 li
378.129 157.307 li
378.129 157.148 li
377.425 157.526 li
377.076 157.543 li
376.654 157.307 li
378.194 156.69 li
378.725 156.199 li
379.125 156.046 li
379.205 155.94 li
379.262 155.8 li
379.291 155.654 li
379.262 155.379 li
379.182 155.323 li
379.073 155.328 li
378.95 155.234 li
378.594 154.823 li
378.435 154.576 li
378.296 154.188 li
378.564 154.396 li
378.906 154.898 li
379.117 155.044 li
379.51 155.087 li
379.901 155.017 li
380.279 154.873 li
380.599 154.695 li
381.084 154.281 li
381.079 153.978 li
380.709 153.729 li
380.111 153.477 li
380.111 153.303 li
380.425 153.287 li
381.107 153.477 li
381.412 153.475 li
381.623 153.414 li
381.798 153.337 li
382.008 153.303 li
382.08 153.203 li
382.348 153.015 li
382.619 152.909 li
382.749 153.05 li
382.836 153.225 li
383.055 153.45 li
383.547 153.825 li
383.142 152.474 li
382.895 152.067 li
382.749 152.258 li
382.344 151.944 li
381.936 151.474 li
381.603 150.956 li
381.435 150.5 li
381.893 150.828 li
382.19 150.591 li
382.275 150.043 li
382.08 149.454 li
381.66 149.133 li
381.188 148.894 li
381.007 148.589 li
381.435 148.059 li
381.928 148.583 li
382.08 148.583 li
382.146 148.283 li
382.371 147.947 li
382.421 147.615 li
382.336 147.162 li
382.118 147.065 li
381.82 147.071 li
381.297 146.832 li
380.686 146.801 li
380.438 146.647 li
380.309 146.383 li
380.265 146.103 li
380.185 145.835 li
379.945 145.6 li
379.945 145.441 li
380.438 145.543 li
380.599 145.6 li
380.599 145.441 li
379.873 145.145 li
379.619 145.077 li
380.018 144.958 li
380.533 145.069 li
381.435 145.441 li
381.435 145.251 li
381.26 145.251 li
381.26 145.077 li
381.748 144.828 li
382.118 144.965 li
382.501 145.201 li
383.062 145.251 li
383.012 145.166 li
382.943 144.976 li
382.895 144.887 li
383.156 144.888 li
383.367 144.959 li
383.54 145.084 li
383.7 145.251 li
383.383 145.541 li
383.467 145.716 li
383.715 145.833 li
383.883 145.95 li
383.902 146.205 li
383.818 146.37 li
383.57 146.461 li
383.142 146.489 li
382.756 146.68 li
383.004 147.061 li
383.547 147.327 li
384.043 147.188 li
384.208 147.188 li
384.261 147.366 li
384.288 147.402 li
384.208 147.536 li
384.658 147.89 li
384.842 148.417 li
385.037 148.59 li
385.518 147.884 li
385.393 147.761 li
385.292 147.605 li
385.219 147.414 li
385.189 147.188 li
385.372 147.188 li
385.605 147.688 li
385.85 147.947 li
386.221 148.043 li
386.846 148.059 li
386.846 147.884 li
386.584 147.76 li
386.483 147.566 li
386.431 147.356 li
386.338 147.188 li
386.205 147.098 li
385.697 146.838 li
385.399 146.603 li
384.703 145.792 li
384.856 145.769 li
384.93 145.807 li
385.029 145.95 li
385.167 145.667 li
385.445 145.765 li
386.025 146.298 li
386.273 146.467 li
386.576 146.629 li
386.934 146.76 li
387.332 146.838 li
387.775 146.872 li
388.232 146.841 li
388.611 146.675 li
388.828 146.298 li
388.706 145.94 li
388.104 145.429 li
388.152 145.077 li
388.581 145.481 li
388.814 145.598 li
389.156 145.6 li
388.828 145.251 li
389.076 145.261 li
389.156 145.251 li
389.039 145.137 li
388.909 144.965 li
388.828 144.887 li
388.828 144.727 li
389.119 144.77 li
389.279 144.951 li
389.337 145.236 li
389.314 145.6 li
389.41 145.44 li
389.467 145.242 li
389.49 145.003 li
389.482 144.727 li
389.643 144.727 li
389.592 145.24 li
389.73 145.352 li
389.94 145.156 li
390.135 144.727 li
390.188 144.799 li
390.195 144.82 li
390.303 144.887 li
390.246 144.988 li
390.15 145.176 li
390.123 145.358 li
390.215 145.441 li
390.426 145.381 li
390.494 145.234 li
390.528 145.052 li
390.646 144.887 li
390.877 144.745 li
391.166 144.64 li
391.473 144.576 li
391.793 144.554 li
391.793 144.727 li
390.494 145.579 li
389.795 146.489 li
389.795 146.647 li
390.253 146.833 li
391.414 147.003 li
391.793 147.361 li
391.793 147.188 li
392.068 147.318 li
392.316 147.291 li
392.576 147.208 li
392.939 147.188 li
392.854 146.8 li
393.369 146.225 li
393.755 146.123 li
393.755 145.95 li
393.58 145.934 li
393.484 145.894 li
393.396 145.843 li
393.281 145.792 li
393.588 145.635 li
394.096 145.514 li
394.611 145.482 li
394.916 145.6 li
395.229 145.474 li
395.68 145.458 li
396.23 145.441 li
396.566 145.336 li
396.797 145.203 li
397.197 144.887 li
397.197 144.727 li
396.964 144.563 li
396.863 144.252 li
396.818 143.872 li
396.724 143.49 li
396.941 143.435 li
397.037 143.345 li
397.009 143.202 li
396.877 142.983 li
397.234 142.621 li
397.393 142.018 li
397.537 140.869 li
397.326 140.964 li
397.109 140.947 li
396.906 140.847 li
396.724 140.695 li
396.834 140.397 li
396.877 139.472 li
396.979 139.258 li
397.117 139.111 li
397.174 138.968 li
397.037 138.771 li
397.037 138.598 li
397.617 138.42 li
398.381 138.44 li
398.854 138.232 li
398.854 138.073 li
398.201 137.698 li
398.033 137.534 li
398.186 137.183 li
399.041 137.39 li
399.18 137.445 li
399.297 137.68 li
399.55 137.822 li
399.782 137.883 li
399.84 137.883 li
400.328 137.957 li
400.859 137.947 li
401.119 137.867 li
400.821 137.724 li
400.821 137.534 li
400.908 137.32 li
400.844 137.036 li
400.741 136.783 li
400.748 136.674 li
401.062 136.755 li
401.184 136.96 li
401.236 137.237 li
401.337 137.534 li
401.512 137.802 li
401.707 137.967 li
401.982 138.049 li
402.391 138.073 li
402.594 137.945 li
402.703 137.647 li
402.811 137.007 li
403.197 137.131 li
403.307 137.183 li
403.27 137.068 li
403.254 137.048 li
403.227 137.052 li
403.131 137.007 li
403.473 136.856 li
403.633 136.833 li
403.43 136.65 li
403.364 136.521 li
403.438 136.415 li
403.633 136.309 li
403.633 136.117 li
403.532 136.027 li
403.51 135.984 li
403.51 135.924 li
403.459 135.784 li
403.822 135.948 li
404.141 135.918 li
404.285 135.728 li
404.128 135.417 li
404.128 135.258 li
404.205 135.181 li
404.273 135.068 li
404.453 135.068 li
404.636 135.271 li
404.969 135.396 li
405.289 135.381 li
405.435 135.163 li
405.529 135.076 li
405.747 135.052 li
406.183 135.068 li
406.581 134.369 li
406.424 134.208 li
406.5 134.053 li
406.641 133.925 li
406.836 133.855 li
407.092 133.859 li
407.031 133.691 li
406.959 133.324 li
406.908 133.158 li
407.242 133.301 li
407.148 132.933 li
406.943 132.71 li
406.653 132.613 li
406.271 132.616 li
406.271 132.441 li
406.618 132.272 li
407.016 132.167 li
407.329 132.292 li
407.417 132.808 li
407.584 132.616 li
407.73 132.968 li
407.91 132.968 li
407.867 132.629 li
407.832 132.551 li
407.73 132.441 li
407.73 132.266 li
407.91 132.107 li
408.055 132.107 li
408.043 132.56 li
408.107 132.92 li
408.28 133.089 li
408.566 132.968 li
408.754 132.253 li
408.929 132.016 li
409.059 132.441 li
409.219 132.441 li
409.406 132.212 li
409.43 132.103 li
409.387 131.916 li
409.742 131.982 li
410.047 132.112 li
410.273 132.342 li
410.351 132.711 li
410.381 132.793 li
410.438 132.894 li
410.504 133.035 li
410.533 133.229 li
410.469 133.321 li
410.33 133.436 li
410.205 133.605 li
410.205 133.859 li
410.533 134.262 li
410.984 133.946 li
411.5 133.41 li
412.008 133.158 li
410.861 131.996 li
410.549 131.907 li
409.713 131.004 li
409.029 130.496 li
408.73 130.211 li
408.471 129.771 li
408.36 129.453 li
408.18 129.209 li
407.685 128.992 li
406.871 128.783 li
406.443 128.725 li
406.08 128.743 li
405.71 128.887 li
404.766 129.585 li
404.33 129.767 li
402.922 130.076 li
402.434 130.076 li
401.424 129.942 li
400.996 129.998 li
400.836 130.136 li
400.641 130.544 li
400.436 130.688 li
400.232 130.694 li
399.992 130.627 li
399.572 130.462 li
399.267 130.313 li
399.172 129.411 li
398.904 129.015 li
398.424 128.883 li
398.04 129.055 li
397.393 129.735 li
396.559 130.237 li
396.115 129.808 li
395.475 127.943 li
394.748 127.182 li
394.051 127.264 li
393.297 127.518 li
392.338 127.266 li
390.479 125.624 li
389.779 125.191 li
388.771 124.978 li
388.271 124.812 li
387.943 124.46 li
387.893 123.931 li
388.139 123.519 li
388.488 123.141 li
388.706 122.711 li
388.684 122.18 li
388.428 121.807 li
388.008 121.603 li
387.515 121.591 li
387.092 121.767 li
386.709 121.998 li
386.293 122.076 li
385.77 121.798 li
385.452 121.397 li
385.247 121.039 li
384.957 120.76 li
384.376 120.619 li
383.383 120.644 li
382.959 120.582 li
382.466 120.324 li
382.348 120.21 li
382.16 119.941 li
382.023 119.839 li
381.688 119.726 li
381.535 119.76 li
380.752 120.638 li
380.389 120.913 li
380.018 120.897 li
379.873 120.74 li
379.793 120.517 li
379.756 120.272 li
379.756 120.055 li
380.229 118.84 li
380.352 118.237 li
380.33 117.558 li
380.279 117.451 li
380.076 117.196 li
380.01 117.057 li
380.003 116.847 li
380.076 116.429 li
380.076 116.242 li
379.945 115.944 li
379.77 115.689 li
379.619 115.404 li
379.553 115.022 li
379.844 114.643 li
380.055 114.443 li
380.111 114.188 li
379.553 112.295 li
379.414 111.966 li
379.016 111.622 li
378.057 111.575 li
377.525 111.385 li
377.207 111.046 li
377.076 110.648 li
377.025 109.693 li
376.844 108.912 li
376.844 108.642 li
376.93 108.357 li
377.191 107.97 li
377.301 107.757 li
377.853 105.12 li
378.049 104.584 li
378.311 104.263 li
378.783 104.205 li
379.066 104.532 li
379.32 104.977 li
379.713 105.269 li
380.229 105.261 li
380.525 104.995 li
380.947 103.666 li
381.121 103.271 li
381.637 102.465 li
381.855 101.996 li
381.95 101.185 li
382.118 100.731 li
382.408 100.474 li
383.199 100.011 li
383.375 99.6943 li
383.156 99.3628 li
382.641 99.3091 li
382.08 99.3628 li
381.732 99.3501 li
381.748 99.2866 li
381.362 98.6128 li
380.644 98.041 li
380.389 97.6968 li
380.221 97.5415 li
379.967 97.478 li
379.749 97.5557 li
379.561 97.9072 li
379.386 98.0049 li
378.848 97.9209 li
378.58 97.6069 li
378.404 97.1948 li
378.158 96.8223 li
377.811 96.6021 li
376.604 96.3003 li
376.226 96.1377 li
375.906 96.041 li
375.674 96.1914 li
375.572 96.7744 li
375.194 96.9858 li
371.773 97.897 li
371.316 97.9658 li
370.836 97.9683 li
370.327 97.8745 li
369.818 97.6367 li
369.652 97.3325 li
369.55 96.3789 li
369.057 95.4819 li
368.279 94.9888 li
367.371 94.7559 li
366.064 94.6006 li
364.182 94.7471 li
363.957 94.8696 li
363.572 95.6655 li
363.268 95.8608 li
362.875 95.9824 li
362.119 96.0688 li
361.887 96.0386 li
361.48 95.9282 li
361.227 95.9673 li
361.08 96.1011 li
360.993 96.3091 li
360.892 96.499 li
360.689 96.5791 li
360.252 96.2539 li
358.902 94.7271 li
358.589 94.2329 li
358.582 94.2329 li
358.582 94.2251 li
358.313 93.9609 li
358.037 93.8286 li
357.754 93.7397 li
357.47 93.5991 li
357.013 93.1274 li
356.767 92.9688 li
356.156 92.9834 li
355.48 92.7769 li
353.78 92.7046 li
353.439 92.5605 li
353.148 92.1499 li
353.047 91.6685 li
353.032 90.5732 li
352.879 90.0737 li
352.611 89.7573 li
351.573 89.061 li
351.34 88.7632 li
350.853 87.7471 li
350.853 87.7446 li
350.542 87.1577 li
350.417 87.0176 li
350.148 86.8809 li
349.959 86.9072 li
349.778 86.9736 li
349.545 86.96 li
349.219 86.8008 li
348.827 86.5405 li
348.457 86.2129 li
348.173 85.855 li
347.984 85.3667 li
347.882 84.9087 li
347.687 84.6108 li
347.244 84.5981 li
346.917 84.7935 li
346.088 85.5366 li
345.863 85.8071 li
345.659 86.3052 li
345.573 86.7959 li
345.42 87.2212 li
345.021 87.5171 li
344.744 87.563 li
344.578 87.5054 li
344.439 87.4194 li
344.25 87.3755 li
344.177 87.3452 li
343.996 87.2104 li
343.931 87.1826 li
343.807 87.2363 li
343.742 87.3379 li
343.698 87.4468 li
343.618 87.5229 li
341.664 88.0762 li
341.316 88.2227 li
340.575 88.7422 li
339.754 89.1689 li
338.882 89.9609 li
338.635 90.1064 li
338.301 90.0664 li
337.669 89.6895 li
337.335 89.6533 li
337.081 89.8647 li
337.001 90.2314 li
336.972 90.6455 li
336.871 91.0063 li
336.26 91.5205 li
335.672 91.6133 li
335.345 91.8887 li
336.042 95.2925 li
336.071 95.8145 li
335.962 96.0747 li
334.778 96.7969 li
334.509 97.0947 li
333.674 98.2778 li
333.365 98.5879 li
333.015 98.8169 li
332.593 98.9746 li
332.103 99.0059 li
331.294 98.752 li
330.832 98.6943 li
330.703 98.7656 li
330.459 99.0562 li
330.319 99.1123 li
330.099 99.0601 li
329.985 98.9712 li
329.888 98.8687 li
329.748 98.7734 li
329.667 98.6582 li
329.701 98.5166 li
329.693 98.3989 li
329.481 98.3564 li
329.425 98.439 li
328.996 98.917 li
327.444 100.199 li
326.972 100.708 li
324.727 102.171 li
324.36 102.23 li
324.001 102.071 li
323.502 101.757 li
322.184 101.144 li
321.88 100.788 li
321.708 100.275 li
321.686 99.7183 li
321.791 99.165 li
321.983 98.6582 li
321.314 98.6421 li
319.273 99.3716 li
318.573 99.4292 li
318.28 99.5078 li
317.955 99.7383 li
317.778 99.9624 li
317.493 100.487 li
317.269 100.708 li
316.767 101.381 li
316.531 102.11 li
316.375 103.682 li
316.278 104.076 li
315.958 104.842 li
315.85 105.232 li
315.85 105.638 li
315.892 106.01 li
315.845 106.345 li
315.571 106.653 li
315.224 106.863 li
315.019 106.623 li
314.772 106.41 li
314.405 106.318 li
314.204 106.188 li
313.862 105.534 li
313.666 105.259 li
313.523 105.194 li
313.139 105.145 li
312.999 105.099 li
312.456 104.481 li
312.267 104.392 li
312.106 104.226 li
311.627 103.461 li
311.523 103.238 li
311.257 102.926 li
309.628 101.456 li
307.999 99.4653 li
307.721 99.314 li
306.687 99.9097 li
306.355 100.118 li
306.175 100.434 li
306.038 100.821 li
305.835 101.231 li
305.327 101.859 li
305.264 102.11 li
305.417 103.409 li
305.304 103.65 li
304.537 104.79 li
304.282 104.943 li
303.845 104.875 li
303.551 104.679 li
302.935 103.992 li
302.057 102.53 li
301.897 102.167 li
301.85 101.708 li
301.89 101.26 li
301.836 100.898 li
301.495 100.708 li
301.289 100.408 li
301.044 100.14 li
300.764 99.9097 li
300.455 99.7295 li
299.911 99.5381 li
299.626 99.6021 li
298.673 101.275 li
298.253 102.432 li
298.072 102.687 li
297.676 103.02 li
296.237 103.779 li
295.596 104.281 li
295.314 105.034 li
295.375 105.244 li
295.667 105.607 li
295.691 105.871 li
295.602 106.071 li
294.384 106.916 li
293.979 107.095 li
293.592 107.165 li
293.253 107.396 li
293.271 107.748 li
293.372 108.163 li
293.274 108.583 li
292.89 108.851 li
292.408 108.847 li
291.932 108.658 li
291.15 108.087 li
290.263 107.842 li
289.855 107.635 li
289.643 107.374 li
288.816 105.742 li
288.668 105.279 li
288.477 104.846 li
288.157 104.47 li
287.714 104.239 li
286.703 104.003 li
286.239 103.81 li
284.818 102.641 li
284.325 102.438 li
283.367 102.265 li
282.893 102.095 li
282.74 101.962 li
282.381 101.552 li
282.273 101.461 li
282.021 101.521 li
281.881 101.694 li
281.771 101.89 li
281.594 102.007 li
281.052 101.985 li
280.887 101.676 li
280.824 101.207 li
280.571 100.708 li
280.057 100.315 li
279.418 100.103 li
278.818 100.191 li
278.407 100.706 li
278.407 100.708 li
278.158 101.623 li
277.967 102.047 li
277.671 102.381 li
277.423 102.453 li
277.148 102.438 li
276.898 102.461 li
276.732 102.656 li
276.743 102.945 li
276.913 103.134 li
277.137 103.28 li
277.278 103.453 li
277.371 103.667 li
277.416 103.717 li
277.237 104.061 li
274.253 107.165 li
274.012 107.637 li
273.872 108.508 li
273.744 108.95 li
273.425 109.354 li
273.078 109.308 li
272.669 109.086 li
272.141 108.971 li
271.72 109.086 li
271.285 109.349 li
271.04 109.693 li
271.202 110.052 li
271.345 110.308 li
271.585 111.123 li
271.653 111.214 li
271.86 111.372 li
271.939 111.485 li
271.939 111.625 li
271.859 111.931 li
271.896 112.088 li
272.245 112.477 li
272.66 112.767 li
273.005 113.101 li
273.16 113.618 li
273.621 114.056 li
275.067 114.787 li
276.785 116.47 li
277.539 116.924 li
277.764 117.136 li
277.921 117.409 li
278.158 118.047 li
278.325 118.337 li
278.815 118.718 li
279.416 119.064 li
279.781 119.389 li
279.571 119.71 li
279.502 119.784 li
279.45 119.866 li
279.408 119.959 li
279.386 120.06 li
279.667 121.031 li
280.574 121.505 li
281.639 121.858 li
282.377 122.478 li
283.196 124.347 li
283.423 125.397 li
283.308 126.904 li
283.358 127.491 li
283.476 128.073 li
283.632 128.474 li
283.809 128.735 li
283.876 128.774 li
283.972 128.72 li
285.241 128.698 li
285.501 128.636 li
286.245 128.144 li
286.786 127.45 li
287.074 126.628 li
287.133 124.56 li
287.555 124.156 li
288.028 124.537 li
288.232 125.71 li
288.159 126.733 li
288.237 127.23 li
288.526 127.539 li
288.941 127.507 li
290.681 126.753 li
290.816 126.651 li
290.941 126.699 li
291.138 127.038 li
291.23 127.317 li
291.275 127.614 li
291.253 129.376 li
291.332 130 li
291.572 130.562 li
291.592 130.633 li
291.601 130.708 li
291.592 130.78 li
291.572 130.853 li
291.092 131.316 li
290.192 132.438 li
289.674 132.907 li
288.585 134.698 li
288.948 134.525 li
289.428 134.22 li
289.894 134 li
290.226 134.064 li
290.197 134.358 li
289.406 135.647 li
289.306 136.172 li
289.284 137.343 li
289.198 137.775 li
288.905 138.071 li
288.093 138.272 li
287.7 138.58 li
287.425 139.068 li
287.612 139.177 li
288.069 139.129 li
288.597 139.148 li
288.957 139.289 li
289.268 139.509 li
289.502 139.783 li
289.625 140.085 li
289.596 140.318 li
289.386 140.828 li
289.386 141.076 li
289.532 141.331 li
289.695 141.378 li
289.894 141.389 li
290.139 141.536 li
290.408 141.965 li
290.641 142.969 li
290.806 143.417 li
290.917 143.647 li
291.03 143.823 li
291.222 143.905 li
291.572 143.856 li
292.174 144.121 li
292.542 144.551 li
293.084 145.703 li
293.83 147.343 li
294.275 148.092 li
294.96 148.949 li
295.314 149.294 li
295.467 149.407 li
295.721 149.521 li
296.155 149.58 li
296.399 149.644 li
296.602 149.749 li
296.924 149.985 li
297.159 150.069 li
297.439 150.074 li
297.909 149.933 li
298.125 149.912 li
298.516 150.021 li
299.87 150.75 li
300.539 150.974 li
300.793 151.009 li
300.925 151.012 li
301.575 150.83 li
302.064 150.552 li
302.233 150.395 li
302.306 150.233 li
302.432 150.167 li
302.765 150.293 li
303.057 150.586 li
303.495 151.438 li
303.753 151.77 li
303.94 151.909 li
304.13 152.014 li
304.338 152.074 li
304.581 152.087 li
304.581 152.085 li
304.582 152.087 li
304.582 152.09 li
306.065 152.408 li
306.532 152.677 li
307.459 153.685 li
307.985 154.147 li
308.063 154.248 li
308.164 154.312 li
308.427 154.357 li
308.645 154.327 li
308.938 154.228 li
309.199 154.095 li
309.338 153.969 li
309.326 153.761 li
309.082 153.266 li
309.051 153.025 li
309.169 152.69 li
309.318 152.59 li
309.523 152.563 li
309.82 152.458 li
310.305 152.153 li
310.402 151.978 li
310.319 151.731 li
310.268 151.209 li
310.357 150.798 li
310.56 150.281 li
310.809 149.805 li
311.042 149.522 li
311.309 149.431 li
311.796 149.499 li
312.039 149.479 li
312.253 149.361 li
312.607 149.042 li
312.801 148.919 li
314.567 148.351 li
315.047 148.134 li
315.291 148.073 li
315.571 148.083 li
316.449 147.936 li
317.556 146.639 li
318.411 146.579 li
318.576 146.669 li
318.938 146.94 li
319.139 147.039 li
319.365 147.078 li
319.91 147.088 li
320.165 147.127 li
320.85 147.378 li
321.026 147.492 li
321.167 147.691 li
321.417 148.218 li
321.502 148.346 li
321.668 148.338 li
322.21 148.187 li
322.437 148.169 li
322.653 148.24 li
322.89 148.358 li
323.105 148.506 li
323.283 148.658 li
323.569 149.045 li
323.954 149.832 li
324.268 150.209 li
324.468 150.347 li
324.845 150.49 li
325.027 150.615 li
325.156 150.804 li
325.356 151.247 li
325.533 151.436 li
326.02 151.583 li
326.568 151.569 li
327.059 151.625 li
327.384 151.981 li
327.613 152.783 li
328.012 153.193 li
329.25 153.79 li
330.614 154.253 li
330.961 154.612 li
330.771 155.312 li
329.22 157.436 li
328.694 157.855 li
328.096 158.042 li
327.469 157.934 li
326.876 157.463 li
326.367 158.461 li
326.364 158.461 li
324.99 159.403 li
324.832 159.88 li
325.593 160.366 li
326.573 160.611 li
330.009 160.535 li
330.341 160.717 li
330.892 161.483 li
331.279 161.762 li
332.19 162.119 li
332.539 162.395 li
332.628 162.596 li
332.702 162.885 li
332.739 163.183 li
332.725 163.411 li
332.562 163.756 li
332.375 163.811 li
332.177 163.8 li
331.974 163.955 li
331.882 164.29 li
331.845 164.808 li
331.87 165.324 li
331.966 165.657 li
332.777 166.068 li
333.803 165.859 li
334.887 165.496 li
335.854 165.446 li
337.988 166.607 li
338.011 166.797 li
337.879 167.072 li
337.916 167.641 li
338.236 168.122 li
339.166 168.73 li
339.34 169.129 li
339.268 169.23 li
338.933 169.295 li
338.853 169.358 li
338.846 169.513 li
338.912 169.736 li
338.955 170.207 li
339.035 170.515 li
339.071 170.826 li
338.985 171.175 li
338.657 171.463 li
338.337 171.512 li
337.625 171.431 li
337.168 171.502 li
337.052 171.626 li
337.008 171.845 li
336.791 172.199 li
336.246 172.612 li
334.931 173.396 li
334.48 173.968 li
334.33 174.437 li
334.452 174.578 li
335.164 174.624 li
335.621 174.775 li
335.796 174.916 li
335.802 175.148 li
335.759 175.568 li
335.519 176.367 li
335.04 176.722 li
334.452 176.985 li
333.878 177.515 li
333.424 177.653 li
333.097 177.691 li
332.797 177.773 li
332.42 178.046 li
332.11 178.388 li
331.911 178.724 li
331.15 180.747 li
330.938 181.018 li
330.716 181.042 li
330.304 180.801 li
330.099 180.749 li
329.882 180.817 li
329.513 181.067 li
329.304 181.156 li
328.743 181.222 li
328.336 181.134 li
326.975 180.314 li
326.367 180.046 li
326.167 179.917 li
325.826 179.573 li
325.598 179.258 li
325.318 179.045 li
324.836 178.99 li
324.402 179.103 li
323.283 179.815 li
322.845 179.08 li
322.007 178.793 li
321.691 178.52 li
319.992 178.982 li
319.467 178.99 li
319.345 179.117 li
319.183 179.283 li
319.009 179.66 li
318.817 179.815 li
318.325 179.89 li
317.869 179.736 li
316.717 179.143 li
316.442 179.063 li
316.219 179.16 li
316.08 179.561 li
316.139 179.875 li
316.612 181.195 li
316.89 181.56 li
317.64 182.011 li
317.914 182.239 li
318.067 182.651 li
318.098 183.086 li
318.176 183.502 li
318.452 183.847 li
318.452 183.849 li
318.456 183.85 li
318.456 183.851 li
318.354 184.15 li
318.146 184.262 li
317.889 184.318 li
317.647 184.464 li
317.493 184.735 li
317.393 185.319 li
317.313 185.572 li
317.126 185.929 li
317.114 185.94 li
317.039 185.845 li
316.685 185.889 li
316.116 186.093 li
315.571 186.376 li
315.063 186.496 li
314.78 186.738 li
314.305 187.462 li
313.936 187.74 li
313.076 188.116 li
312.757 188.362 li
312.557 188.798 li
312.8 188.915 li
313.236 188.902 li
313.618 188.951 li
313.936 189.553 li
314.058 189.731 li
314.227 189.854 li
314.831 190.171 li
315.542 190.685 li
315.571 190.685 li
316.08 190.468 li
316.583 190.442 li
317.078 190.56 li
319.741 191.754 li
320.703 192.419 li
320.951 192.663 li
321.038 193.167 li
321.04 193.618 li
321.25 193.83 li
321.945 193.625 li
322.434 193.746 li
322.78 194.014 li
323.09 194.341 li
323.465 194.641 li
323.923 194.847 li
324.335 194.98 li
324.72 195.165 li
325.125 195.525 li
325.813 196.568 li
326.114 196.8 li
326.542 196.895 li
327.288 196.817 li
327.74 196.935 li
328.141 197.18 li
328.433 197.474 li
329.259 198.725 li
329.543 198.985 li
330.349 199.423 li
330.692 199.686 li
331.347 200.349 li
331.706 200.596 li
331.948 200.668 li
332.413 200.706 li
332.65 200.792 li
332.777 200.93 li
333.057 201.354 li
333.244 201.516 li
333.524 201.618 li
334.509 201.758 li
335.439 202.043 li
335.766 202.08 li
337.146 201.971 li
337.778 202.158 li
338.019 202.786 li
338.272 203.04 li
338.693 203.151 li
339.166 203.137 li
339.573 203.027 li
339.965 203.105 li
341.164 203.81 li
341.744 204.02 li
342.042 203.999 li
342.325 203.921 li
342.602 203.883 li
342.899 203.977 li
343.583 205.117 li
344.105 205.473 li
344.265 205.684 li
344.265 206.08 li
344.091 206.499 li
343.843 206.534 li
343.568 206.441 li
343.27 206.481 li
342.921 206.937 li
342.609 207.683 li
342.246 209.077 li
342.115 210.119 li
342.376 210.818 li
342.936 211.356 li
343.692 211.908 li
344.105 212.34 li
344.091 212.644 li
343.938 212.977 li
343.959 213.5 li
344.185 213.828 li
345.355 214.555 li
345.493 214.732 li
345.703 215.122 li
345.863 215.269 li
346.11 215.346 li
346.996 215.251 li
347.112 215.17 li
347.221 215.186 li
347.381 215.455 li
347.417 215.734 li
347.265 216.336 li
347.28 216.621 li
347.534 216.986 li
347.926 217.262 li
348.361 217.449 li
348.739 217.546 li
348.921 217.635 li
348.972 217.741 li
349.037 217.768 li
349.255 217.623 li
349.357 217.446 li
349.466 216.89 li
349.604 216.657 li
350.04 216.464 li
350.548 216.498 li
351.035 216.694 li
351.397 216.99 li
351.542 217.215 li
351.739 217.897 li
351.747 218.05 li
351.695 218.181 li
351.646 218.277 li
351.623 218.336 li
351.732 218.428 li
352.008 218.493 li
352.102 218.566 li
352.495 219.453 li
352.691 219.626 li
353.112 219.855 li
353.316 220.052 li
353.446 220.328 li
353.534 220.899 li
353.62 221.146 li
353.788 221.324 li
354.355 221.638 li
354.355 221.64 li
354.747 222.43 li
354.457 224.336 li
354.726 225.185 li
355.655 226.041 li
356.272 227.218 li
356.809 227.946 li
357.027 228.359 li
357.333 229.313 li
357.55 229.713 li
357.848 229.951 li
359.098 230.5 li
359.875 231.013 li
360.507 231.604 li
362.068 233.634 li
362.57 234.162 li
362.578 234.162 li
364.662 236.693 li
368.65 240.12 li
369.174 240.397 li
369.521 240.432 li
369.805 240.254 li
370.146 239.899 li
370.254 239.691 li
370.313 239.475 li
370.436 239.325 li
370.742 239.309 li
371.031 239.435 li
371.083 239.64 li
371.055 239.905 li
371.111 240.209 li
371.236 240.381 li
371.57 240.73 li
371.65 240.875 li
371.635 241.105 li
371.438 241.502 li
371.418 241.763 li
371.555 242.14 li
372.274 243.335 li
373.43 244.415 li
373.676 244.847 li
373.661 244.992 li
373.51 245.254 li
373.487 245.367 li
374.011 246.412 li
374.076 246.649 li
374.076 246.652 li
374.287 246.827 li
374.693 247.032 li
375.158 247.203 li
375.572 247.275 li
376.125 247.445 li
376.793 246.812 li
377.003 247.227 li
377.039 254.432 li
377.178 255.039 li
377.396 255.571 li
377.94 256.174 li
378.391 256.451 li
378.878 256.646 li
379.197 256.673 li
379.567 256.845 li
379.661 257.125 li
379.553 258.458 li
379.589 258.743 li
379.923 259.726 li
380.293 260.383 li
380.832 260.794 li
381.543 260.679 li
381.543 260.949 li
381.615 261.062 li
381.783 261.052 li
382.016 260.953 li
382.264 260.766 li
382.306 260.579 li
382.313 260.387 li
382.421 260.181 li
383.069 259.769 li
383.337 259.511 li
383.432 259.097 li
383.947 258.23 li
384.521 258.251 li
384.937 258.899 li
385.01 259.9 li
384.906 260.728 li
384.877 260.794 li
384.797 260.875 li
384.738 260.982 li
384.738 261.123 li
384.842 261.193 li
385.002 261.138 li
385.146 261.056 li
385.234 261.039 li
385.525 261.714 li
385.75 262.021 li
386.163 262.365 li
386.752 262.687 li
386.904 262.826 li
387.02 263.07 li
387.1 263.63 li
387.159 263.797 li
387.42 263.976 li
387.725 264.015 li
388.546 263.988 li
389.482 264.091 li
389.897 264.222 li
390.341 264.445 li
390.797 264.781 li
391.01 265.101 li
391.262 266.433 li
391.399 266.751 li
391.609 267.029 li
391.908 267.302 li
392.273 267.529 li
392.599 267.62 li
392.934 267.675 li
393.31 267.783 li
393.936 268.201 li
394.821 269.337 li
395.375 269.83 li
396.051 270.031 li
396.746 269.953 li
398.075 269.61 li
398.549 269.595 li
398.656 269.714 li
398.605 270 li
398.57 270.473 li
398.686 270.756 li
398.846 270.954 li
398.873 271.176 li
398.584 271.525 li
398.235 271.832 li
397.574 273.016 li
397.219 273.432 li
396.869 273.598 li
395.955 273.76 li
395.527 273.926 li
393.855 275.008 li
393.652 275.063 li
393.435 275.025 li
393.217 274.918 li
392.969 274.846 li
392.671 274.912 li
392.41 275.18 li
391.808 276.525 li
391.77 277.041 li
392.048 277.406 li
393.369 278.18 li
393.615 278.445 li
393.725 278.803 li
393.832 279.83 li
393.943 280.223 li
394.168 280.57 li
394.573 280.877 li
395.49 281.346 li
395.795 281.619 li
397.066 283.912 li
397.364 284.1 li
397.532 284 li
397.686 283.779 li
397.922 283.602 li
398.098 283.598 li
398.57 283.719 li
398.717 283.678 li
398.831 283.588 li
398.954 283.615 li
399.086 283.916 li
399.086 283.918 li
399.159 284.104 li
399.26 284.201 li
399.396 284.203 li
399.572 284.107 li
399.9 284.275 li
399.965 284.768 li
399.957 285.352 li
400.058 285.795 li
400.508 286.059 li
401.535 285.9 li
401.955 286.014 li
402.063 286.299 li
402.123 287.25 li
402.28 287.691 li
402.566 288.006 li
403.64 288.816 li
403.98 289.197 li
404.141 289.541 li
404.148 289.922 li
403.968 291.096 li
403.902 291.246 li
403.742 291.295 li
403.625 291.176 li
403.479 291.109 li
403.254 291.322 li
403.166 291.553 li
403.117 292.361 li
402.979 292.83 li
402.73 293.197 li
402.586 293.342 li
402.246 293.602 li
402.135 293.787 li
402.143 294.029 li
402.361 294.477 li
402.34 294.74 li
402.078 295.01 li
401.707 295.045 li
401.047 294.932 li
400.661 294.971 li
399.572 295.295 li
399.121 295.334 li
398.896 295.549 li
398.873 295.885 li
399.034 296.277 li
398.999 296.643 li
399.1 296.971 li
399.289 297.244 li
399.572 297.455 li
399.95 297.65 li
401.395 298.762 li
401.6 298.975 li
401.535 299.232 li
401.177 299.711 li
400.176 300.678 li
399.985 301.008 li
400.065 301.391 li
400.306 301.775 li
400.424 302.135 li
400.152 302.447 li
400.306 302.686 li
400.553 302.883 li
400.733 303.119 li
400.691 303.467 li
400.981 304.123 li
400.859 304.744 li
400.298 305.992 li
400.264 306.375 li
400.355 307.107 li
400.328 307.5 li
400.203 307.775 li
399.862 308.273 li
399.755 308.607 li
399.732 308.783 li
399.645 309.119 li
399.354 309.764 li
399.145 310.137 li
398.839 310.391 li
398.373 310.506 li
398.221 310.43 li
398.125 310.266 li
397.988 310.158 li
397.678 310.256 li
397.486 310.434 li
397.414 310.637 li
397.379 310.859 li
397.307 311.084 li
396.818 311.949 li
396.644 312.402 li
396.602 312.904 li
396.65 313.125 li
396.863 313.6 li
396.937 313.848 li
396.929 314.078 li
396.811 314.945 li
395.998 317.277 li
395.883 317.867 li
395.982 318.156 li
396.208 318.391 li
396.479 318.814 li
396.528 319.297 li
396.448 319.807 li
396.434 320.307 li
396.711 320.754 li
397.117 320.904 li
398.018 320.816 li
398.389 320.959 li
398.541 321.195 li
398.556 321.436 li
398.525 321.67 li
398.549 321.895 li
398.889 322.617 li
398.954 323.043 li
398.889 323.324 li
398.759 323.604 li
398.648 324.016 li
398.911 324.76 li
398.881 324.98 li
398.729 325.508 li
398.717 325.764 li
398.839 326.133 li
399.297 326.68 li
399.521 327.051 li
399.572 327.162 li
400.125 327.764 li
400.546 328.365 li
402.528 332.23 li
402.703 333.127 li
402.856 335.533 li
402.769 336.283 li
399.252 344.813 li
399.313 345.162 li
399.688 345.438 li
399.748 345.617 li
399.755 345.775 li
399.695 345.908 li
399.572 346.006 li
399.427 346.246 li
399.39 346.512 li
399.441 346.783 li
399.71 347.4 li
399.805 348.143 li
399.9 348.51 li
400.065 348.799 li
400.741 349.563 li
401.068 350.244 li
401.127 350.885 li
401.111 351.541 li
401.164 352.271 li
401.765 354.969 li
401.811 355.762 li
401.723 356.502 li
401.592 356.813 li
401.447 357.078 li
401.395 357.342 li
401.563 357.658 li
401.563 358.234 li
400.859 360.227 li
400.733 360.826 li
400.546 361.381 li
400.19 361.822 li
399.572 362.076 li
398.991 362.475 li
398.186 363.57 li
397.633 363.602 li
397.174 363.197 li
396.455 362.082 li
395.891 361.738 li
394.828 361.832 li
393.289 362.313 li
391.865 363.012 li
391.154 363.762 li
390.994 364.107 li
390.703 364.373 li
390.063 364.824 li
389.31 365.762 li
387.668 367.398 li
387.087 367.793 li
386.193 368.139 li
385.307 368.24 li
383.475 368.1 li
382.727 368.164 li
382.184 368.494 li
381.79 369.066 li
381.508 369.857 li
381.041 370.482 li
380.533 370.621 li
379.334 370.35 li
379.523 370.717 li
377.461 370.432 li
376.306 370.418 li
375.572 370.938 li
375.252 370.918 li
375.122 370.752 li
375.027 370.539 li
374.809 370.383 li
374.498 370.334 li
374.221 370.357 li
373.655 370.506 li
373.887 371.162 li
374.592 372.49 li
374.73 373.092 li
374.672 373.152 li
374.316 373.729 li
374.287 373.891 li
374.271 374.352 li
374.236 374.561 li
374.076 374.908 li
373.873 375.232 li
373.749 375.566 li
373.77 375.951 li
374.425 377.068 li
374.643 377.633 li
374.418 378.002 li
374.105 378.01 li
373.801 377.846 li
373.277 377.473 li
372.943 377.359 li
372.703 377.32 li
372.449 377.346 li
371.098 377.699 li
370.777 377.645 li
370.561 377.469 li
370.219 376.932 li
370.037 376.725 li
369.564 376.471 li
367.909 375.951 li
366.914 375.934 li
365.672 375.547 li
364.567 375.361 li
364.008 375.951 li
363.993 376.289 li
363.928 376.617 li
363.791 376.918 li
363.129 377.615 li
362.904 378.125 li
362.621 378.471 li
361.931 378.436 li
360.791 378.016 li
360.376 378.1 li
359.832 378.566 li
359.519 378.908 li
359.244 379.338 li
359.171 379.822 li
359.475 380.338 li
359.773 380.494 li
360.413 380.611 li
360.674 380.807 li
360.783 381.082 li
360.812 381.406 li
360.762 382.039 li
361.133 383.324 li
361.168 383.695 li
361.102 384.059 li
360.842 384.885 li
360.441 386.715 li
360.464 387.061 li
360.769 387.303 li
361.16 387.4 li
361.48 387.594 li
361.547 388.117 li
361.547 388.121 li
361.793 388.793 li
362.286 389.166 li
363.572 389.48 li
363.928 389.807 li
364.516 390.723 li
364.873 391.125 li
365.715 391.838 li
366.034 392.234 li
366.282 392.736 li
366.55 392.213 li
366.92 391.994 li
367.342 392.061 li
367.771 392.389 li
368.047 392.807 li
368.438 394.197 li
368.707 394.682 li
368.541 394.828 li
367.777 394.803 li
367.357 394.852 li
367.277 394.939 li
367.14 395.188 li
367.189 395.242 li
367.16 395.869 li
367.125 395.922 li
367.248 396.316 li
367.836 397.434 li
368.453 399.768 li
367.923 399.33 li
367.291 399.172 li
365.934 399.041 li
365.293 398.82 li
364.625 398.482 li
364.023 398.045 li
363.572 397.535 li
363.355 397.273 li
362.547 396.623 li
362.512 397.02 li
362.293 397.551 li
362.003 398.031 li
361.785 398.273 li
361.285 398.281 li
360.863 398.01 li
360.536 397.619 li
360.361 397.27 li
360.086 396.426 li
359.912 396.057 li
359.098 394.932 li
358.669 394.191 li
358.27 393.727 li
357.623 393.66 li
356.933 393.857 li
356.374 394.193 li
356.366 394.197 li
355.916 394.486 li
355.371 394.738 li
351.573 395.541 li
351.376 395.518 li
350.839 395.248 li
350.156 395.061 li
350.047 395.006 li
349.749 395.209 li
348.775 396.342 li
348.057 397.791 li
347.824 398.02 li
347.469 397.895 li
346.648 397.176 li
346.277 396.936 li
342.877 396.303 li
342.537 396.188 li
342.26 395.818 li
342.208 395.5 li
342.063 395.396 li
341.534 395.674 li
341.221 395.895 li
340.895 396.193 li
340.625 396.545 li
340.473 396.928 li
340.553 397.768 li
340.931 398.682 li
341.788 400.264 li
341.803 401.051 li
341.214 401.613 li
338.861 402.807 li
338.548 403.072 li
338.272 403.379 li
337.284 404.885 li
336.703 405.482 li
335.846 405.826 li
334.771 405.871 li
331.21 405.434 li
330.178 405.479 li
329.801 405.563 li
329.493 405.799 li
329.259 406.152 li
329.06 406.533 li
328.059 407.996 li
327.806 408.23 li
327.465 408.287 li
327.031 408.191 li
327.146 408.496 li
327.076 408.896 li
327.087 409.16 li
327.474 409.193 li
327.866 409.078 li
328.183 408.867 li
328.432 408.572 li
328.625 408.201 li
328.802 408.201 li
328.936 408.451 li
328.923 408.68 li
328.802 408.918 li
328.625 409.193 li
328.424 409.332 li
328.251 409.328 li
328.183 409.383 li
328.295 409.703 li
328.83 410.395 li
329.063 410.865 li
329.1 411.525 li
329.295 411.525 li
329.313 411.42 li
329.344 411.35 li
329.445 411.195 li
330.111 411.705 li
330.339 412.043 li
330.428 412.607 li
330.428 413.27 li
330.496 413.498 li
330.812 413.863 li
330.917 414.023 li
330.93 414.309 li
330.839 414.488 li
330.787 414.645 li
330.917 414.865 li
330.987 414.82 li
331.83 414.865 li
331.906 414.76 li
332.008 414.293 li
332.154 414.189 li
332.423 414.127 li
332.479 413.973 li
332.47 413.758 li
332.556 413.525 li
333.184 412.977 li
333.931 412.756 li
334.727 412.871 li
335.527 413.348 li
336.021 413.982 li
336.493 414.797 li
337.06 415.551 li
337.83 416.006 li
338.389 416.031 li
339.34 415.801 li
339.812 415.855 li
340.284 416.131 li
341.229 417.029 li
342.311 418.441 li
342.617 418.99 li
342.775 419.51 li
342.775 420.576 li
342.921 421.484 li
342.921 421.822 li
342.355 420.303 li
342.289 419.916 li
342.042 419.736 li
341.519 419.977 li
340.045 421.072 li
339.653 421.482 li
339.485 421.906 li
339.289 422.141 li
338.011 422.648 li
337.503 423.393 li
337.183 424.371 li
336.26 429.102 li
336.195 430.113 li
336.361 433.213 li
336.021 434.324 li
335.861 437.883 li
335.672 439.338 li
335.687 442.164 li
335.802 442.789 li
336.195 443.02 li
336.195 443.188 li
335.752 443.5 li
335.687 444.066 li
335.861 445.258 li
335.788 445.766 li
335.447 446.805 li
335.374 447.414 li
335.802 448.061 li
336.798 447.814 li
338.316 447.145 li
338.2 447.596 li
338.265 448.084 li
338.504 448.49 li
338.504 448.641 li
338.099 448.926 li
337.923 448.969 li
337.335 448.969 li
336.95 449.012 li
336.674 449.076 li
336.565 449.207 li
336.682 449.477 li
337.234 449.797 li
337.988 449.791 li
338.752 449.588 li
339.319 449.313 li
339.166 449.602 li
338.825 449.871 li
338.425 450.059 li
338.083 450.139 li
336.5 449.828 li
336.195 449.803 li
335.868 450 li
335.977 450.107 li
336.224 450.24 li
336.34 450.479 li
336.246 450.734 li
336.079 450.828 li
335.861 450.887 li
335.614 451.039 li
334.211 452.131 li
333.971 451.906 li
333.677 451.795 li
333.485 451.859 li
333.556 452.131 li
333.69 452.201 li
334.26 452.41 li
335.759 452.646 li
335.934 452.746 li
336.05 452.857 li
336.195 452.938 li
336.754 453.021 li
342.035 451.971 li
342.936 451.6 li
343.583 451.127 li
344.366 449.848 li
345.878 448.641 li
345.878 448.49 li
346.517 448.611 li
347.28 448.121 li
347.962 447.4 li
348.361 446.826 li
350.003 443.02 li
350.019 442.908 li
349.982 442.645 li
350.003 442.525 li
350.12 442.424 li
350.431 442.344 li
350.498 442.279 li
350.599 441.857 li
350.853 441.537 li
351.493 441.045 li
352.545 439.918 li
353.135 439.418 li
358.444 437.447 li
364.647 434.93 li
367.938 433.918 li
368.621 433.795 li
368.846 433.621 li
368.94 433.25 li
368.882 432.902 li
368.715 432.771 li
368.505 432.676 li
368.265 432.436 li
369.143 431.492 li
369.268 431.188 li
369.194 430.184 li
369.094 429.813 li
368.94 429.465 li
366.436 425.793 li
366.216 425.307 li
366.122 424.879 li
365.969 424.467 li
360.325 418.859 li
359.86 418.172 li
360.318 418.238 li
361.073 418.719 li
361.909 418.934 li
362.592 419.443 li
363.5 420.281 li
365.767 423.102 li
370.219 427.289 li
372.296 428.412 li
373.451 429.293 li
373.764 429.443 li
374.752 429.465 li
375.101 429.24 li
375.348 429.137 li
375.58 429.203 li
375.842 429.32 li
376.139 429.254 li
376.654 428.941 li
377.257 428.406 li
377.723 427.695 li
378.021 426.867 li
378.143 425.631 li
378.129 425.133 li
378.014 424.676 li
377.723 424.48 li
377.111 424.387 li
376.873 424.121 li
376.654 423.16 li
376.226 422.379 li
375.63 421.707 li
373.539 419.99 li
373.073 419.404 li
372.943 419.33 li
371.707 418.172 li
371.57 417.959 li
371.366 417.559 li
371.221 417.346 li
371.003 417.137 li
369.369 415.936 li
368.846 415.449 li
368.578 415.141 li
368.359 414.791 li
368.191 413.977 li
368.003 413.631 li
367.443 413.029 li
367.262 412.918 li
367.037 412.809 li
366.928 412.689 li
367.125 412.533 li
367.262 412.563 li
367.48 412.682 li
367.684 412.826 li
373.691 418.984 li
375.718 420.205 li
376.306 420.652 li
377.73 422.193 li
378.296 422.648 li
378.885 422.791 li
379.523 422.574 li
379.996 422.027 li
380.111 421.178 li
380.257 421.178 li
380.389 421.363 li
380.445 421.588 li
380.41 421.813 li
380.257 421.988 li
380.257 422.168 li
380.584 421.871 li
380.854 421.352 li
380.919 420.867 li
380.686 420.652 li
380.301 420.557 li
378.95 419.84 li
377.687 418.869 li
375.834 417.99 li
375.289 417.498 li
373.052 414.586 li
372.805 414.086 li
372.594 413.16 li
372.311 412.838 li
371.599 412.271 li
371.475 412.227 li
371.345 412.16 li
371.221 412.021 li
372.158 412.318 li
372.848 413.018 li
374.846 416.195 li
375.456 416.938 li
376.16 417.496 li
377.359 417.99 li
377.723 418.254 li
378.057 418.578 li
378.391 418.83 li
378.79 418.973 li
379.684 419.008 li
379.785 418.984 li
379.844 418.904 li
379.901 418.727 li
380.076 418.486 li
380.068 418.328 li
380.148 418.213 li
380.519 418.172 li
380.629 418.07 li
380.519 417.854 li
380.345 417.648 li
380.257 417.578 li
380.316 417.367 li
380.453 417.172 li
380.767 416.85 li
380.816 416.752 li
380.934 416.338 li
381.107 416.338 li
381.209 416.541 li
381.252 416.768 li
381.225 416.992 li
381.107 417.18 li
381.508 417.275 li
381.9 417.053 li
383.199 415.695 li
383.337 415.324 li
383.387 414.773 li
383.352 414.555 li
383.242 414.426 li
383.069 414.369 li
382.821 414.354 li
382.568 414.305 li
382.408 414.189 li
382.291 414.074 li
382.168 414.023 li
382.023 413.945 li
381.637 413.604 li
381.515 413.525 li
375.738 411.561 li
374.345 410.684 li
374.715 410.564 li
375.057 410.705 li
375.441 410.92 li
375.914 411.029 li
376.814 411.035 li
378.564 411.375 li
381.107 411.359 li
382.355 411.65 li
382.821 411.691 li
383.191 411.463 li
383.303 410.93 li
383.119 408.838 li
382.975 408.482 li
382.669 408.127 li
382.443 407.791 li
382.248 407.375 li
381.992 407.021 li
381.588 406.875 li
381.34 407.02 li
380.961 407.676 li
380.767 407.871 li
380.293 407.883 li
380.119 407.605 li
380.062 407.213 li
379.945 406.875 li
379.785 406.875 li
379.604 407.242 li
379.327 407.561 li
378.972 407.785 li
378.543 407.871 li
378.289 407.73 li
378.174 407.391 li
378.129 406.545 li
378.296 406.76 li
378.42 407.006 li
378.484 407.313 li
378.471 407.721 li
378.775 407.516 li
379.096 407.395 li
379.342 407.248 li
379.523 406.754 li
379.728 406.572 li
379.996 406.436 li
380.257 406.381 li
380.105 406.221 li
380.033 406.074 li
379.945 405.717 li
380.111 405.717 li
380.345 406.145 li
380.744 406.156 li
381.515 405.883 li
381.813 405.701 li
381.992 405.277 li
382.118 404.781 li
382.256 404.393 li
382.4 404.238 li
382.539 404.145 li
382.669 404.008 li
382.749 403.73 li
382.474 403.055 li
382.421 402.818 li
382.299 402.686 li
382.059 402.57 li
381.893 402.41 li
382.008 402.141 li
382.153 402.033 li
382.619 401.775 li
382.749 401.727 li
383.069 401.877 li
383.439 402.197 li
383.752 402.557 li
383.883 402.818 li
384.093 403.088 li
384.578 402.957 li
385.372 402.557 li
386.846 403.807 li
386.729 404.629 li
386.717 405.064 li
386.846 405.537 li
386.984 405.748 li
387.121 405.846 li
387.236 405.959 li
387.332 406.215 li
387.313 406.463 li
387.217 406.721 li
387.18 406.934 li
387.332 407.057 li
387.543 406.871 li
388.072 405.934 li
388.488 405.717 li
388.023 405.273 li
387.828 404.625 li
387.84 403.896 li
388.008 403.217 li
388.152 403.217 li
388.16 403.887 li
388.123 404.182 li
388.008 404.393 li
388.008 404.541 li
388.336 404.889 li
388.152 405.055 li
388.443 405.301 li
388.661 405.426 li
388.828 405.385 li
388.859 405.174 li
388.719 405.031 li
388.554 404.9 li
388.488 404.723 li
388.756 404.121 li
388.807 403.727 li
388.568 403.549 li
388.271 403.406 li
388.271 403.08 li
388.488 402.48 li
388.313 402.262 li
387.973 402.033 li
387.725 401.766 li
387.828 401.41 li
388.523 402.059 li
388.779 402.455 li
388.828 403.066 li
388.561 402.959 li
388.488 402.9 li
388.588 403.148 li
388.901 403.486 li
388.975 403.639 li
389.031 405.377 li
388.996 405.617 li
388.828 405.883 li
388.596 406.02 li
388.306 406.131 li
388.072 406.328 li
388.008 406.709 li
388.152 406.709 li
388.291 406.523 li
388.48 406.389 li
388.828 406.215 li
388.836 406.414 li
388.975 406.875 li
389.25 406.736 li
389.425 406.527 li
389.643 406.049 li
389.73 406.367 li
389.715 406.5 li
389.643 406.709 li
389.795 406.709 li
390.173 406.451 li
390.682 406.49 li
391.154 406.727 li
391.465 407.057 li
391.609 407.057 li
391.609 406.709 li
391.793 406.781 li
392.068 406.816 li
392.323 406.816 li
392.431 406.791 li
392.904 407.287 li
393.02 407.373 li
393.145 407.443 li
393.297 407.615 li
393.412 407.836 li
393.428 408.049 li
393.297 408.201 li
393.086 408.256 li
392.889 408.328 li
392.773 408.547 li
393.396 408.635 li
394.32 409.182 li
394.741 409.193 li
395.33 408.291 li
396.035 407.641 li
396.23 407.373 li
396.493 407.451 li
397.444 407.146 li
398.519 407.012 li
398.954 406.893 li
400.48 406.205 li
400.943 405.932 li
401.148 405.627 li
401.271 405.367 li
401.897 404.736 li
402.143 404.541 li
403.124 404.002 li
403.678 403.807 li
404.2 403.73 li
405.768 402.9 li
406.653 402.602 li
406.981 402.42 li
407.982 401.58 li
409.387 400.984 li
409.77 400.908 li
410.277 400.883 li
410.686 400.939 li
411.747 401.252 li
412.008 401.41 li
412.168 401.41 li
413.062 399.627 li
413.242 398.629 li
413.584 397.943 li
413.664 397.65 li
413.787 397.316 li
414.348 396.732 li
414.479 396.49 li
414.769 396.1 li
415.451 395.865 li
418.423 395.281 li
419.061 395.484 li
419.264 396.227 li
419.409 396.227 li
419.779 395.461 li
420.012 395.287 li
420.493 395.232 li
420.608 394.988 li
420.921 393.873 li
421.066 393.559 li
421.238 393.473 li
421.646 393.451 li
421.902 393.406 li
422.751 392.977 li
422.941 392.908 li
423.549 392.818 li
423.774 392.555 li
424.016 391.566 li
424.225 391.176 li
424.553 390.738 li
424.959 390.385 li
425.643 390.164 li
425.932 389.832 li
426.07 389.756 li
426.979 389.756 li
427.241 389.693 li
427.727 389.48 li
427.96 389.424 li
428.272 389.463 li
428.781 389.699 li
429.025 389.756 li
429.434 389.756 li
429.717 389.697 li
429.928 389.5 li
430.109 389.078 li
430.4 387.846 li
430.604 387.402 li
430.813 387.1 li
431.126 386.803 li
431.925 386.238 li
432.332 386.07 li
432.761 385.99 li
433.189 385.994 li
433.566 386.076 li
434.613 386.545 li
435.049 386.572 li
435.404 386.459 li
435.747 386.242 li
436.35 385.758 li
436.648 385.459 li
436.756 385.174 li
436.676 384.232 li
436.894 382.58 li
436.886 381.529 li
436.516 380.91 li
436.676 380.924 li
437.184 380.91 li
437.031 380.504 li
437.046 380.148 li
437.134 379.816 li
437.184 379.48 li
437.012 379.332 li
436.732 379.025 li
436.698 378.719 li
437.256 378.58 li
437.374 378.756 li
437.547 379.602 li
437.824 379.912 li
438.275 380.012 li
438.673 379.98 li
439.021 380 li
439.314 380.246 li
439.479 380.246 li
439.77 379.857 li
439.91 379.592 li
439.975 379.316 li
440.063 379.117 li
440.498 378.746 li
440.643 378.58 li
440.729 378.221 li
440.743 377.979 li
440.801 377.766 li
441.23 377.236 li
441.441 376.742 li
441.609 376.557 li
441.789 376.738 li
442.045 376.215 li
441.099 375.025 li
441.129 374.396 li
440.838 373.979 li
440.873 373.645 li
441.033 373.338 li
441.129 372.988 li
440.969 372.957 li
440.598 373.355 li
440.25 373.84 li
440.133 374.063 li
439.371 373.916 li
439.234 373.1 li
439.502 372.307 li
439.975 372.232 li
440.578 371.682 li
440.983 371.039 li
441.209 370.344 li
441.281 369.637 li
441.15 369.246 li
440.59 368.73 li
440.461 368.48 li
440.59 367.797 li
440.548 367.707 li
440.438 367.613 li
440.133 367.041 li
440.453 366.615 li
440.678 366.904 li
440.91 367.947 li
441.457 369.387 li
441.281 369.387 li
441.557 370.221 li
441.412 371.996 li
441.609 372.73 li
441.689 372.68 li
441.861 372.617 li
441.949 372.566 li
442.152 372.871 li
442.488 373.047 li
442.879 373.068 li
443.279 372.912 li
443.279 372.73 li
442.951 372.604 li
442.713 372.332 li
442.588 371.971 li
442.604 371.566 li
443.019 371.232 li
443.011 371.15 li
443.096 370.721 li
443.096 370.568 li
442.415 370.098 li
442.197 369.836 li
441.506 368.539 li
441.339 368.113 li
441.252 367.1 li
441.281 366.891 li
441.557 366.627 li
441.652 366.41 li
441.537 366.125 li
441.354 365.906 li
441.318 365.807 li
441.324 365.725 li
441.281 365.557 li
441.244 365.236 li
441.113 365.049 li
440.788 364.877 li
440.795 364.891 li
440.643 365.043 li
440.729 364.756 li
440.977 364.701 li
441.609 364.877 li
441.434 364.615 li
441.23 364.365 li
441.129 364.082 li
441.281 363.711 li
440.809 363.422 li
440.59 363.24 li
440.461 363.029 li
440.59 363.125 li
441.129 363.361 li
441.361 362.703 li
441.457 362.543 li
441.609 362.543 li
441.893 362.674 li
442.021 362.539 li
442.021 362.324 li
441.717 362.121 li
441.521 361.904 li
441.346 361.652 li
441.281 361.445 li
441.259 360.914 li
441.174 360.328 li
440.926 359.947 li
440.461 360.027 li
440.301 359.76 li
439.922 359.357 li
439.807 359.027 li
439.975 359.027 li
440.047 359.088 li
440.293 359.195 li
440.22 359.086 li
440.09 358.822 li
439.975 358.68 li
440.65 358.574 li
441.384 359.031 li
442.43 360.195 li
442.748 360.801 li
442.988 361.09 li
443.352 361.209 li
443.635 360.99 li
443.787 360.58 li
443.955 360.355 li
444.245 360.693 li
444.428 360.529 li
444.245 360.361 li
444.52 360.104 li
444.287 359.766 li
443.859 359.471 li
443.512 359.346 li
443.374 359.262 li
443.279 359.059 li
443.256 358.814 li
443.504 358.314 li
443.374 358.109 li
442.197 357.34 li
441.907 357.027 li
441.789 356.588 li
441.92 356.217 li
442.145 355.813 li
442.189 355.48 li
441.789 355.344 li
441.789 355.525 li
441.949 355.525 li
441.949 355.678 li
441.682 355.75 li
441.579 355.979 li
441.541 356.262 li
441.457 356.512 li
441.281 356.512 li
441.297 356.396 li
441.259 356.369 li
441.201 356.369 li
441.129 356.344 li
441.129 356.113 li
441.049 355.717 li
441.025 355.344 li
441.209 355.178 li
441.121 354.227 li
441.129 353.992 li
441.819 353 li
442.021 352.84 li
442.343 352.705 li
442.676 352.383 li
443.279 351.656 li
443.512 351.439 li
444.332 350.898 li
444.447 350.711 li
444.478 350.518 li
444.558 350.367 li
444.826 350.307 li
444.921 350.412 li
444.921 351.156 li
445.066 351.455 li
445.486 352.01 li
445.566 352.4 li
445.467 352.623 li
445.241 352.76 li
445.016 352.846 li
444.921 352.914 li
444.855 353.041 li
444.428 353.658 li
444.719 353.66 li
444.943 353.754 li
445.102 353.93 li
445.241 354.176 li
445.334 353.959 li
445.371 353.75 li
445.334 353.543 li
445.241 353.324 li
445.509 353.371 li
445.719 353.344 li
445.857 353.223 li
445.902 352.992 li
446.388 353.84 li
446.388 353.992 li
445.975 354.377 li
445.902 354.426 li
445.938 354.689 li
446.024 354.809 li
446.135 354.879 li
446.228 354.992 li
446.533 355.719 li
446.781 355.994 li
447.049 355.844 li
447.07 355.537 li
446.984 354.539 li
447.049 354.176 li
447.186 354.051 li
447.354 354.008 li
447.492 353.941 li
447.557 353.75 li
447.484 353.654 li
cp
316.439 407.553 mo
316.618 407.721 li
316.318 407.436 li
316.039 407.457 li
315.805 407.645 li
315.636 407.871 li
315.556 408.104 li
315.52 408.381 li
315.439 408.613 li
315.224 408.711 li
315.123 408.791 li
314.866 409.168 li
314.813 409.283 li
314.611 409.488 li
314.145 409.514 li
312.632 409.297 li
312.507 409.367 li
312.592 409.629 li
312.784 410.59 li
313.09 410.9 li
314.01 411.359 li
314.693 411.918 li
315.175 412.701 li
315.811 414.52 li
316.138 416.559 li
316.457 417.627 li
316.945 417.84 li
317.038 417.959 li
317.437 418.172 li
317.354 417.75 li
317.263 417.488 li
317.255 417.197 li
317.437 416.682 li
317.007 416.039 li
317.325 414.705 li
318.255 412.352 li
318.255 409.789 li
318.176 409.373 li
316.439 407.553 li
cp
445.646 355.08 mo
445.574 354.793 li
445.398 354.543 li
445.059 354.445 li
444.513 354.365 li
443.896 354.441 li
443.691 354.773 li
443.962 354.969 li
444.26 355.043 li
444.405 355.215 li
444.543 355.412 li
445.422 356.027 li
445.814 356.152 li
445.93 355.838 li
445.837 355.545 li
445.646 355.08 li
cp
398.686 140.535 mo
398.656 140.751 li
398.591 140.77 li
398.41 140.56 li
398.258 140.561 li
398.133 141.34 li
397.915 142.061 li
397.873 142.354 li
397.67 142.862 li
397.326 143.499 li
397.162 144.068 li
397.537 144.38 li
398.357 143.681 li
398.656 143.51 li
399.236 143.286 li
399.507 143.141 li
400.313 142.021 li
400.793 141.501 li
401.148 141.583 li
401.337 141.583 li
401.584 141.201 li
402.375 140.653 li
402.65 140.346 li
402.762 140.029 li
402.688 139.983 li
402.143 140.169 li
401.314 140.409 li
401.148 140.505 li
400.996 140.505 li
400.908 140.391 li
400.859 140.271 li
400.828 140.117 li
400.821 139.911 li
400.771 139.688 li
400.641 139.618 li
400.48 139.585 li
400.328 139.472 li
399.76 138.767 li
399.521 138.57 li
399.42 138.519 li
399.316 138.495 li
399.232 138.501 li
399.145 138.54 li
399.049 138.647 li
398.991 138.804 li
398.926 139.116 li
398.889 139.771 li
398.911 140.168 li
399.014 140.346 li
398.797 140.392 li
398.686 140.535 li
cp
399.76 147.828 mo
400.152 147.73 li
400.496 147.536 li
400.741 147.219 li
400.901 146.845 li
401.148 145.95 li
401.52 145.039 li
401.607 144.704 li
401.459 144.616 li
401.322 144.699 li
400.996 145.077 li
400.996 144.554 li
400.748 145.023 li
400.684 145.251 li
400.428 145.148 li
400.328 145.077 li
400.03 145.81 li
399.95 146.203 li
400.016 146.489 li
399.595 146.954 li
399.041 147.379 li
398.389 147.755 li
397.689 148.059 li
397.689 148.217 li
398.098 148.161 li
399.18 147.884 li
399.76 147.828 li
cp
390.296 150.57 mo
390.791 150.688 li
390.631 150.594 li
390.498 150.471 li
390.391 150.325 li
390.303 150.149 li
390.135 150.149 li
389.91 150.182 li
389.527 150.089 li
389.242 149.899 li
389.314 149.627 li
389.314 149.454 li
389.069 149.236 li
388.756 149.11 li
388.508 149.201 li
388.488 149.627 li
388.336 149.627 li
388.08 149.378 li
387.332 149.271 li
387.012 148.93 li
387.188 148.74 li
386.961 148.907 li
386.926 149.094 li
386.934 149.283 li
386.846 149.454 li
386.679 149.56 li
386.113 149.759 li
386.048 150.227 li
386.316 150.585 li
387.012 151.023 li
387.305 151.339 li
387.855 152.097 li
388.336 152.432 li
388.336 152.258 li
388.264 152.167 li
388.152 151.894 li
388.336 151.894 li
388.416 152.004 li
388.568 152.139 li
388.646 152.258 li
388.828 152.258 li
388.828 152.067 li
388.975 152.067 li
389.031 152.144 li
389.031 152.176 li
389.055 152.199 li
389.156 152.258 li
389.156 152.432 li
388.646 152.432 li
388.646 152.591 li
388.714 152.65 li
388.828 152.78 li
388.975 152.591 li
388.975 152.78 li
389.069 152.698 li
389.135 152.655 li
389.314 152.591 li
389.314 153.144 li
389.535 152.698 li
389.643 152.258 li
389.795 152.258 li
389.795 152.432 li
389.971 152.432 li
389.825 151.983 li
389.097 151.563 li
388.975 151.023 li
389.215 151.212 li
389.425 151.314 li
389.657 151.313 li
389.971 151.197 li
389.971 151.023 li
389.811 150.9 li
389.715 150.745 li
389.707 150.559 li
389.795 150.342 li
390.006 150.803 li
390.181 150.972 li
390.463 151.023 li
390.326 150.841 li
390.253 150.772 li
390.135 150.688 li
390.135 150.5 li
390.296 150.57 li
cp
384.208 407.057 mo
384.086 407.09 li
384.051 407.123 li
384.013 407.123 li
383.883 407.057 li
384.188 406.914 li
384.479 406.975 li
384.797 407.113 li
385.189 407.207 li
385.189 407.057 li
384.941 406.563 li
384.754 406.398 li
384.368 406.381 li
384.368 406.215 li
384.957 406.174 li
385.132 405.879 li
385.037 405.545 li
384.789 405.385 li
384.696 405.301 li
384.426 404.91 li
384.368 404.807 li
384.418 404.531 li
384.528 404.367 li
384.703 404.211 li
384.703 403.861 li
384.559 403.486 li
384.254 403.189 li
383.6 403.006 li
383.467 402.857 li
383.242 402.5 li
383.031 402.295 li
382.807 402.219 li
382.256 402.225 li
382.901 403.229 li
383.076 403.789 li
382.895 404.393 li
382.741 404.494 li
382.336 404.557 li
382.256 404.633 li
382.328 405.02 li
382.386 405.191 li
382.421 405.205 li
382.32 405.869 li
382.328 406.16 li
382.421 406.545 li
382.706 407.113 li
383.215 407.771 li
383.803 408.316 li
384.368 408.547 li
384.818 408.352 li
384.834 407.9 li
384.578 407.395 li
384.208 407.057 li
cp
396.776 149.945 mo
396.486 149.61 li
396.391 149.609 li
396.413 149.969 li
396.608 150.417 li
396.863 150.545 li
397.052 150.512 li
397.204 150.595 li
397.326 150.759 li
397.406 150.714 li
397.43 150.367 li
397.357 150.214 li
397.074 150.034 li
396.776 149.945 li
cp
397.56 148.973 mo
397.56 148.864 li
397.633 148.79 li
397.686 148.69 li
397.617 148.535 li
397.379 148.452 li
396.986 148.437 li
396.73 148.472 li
396.631 148.502 li
396.506 148.443 li
396.341 148.387 li
396.215 148.442 li
396.188 148.567 li
396.253 148.73 li
396.375 148.771 li
396.448 148.721 li
396.703 149.043 li
396.869 149.172 li
397.029 149.205 li
397.189 149.181 li
397.51 149.037 li
397.56 148.973 li
cp
408.063 145.865 mo
408.471 145.285 li
408.666 145.078 li
408.754 144.738 li
408.413 144.676 li
408.02 144.949 li
407.803 145.437 li
407.832 145.887 li
408.063 145.865 li
cp
434.83 404.986 mo
434.518 405.16 li
434.43 405.514 li
434.533 405.895 li
434.781 406.145 li
435.273 406.176 li
435.404 405.818 li
435.231 405.336 li
434.83 404.986 li
cp
444.428 364.574 mo
444.283 364.457 li
444.092 364.377 li
443.206 364.205 li
442.771 364.027 li
442.764 364.293 li
442.771 364.377 li
442.604 364.324 li
442.263 364.26 li
442.102 364.209 li
442.102 364.377 li
442.328 364.625 li
442.676 364.928 li
443.119 365.164 li
443.592 365.209 li
443.547 365.104 li
443.526 365.09 li
443.496 365.094 li
443.424 365.043 li
443.635 364.951 li
443.81 364.957 li
443.962 365.049 li
444.092 365.209 li
444.215 365.148 li
444.478 364.969 li
444.586 364.877 li
444.527 364.715 li
444.428 364.574 li
cp
412.168 135.258 mo
409.059 135.609 li
408.855 135.709 li
408.055 135.958 li
408.055 136.117 li
408.658 135.987 li
409.162 136.016 li
408.979 136.121 li
408.834 136.275 li
408.73 136.484 li
408.695 136.375 li
408.566 136.117 li
408.463 136.41 li
408.406 136.674 li
408.711 136.626 li
410.351 136.054 li
410.533 135.958 li
410.686 135.958 li
410.873 136.171 li
411.239 136.026 li
412.168 135.417 li
412.168 135.258 li
cp
407.817 136.674 mo
407.875 136.63 li
407.845 136.533 li
407.779 136.427 li
407.737 136.369 li
407.417 136.318 li
407.031 136.474 li
405.629 137.315 li
405.354 137.658 li
405.289 137.724 li
407.635 136.708 li
407.817 136.674 li
cp
402.361 145.383 mo
402.514 144.592 li
403.379 142.729 li
403.387 142.554 li
403.291 142.52 li
403.124 142.625 li
402.559 143.188 li
402.471 143.314 li
402.398 143.501 li
402.348 143.719 li
402.311 144.291 li
402.23 144.578 li
401.891 144.91 li
401.817 145.165 li
401.859 145.466 li
401.926 145.691 li
401.891 145.849 li
401.635 145.95 li
402.123 146.023 li
402.361 145.383 li
cp
406.988 145.852 mo
407.242 145.95 li
407.242 145.792 li
406.408 145.168 li
406.096 145.077 li
405.912 145.511 li
406.053 145.744 li
406.291 145.883 li
406.424 146.036 li
406.386 146.332 li
405.928 147.188 li
406.355 146.98 li
406.713 146.684 li
406.879 146.292 li
406.764 145.792 li
406.908 145.792 li
406.988 145.852 li
cp
401.295 147.66 mo
401.49 147.229 li
401.635 146.647 li
401.6 146.46 li
401.563 146.38 li
401.49 146.298 li
401.402 146.714 li
400.821 147.884 li
400.596 148.259 li
400.344 148.468 li
400.008 148.561 li
399.507 148.583 li
399.507 148.74 li
399.775 149.033 li
399.732 149.436 li
399.34 150.342 li
399.668 150.33 li
399.84 150.145 li
400.016 149.627 li
400.16 149.343 li
401.295 147.66 li
cp
383.883 148.74 mo
383.947 149.333 li
384.434 150.354 li
384.551 150.769 li
384.762 150.884 li
385.174 150.968 li
385.479 150.798 li
385.372 150.149 li
384.498 149.014 li
384.368 148.661 li
384.268 148.087 li
383.998 147.76 li
383.062 147.361 li
382.779 148.021 li
382.581 148.74 li
382.706 149.206 li
383.017 149.362 li
383.395 149.431 li
383.7 149.627 li
383.883 149.627 li
383.758 149.41 li
383.715 149.186 li
383.752 148.963 li
383.883 148.74 li
cp
375.878 420.717 mo
374.839 419.99 li
374.453 419.91 li
374.345 419.84 li
374.345 419.99 li
375.449 421.02 li
376.132 421.383 li
376.713 422.291 li
377.063 422.498 li
377.265 422.283 li
376.953 421.803 li
376.16 420.996 li
375.878 420.717 li
cp
380.191 448.256 mo
380.111 448.205 li
380.01 448.17 li
379.342 448.461 li
378.558 448.996 li
377.912 449.637 li
377.635 450.219 li
377.715 450.363 li
378.086 450.859 li
378.209 450.959 li
378.586 450.93 li
378.682 450.85 li
378.638 450.742 li
378.623 450.633 li
378.63 450.414 li
378.616 450.146 li
378.666 449.908 li
378.87 449.803 li
379.153 449.768 li
379.394 449.703 li
379.641 449.688 li
379.945 449.803 li
379.801 449.492 li
379.561 449.143 li
379.546 448.875 li
380.111 448.816 li
380.09 448.707 li
380.068 448.637 li
379.945 448.49 li
380.191 448.504 li
380.257 448.49 li
380.243 448.336 li
380.191 448.256 li
cp
392.939 407.871 mo
393.026 407.945 li
393.079 407.971 li
393.145 407.99 li
393.281 408.049 li
393.072 407.748 li
392.338 407.105 li
392.148 407.279 li
392.033 407.564 li
391.975 407.875 li
391.961 408.127 li
391.8 408.271 li
391.086 408.637 li
390.107 408.887 li
389.975 409.338 li
390.303 410.533 li
390.623 410.244 li
391.124 409.498 li
391.465 409.193 li
391.968 409.021 li
392.193 408.887 li
392.365 408.402 li
392.541 408.299 li
392.717 408.172 li
392.773 407.871 li
392.939 407.871 li
cp
387.201 408.049 mo
386.679 407.721 li
386.519 408.049 li
386.338 408.049 li
386.854 406.814 li
386.961 406.076 li
386.469 405.732 li
385.975 405.9 li
385.525 406.127 li
385.313 406.488 li
385.518 407.057 li
385.518 406.709 li
385.697 406.709 li
385.625 407.088 li
385.254 407.607 li
385.189 408.049 li
385.262 408.322 li
385.407 408.6 li
385.518 408.932 li
385.518 409.373 li
385.697 409.373 li
386.018 409.043 li
386.49 408.826 li
387.668 408.547 li
387.463 408.275 li
387.201 408.049 li
cp
384.979 404.311 mo
384.754 404.504 li
384.703 404.723 li
384.754 404.75 li
384.986 405.131 li
385.029 405.205 li
385.227 405.395 li
385.567 405.629 li
385.888 405.717 li
386.025 405.461 li
385.975 405.137 li
385.763 404.693 li
385.697 404.393 li
385.865 404.393 li
386.068 404.887 li
386.213 405.123 li
386.338 405.205 li
386.519 405.057 li
386.504 404.832 li
386.396 404.568 li
386.338 404.301 li
386.381 404.219 li
386.461 404.158 li
386.525 404.061 li
386.519 403.881 li
386.453 403.836 li
386.346 403.789 li
386.236 403.73 li
386.121 403.527 li
385.561 403.16 li
385.525 402.984 li
385.277 402.957 li
384.964 402.998 li
384.703 403.066 li
384.703 403.217 li
385.037 403.406 li
385.117 403.635 li
385.029 404.137 li
384.979 404.311 li
cp
382.131 411.986 mo
381.588 411.855 li
381.079 411.688 li
378.318 411.656 li
377.672 411.51 li
376.857 411.164 li
376.494 411.195 li
377.635 411.691 li
380.767 412.266 li
381.236 412.461 li
381.435 412.768 li
381.588 412.877 li
381.928 412.813 li
382.271 412.645 li
382.421 412.443 li
382.336 412.123 li
382.131 411.986 li
cp
369.572 427.836 mo
369.268 427.537 li
369.094 427.266 li
367.938 426.133 li
366.775 424.48 li
366.586 424.35 li
366.508 424.275 li
366.449 424.15 li
366.304 424.301 li
366.819 424.977 li
367.029 425.357 li
367.125 425.889 li
367.233 426.291 li
367.502 426.729 li
368.105 427.455 li
368.926 428.732 li
369.174 428.941 li
369.645 428.885 li
369.521 428.711 li
369.122 428.396 li
368.759 427.951 li
368.94 427.801 li
369.311 428.051 li
369.826 428.492 li
370.182 429.008 li
370.065 429.465 li
370.065 429.617 li
370.691 429.625 li
371.031 429.4 li
371.185 428.979 li
371.221 428.369 li
370.909 428.146 li
369.572 427.836 li
cp
444.631 330.369 mo
444.703 330.406 li
444.791 330.398 li
444.898 330.48 li
444.948 330.43 li
444.891 330.234 li
444.783 330.156 li
444.572 329.887 li
444.433 329.848 li
444.492 330.109 li
444.631 330.369 li
cp
439.043 287.018 mo
439.326 286.994 li
439.539 286.9 li
439.654 286.814 li
439.559 286.646 li
439.307 286.533 li
438.994 286.521 li
438.711 286.543 li
438.543 286.691 li
438.527 286.801 li
438.719 286.924 li
439.043 287.018 li
cp
424.168 272.514 mo
424.336 272.525 li
424.458 272.645 li
424.465 272.791 li
424.503 272.854 li
424.938 273.166 li
425.076 273.361 li
425.164 273.396 li
425.191 273.279 li
425.191 272.818 li
425.119 272.58 li
424.393 272.027 li
424.225 272.049 li
423.957 272.246 li
423.907 272.32 li
424.008 272.449 li
424.168 272.514 li
cp
362.555 186.716 mo
362.469 186.766 li
362.366 186.778 li
362.279 186.87 li
362.286 187.053 li
362.389 187.203 li
362.482 187.304 li
362.627 187.268 li
362.73 187.126 li
362.78 186.986 li
362.752 186.843 li
362.643 186.729 li
362.555 186.716 li
cp
405.645 167.788 mo
405.725 167.864 li
405.848 167.905 li
405.942 167.911 li
406 167.826 li
406.064 167.667 li
406.08 167.515 li
405.942 167.543 li
405.755 167.664 li
405.645 167.788 li
cp
391.728 151.645 mo
391.647 151.575 li
391.51 151.681 li
391.43 151.836 li
391.342 151.934 li
391.307 152.018 li
391.372 152.147 li
391.479 152.274 li
391.605 152.274 li
391.713 152.214 li
391.697 152.149 li
391.67 152.078 li
391.689 151.925 li
391.728 151.645 li
cp
391.066 151.125 mo
391.219 151.485 li
391.284 151.501 li
391.399 151.4 li
391.385 151.337 li
391.364 151.296 li
391.43 151.213 li
391.399 151.168 li
391.407 151.136 li
391.51 151.103 li
391.525 151.059 li
391.494 150.894 li
391.393 150.803 li
391.342 150.787 li
391.342 150.645 li
391.284 150.569 li
391.234 150.614 li
391.197 150.672 li
391.139 150.614 li
391.037 150.557 li
390.986 150.587 li
391.002 150.68 li
391.044 150.757 li
391.059 150.86 li
391.037 151.003 li
391.066 151.125 li
cp
397.922 150.61 mo
397.842 150.796 li
397.835 150.983 li
397.88 151.262 li
397.93 151.333 li
398.003 151.39 li
398.075 151.502 li
398.125 151.507 li
398.193 151.383 li
398.25 151.279 li
398.285 151.116 li
398.205 150.785 li
398.048 150.545 li
397.922 150.61 li
cp
382.568 150.061 mo
382.916 150.41 li
383.069 150.512 li
383.265 150.545 li
383.555 150.495 li
383.745 150.333 li
383.686 150.226 li
383.577 150.25 li
383.395 150.258 li
383.09 150.087 li
382.574 149.522 li
382.466 149.634 li
382.488 149.887 li
382.568 150.061 li
cp
390.906 149.91 mo
390.776 149.783 li
390.724 149.645 li
390.639 149.542 li
390.631 149.471 li
390.674 149.345 li
390.631 149.256 li
390.543 149.286 li
390.471 149.339 li
390.406 149.417 li
390.361 149.508 li
390.288 149.545 li
390.246 149.615 li
390.273 149.72 li
390.354 149.787 li
390.426 149.778 li
390.528 149.726 li
390.746 149.998 li
390.892 150.009 li
390.906 149.91 li
cp
392.881 148.552 mo
392.766 148.6 li
392.721 148.663 li
392.999 148.887 li
393.057 148.894 li
393.129 148.948 li
393.172 149.037 li
393.232 149.036 li
393.281 148.87 li
393.232 148.765 li
392.984 148.589 li
392.881 148.552 li
cp
396.578 147.523 mo
396.703 147.512 li
396.994 147.396 li
397.479 146.927 li
397.553 146.7 li
397.553 146.627 li
397.494 146.585 li
397.422 146.643 li
397.372 146.783 li
397.326 146.798 li
397.313 146.707 li
397.219 146.724 li
396.937 147.044 li
396.73 147.078 li
396.623 147.122 li
396.535 147.268 li
396.514 147.226 li
396.333 147.034 li
396.208 147.045 li
396.013 147.112 li
395.772 147.125 li
395.825 147.267 li
396.027 147.401 li
396.578 147.523 li
cp
398.476 147.495 mo
398.591 147.423 li
398.861 147.089 li
399.092 146.611 li
398.941 146.506 li
398.729 146.672 li
398.57 146.86 li
398.41 146.97 li
398.351 147.062 li
398.277 147.327 li
398.125 147.572 li
397.938 147.683 li
397.146 147.912 li
396.608 148.024 li
396.666 148.109 li
397.35 148.065 li
398.277 147.7 li
398.476 147.495 li
cp
389.104 146.932 mo
389.455 146.804 li
389.68 146.66 li
389.665 146.565 li
389.585 146.458 li
389.417 146.187 li
389.234 146.146 li
389.111 146.191 li
389.076 146.241 li
388.939 146.246 li
388.646 146.76 li
388.734 146.858 li
388.909 146.917 li
389.104 146.932 li
cp
381.225 146.285 mo
381.049 146.189 li
380.961 146.059 li
380.809 145.967 li
380.672 146.053 li
380.644 146.25 li
380.824 146.594 li
381.041 146.741 li
381.31 146.804 li
381.652 146.779 li
381.912 146.859 li
382.428 146.944 li
382.539 146.798 li
382.561 146.623 li
382.554 146.509 li
382.516 146.383 li
382.416 146.337 li
382.371 146.282 li
382.4 146.276 li
382.516 146.289 li
382.496 146.125 li
382.275 145.874 li
382.059 145.714 li
381.928 145.687 li
381.783 145.769 li
381.668 145.917 li
381.66 146.085 li
381.783 146.294 li
381.63 146.391 li
381.225 146.285 li
cp
401.685 143.558 mo
401.779 143.482 li
401.933 143.438 li
402.135 142.973 li
402.166 142.761 li
402.15 142.583 li
402.02 142.589 li
401.803 142.728 li
401.715 142.731 li
401.657 142.681 li
401.577 142.638 li
401.467 142.681 li
401.295 143.037 li
401.169 143.151 li
401.097 143.268 li
401.084 143.345 li
400.959 143.452 li
400.916 143.52 li
400.924 143.625 li
401.119 143.759 li
401.097 143.838 li
401.023 143.9 li
400.996 143.888 li
400.988 143.807 li
400.916 143.783 li
400.713 144.082 li
400.539 144.236 li
400.336 144.351 li
400.117 144.592 li
400.197 144.63 li
400.363 144.591 li
400.508 144.47 li
400.619 144.434 li
401.023 144.258 li
401.047 144.134 li
401.417 143.849 li
401.672 143.721 li
401.685 143.558 li
cp
404.266 140.538 mo
403.968 141.804 li
403.988 142.024 li
404.12 141.876 li
404.511 140.292 li
404.498 140.196 li
404.365 140.321 li
404.266 140.538 li
cp
411.441 139.34 mo
411.1 139.461 li
411.079 139.614 li
411.273 139.735 li
411.549 139.763 li
411.702 139.72 li
411.768 139.566 li
411.732 139.394 li
411.587 139.326 li
411.441 139.34 li
cp
403.537 139.128 mo
403.518 139.045 li
403.502 138.974 li
402.682 139.389 li
402.57 139.507 li
402.856 139.63 li
402.957 139.63 li
403.51 139.214 li
403.537 139.128 li
cp
401.199 138.963 mo
401.337 139.029 li
401.52 139.007 li
401.65 139.138 li
401.795 139.063 li
402.1 139.029 li
402.223 138.976 li
402.295 138.9 li
402.188 138.736 li
401.933 138.601 li
401.57 138.626 li
401.249 138.794 li
401.199 138.963 li
cp
405.006 137.997 mo
404.869 137.994 li
404.424 138.235 li
404.025 138.728 li
404.033 138.764 li
404.984 138.125 li
405.006 137.997 li
cp
399.564 152.483 mo
399.572 152.365 li
399.492 152.288 li
399.42 152.419 li
399.313 152.499 li
399.313 152.58 li
399.057 152.881 li
399.385 152.73 li
399.564 152.483 li
cp
399.76 151.479 mo
399.732 151.571 li
399.607 151.666 li
399.755 151.832 li
399.978 151.65 li
400.058 151.291 li
399.985 151.357 li
399.76 151.479 li
cp
394.859 149.748 mo
394.786 149.766 li
394.719 149.867 li
394.748 149.89 li
394.866 149.838 li
395.047 149.792 li
395.089 149.7 li
395.257 149.705 li
395.375 149.574 li
395.25 149.519 li
395.148 149.479 li
395.135 149.357 li
395.148 149.301 li
395.068 149.286 li
394.967 149.41 li
395.031 149.51 li
394.871 149.588 li
394.714 149.629 li
394.699 149.692 li
394.799 149.692 li
394.908 149.637 li
394.866 149.683 li
394.859 149.748 li
cp
385.85 149.486 mo
385.822 149.317 li
385.801 149.057 li
385.59 148.833 li
385.609 149.014 li
385.625 149.081 li
385.525 149.036 li
385.529 149.128 li
385.525 149.199 li
385.452 149.254 li
385.494 149.307 li
385.502 149.341 li
385.342 149.346 li
385.342 149.495 li
385.721 149.669 li
385.742 149.661 li
385.683 149.523 li
385.721 149.479 li
385.85 149.486 li
cp
382.275 149.4 mo
382.546 149.479 li
382.568 149.479 li
382.459 149.231 li
382.271 148.878 li
382.118 148.808 li
381.973 148.779 li
381.775 148.611 li
381.668 148.738 li
381.603 148.789 li
381.595 148.843 li
381.652 148.84 li
381.652 148.936 li
381.74 148.998 li
381.82 149.019 li
381.878 149.083 li
382.008 149.125 li
382.131 149.128 li
382.168 149.107 li
382.16 149.191 li
382.275 149.4 li
cp
395.6 148.555 mo
395.772 148.721 li
395.978 148.903 li
395.73 148.412 li
395.462 148.134 li
395.287 147.973 li
395.236 148.017 li
395.395 148.267 li
395.6 148.555 li
cp
396.02 148.634 mo
395.939 148.347 li
395.859 148.056 li
395.752 147.854 li
395.672 147.919 li
395.619 148.012 li
395.665 148.007 li
395.745 148.336 li
395.978 148.603 li
396.02 148.634 li
cp
387.943 147.688 mo
387.973 147.711 li
388 147.695 li
388.059 147.538 li
388.118 147.398 li
388.118 147.202 li
387.973 147.202 li
387.645 147.343 li
387.752 147.56 li
387.84 147.61 li
387.943 147.688 li
cp
386.672 146.815 mo
386.563 147.148 li
386.954 147.33 li
387.107 147.143 li
386.672 146.815 li
cp
401.803 142.139 mo
401.707 142.223 li
401.635 142.331 li
401.607 142.447 li
401.707 142.583 li
401.772 142.603 li
402.15 142.283 li
402.195 142.074 li
402.035 142.118 li
401.904 142.146 li
401.803 142.139 li
cp
401.302 138.392 mo
401.142 138.329 li
400.981 138.289 li
400.924 138.392 li
400.793 138.561 li
400.967 138.836 li
401.148 138.77 li
401.309 138.646 li
401.482 138.54 li
401.555 138.387 li
401.382 138.4 li
401.302 138.392 li
cp
407.169 138.013 mo
406.943 138.041 li
406.807 138.058 li
406.698 138.063 li
406.416 138.148 li
406.283 138.331 li
406.363 138.392 li
406.428 138.392 li
406.733 138.186 li
406.932 138.137 li
407.236 138.137 li
407.314 138.093 li
407.169 138.013 li
cp
336.537 455.82 mo
336.42 455.824 li
336.13 456.176 li
335.934 456.4 li
336.144 456.604 li
336.42 456.459 li
336.392 456.232 li
336.544 456.1 li
336.537 455.82 li
cp
302.925 435.182 mo
303.14 435.414 li
303.155 435.814 li
303.613 435.67 li
303.792 435.43 li
304.062 435.174 li
303.788 435.064 li
302.925 435.182 li
cp
324.916 425.561 mo
324.754 425.598 li
324.717 425.863 li
324.633 426.379 li
324.941 426.676 li
324.941 426.479 li
324.946 426.283 li
324.881 425.908 li
324.916 425.561 li
cp
331.681 422.736 mo
331.547 422.67 li
331.28 422.813 li
331.07 422.992 li
330.908 423.18 li
330.817 423.232 li
330.987 423.311 li
331.211 423.32 li
331.325 423.301 li
331.577 423.426 li
331.894 423.303 li
332.06 422.969 li
331.878 422.805 li
331.681 422.736 li
cp
.494118 .411765 .411765 .0509804 cmyk
f
.694118 .631373 .619608 .584314 cmyk
%ADOBeginSubsetFont: Roboto-Light Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2013 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /Roboto-Light def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 4 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 46 /period put
dup 67 /C put
dup 70 /F put
dup 77 /M put
dup 86 /V put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 121 /y put
dup 169 /copyright put
def
/FontBBox {-474 -271 1146 1048} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
21 dict dup begin
/.notdef <1C60D8A8C9B879BEDE> |-
/space <1C60D8A8C9B879BEDE> |-
/period <1C60D8A8C9B87DE052DAF2DBC128D720E2595608> |-
/C <1C60D8A8C9B6747BB44E91F5A44E5C956708D717B186230360326090175A
105638B12D17F3AC56A3C73AFDAA1267720B3D2E06ADE5219664A5624677528A
D814928CC4455730E265C6EDB81AD8D69A18111B229AC6DD702EB8C791958844
5A2699E9C5CA6B8562FBBD77F404EFF3BD046C0E2BB5BE53544F682DB39E9A4F
A2F254961613514FF36508FBE9CC6D> |-
/F <1C60D8A8C9B794D334AF09011CC83D8A977AFE03EC1D2F2DE390B5D7B3EA
6F76B640B6A63A0C815E> |-
/M <1C60D8A8C9B69378631BE188059E53E4B0080F861F384715EC0BDFF820AF
00774B70B3BAE7AA1FD29A541423D92F990337D7ABCE6713FB412F7215> |-
/V <1C60D8A8C9B7D61BE5BD453F6CE069F883283535B8C041214E48F8AD05F6
7BCF0DB080E83A6DECB6240DA9> |-
/a <1C60D8A8C9B78181CF89FCCF642CFE9EA6860C048952730488D11972FFEE
454EAE8147B085ECC51C14F2897E6117DABCAB72FE1ED473CAD7F18C8494C8C1
EBD2F54783164370942B3FBFC1978D6849E7BBC91E8ADADEED9273932B7FF0AC
EC898A546F97A1B13DA54B5370218EA8788537DE9A067188DC72373D17CFBF8F
73C671DB956E1560A6369F5C55C4D3D5734D8578607E5E98913D41FDDA7382BB
88DCA9F5C6EF831843BFC1BDAE6363C6E97350D63CB9FDC98FF7D578907FC031
5822326454DF4E798DDB1EE58AB2> |-
/c <1C60D8A8C9B7B8EB2AF4F306B0D6054C19C1100BB8EF910A7C2387FADFBE
8BA460E0F8B2E67F3AEFEE1B757C6462BF91EE64FA2ED1578CFB5F7FC23D1A6A
2F2A2EC073233E551E5C08B968C9ED4BEB89AF03BC9A1E0A1C6EECF86B26B395
27E8BEC6482A6534E0230E984E8CBB58A89EBBDD4DF0B271BEFF724002F1659A
1DD1B63A6EC2BB6B743D3B695BE2> |-
/e <1C60D8A8C9B7B8EB25DC2A432E78D8DA98C5FEEB76418C2F5064D222355A
7086482E15C640DD4B7F96D1F43F6126435F8E587B207D9D65A9B7DB8063419B
40A41ED24A5A60C52C860B3E9A51095FF96BBAAA1615B5FFE93EE676EC26509C
F848CA40EC2A4CDB277A71453CE0687463F31333B7432E3D96EFEF982FAD1041
943512AA033006D3FB56ACEDF00C47C33ECA641BE647436052> |-
/g <1C60D8A8C9B7EE7C2DEFD0A56810F6CDACEEEF2661D4FF881B8E16C2C732
DA2729524484103FE172C569A096BCE4C6EE4DFAF6FC1CB07F12B09876A4FD8F
33BD222FAED433206AF10BDCA98DE9AF100E71C29D23281662946AAA4EA1A7F3
73D049155C858618A9A3F748FDF253610758CEE2EC115E62C84F96F2A37BFEC9
91ED94DB82E6F6BFFEB3A8A5B9A3F5E7EC0651FA6546116E4E6E0AEEEDE3A083
2AE07420BFFB7298EAC473DA0581187316A8D652B7F4D176A5881E1F0C7D702A
3DCCD7AAF60B11156EF890> |-
/h <1C60D8A8C9B7EE7C19EBED65F02B761F1813C716406D53F6EA9D29B36E4B
6B390233946C6E2CD668292FB8E6A433746CF9CCB6DEB193B97083EAED70B9D8
B47FD427314477CC033276DAFDFA829454390C4AF85EF429FC53A1> |-
/i <1C60D8A8C9B88997F3B61BAB998BFD8FBD37E68D323462A94E3AF8765121
3078> |-
/m <1C60D8A8C9B598EE57AEB6092C0E332C5F9B7408DF718656450BF4C04040
0E781C99815404E2F3CF07415B0F8E868BD72F13023D0294C2C77B3D8E5BE3AA
BF0E17DD8E0E3D5BDCA59C9AB9AC9E27669B204FB720F1C4021FC2185084767F
C423839651E331CB839F5237CD5586A3D8557ABF6DAC6E8E5F998CE3EBEF5DCB
F035E2A20BAE0099EEA78440029311DCCF2B1223A9581C07999F335779BE0F13
7D844AC50683A585E1> |-
/o <1C60D8A8C9B7EE7C596447C564123A2E2BD67D1934DBBF29AFAEAAE04814
BEF077BE3496F670F616A330629EA9C4677BBCA1C86B76B01830B2BDB3932F3A
916103FE53FAF170DEC8E0DAFE3DBC54A604A64A4ACBB42989FE66B5FB794440
662F252A670E5BF88802F0E866A771484384E2C1C1D66B2BE82BDF5B0525896D
2B3ED74412F9B5> |-
/p <1C60D8A8C9B7EE7C16066AEB31BC1D50A6012C82270105001EFEF0953BF7
0FA5E6D6D83D8E07C7420211D9F7F0A1DD198AE9D0AB70BD9441A811F2EE300E
78BBF1A11D737D4F80AE2B9CCAE0DCBD1C505ACF935A89BF6AA7808E109ED0F7
F5C88605060BB873A7D34149F8052782E193AF05F2BD1E1A86554C4CBD2A2FB4
52D2A90FC666DD567D828DC65C7BE16024059424> |-
/r <1C60D8A8C9B817A07448DA411068A6A5D634984EA5F4DDF4059DDFD27DDB
85BEC7E37A35C1F63BF3BBD58A537A4788380A704976A4955F50B98222F6AF57
7BEB65610B536F276AAAF8B3A6> |-
/s <1C60D8A8C9B7BEB14137006B992FAE68FE5C96301D8EDFA7AE3DA0CFA208
5E264538EF8D8D756FF879D9A35E10594E6943D640F22941A67079BCC7F6CBA8
7DBC1AEF51BA8C845F9FE7CB104CE4FF51A31278ACFB6F21FF5DB94975ED1348
3711DDBF9896E80332BAEB6DB3BDEEB53F9042AAF8D89E5274566A33092268CD
46067083DD8B5236D3995D079C162CC11A47734D96EC3852BCF927B436DFF2A7
D69CFD689322AD0D226558BE820A6AE99E73E1333BA8261FEB3A0069AFF42613
A230> |-
/t <1C60D8A8C9B8286E8459EA799CD6F16BCE45FB2AA24DC8BD95A27140F603
BC94D3B91D09A52066E565A99576D2D453A7D7AC28C85225E88B769EEC1146D0
B04CD852FC9DD43F10116E3E92361EFB151C1B431290FCAE5CA2BA0B35250C0C
C5DB794B9027> |-
/y <1C60D8A8C9B752AB6199BEE42C14215B0ABE7188848D65C43051962701F9
A6317C00A5A63FE4868A0782B6276A2426FAB3497953848B3B66F66A2681BE71
FC40E1AC93CE4CE2010739A26873116A847C1A8D47057B059A8DDFEF30A0B525
38F618E8BF77> |-
/copyright <1C60D8A8C9B6D24F7C03A9BBA01D6C0EBAF6168E7A2762D828F0
B616BABD1F873A4DFA8615677547CFA0EB8C8055162519E8489159447DAC04B6
94B3F0941CEFEFA5ACB093A8069032CF7B563D13957CE80F4BC27CCBE470E3F3
BCBE6C6285452D5D1882F5AD8878BE994CAFF0A0766274E4F400A566DB092C0D
D205F4AD83739D622C2EB7404E616364E4EC08CF594A5F0D5F0E643DBCEE6335
0125AD0D58CFD6BB4FCDEF64AB0CDA06B2EB0E7C470B0E781D966660787799AB
00D6E1E876943F764EB36FC8A3BF6333255E8D68592AFD0D34E2B5A384F59C67
A781090B654BDFC3546B527E7C3319D06211D7E829AA3AA4F5A470D0BCE44F57
C0D6CFEF21D2661E651E4477> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/RSXDHQ+Roboto-Light /Roboto-Light findfont ct_VMDictPut
/RSXDHQ+Roboto-Light*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period 20{/.notdef}rp /C 2{/.notdef}rp /F 
6{/.notdef}rp /M 8{/.notdef}rp /V 10{/.notdef}rp /a /.notdef /c 
/.notdef /e /.notdef /g /h /i 3{/.notdef}rp /m 
/.notdef /o /p /.notdef /r /s /t 4{/.notdef}rp 
/y 47{/.notdef}rp /copyright 86{/.notdef}rp]
RSXDHQ+Roboto-Light nf
RSXDHQ+Roboto-Light*1 [8 0 0 -8 0 0 ]msf
584.112 527.832 mo
(Copyright \251 Free Vector Maps.com)
[5.20898 4.5332 4.49023 3.99365 2.81055 1.89648 4.5332 4.5332 2.6543 2.0249 6.47461 2.02539 
4.38477 2.73633 4.19727 4.19678 2.02539 4.81445 4.19727 4.19727 2.6543 4.53271 2.81055 2.02539 
6.97852 4.38086 4.5332 4.1543 1.98975 4.19727 4.5332 0 ]xsh
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/RSXDHQ+Roboto-Light*1 uf
/RSXDHQ+Roboto-Light uf
/Roboto-Light uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 9.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Ted) ()
%%Title: (VN-EPS-01-0001.eps)
%%CreationDate: 7/11/2013 2:41 AM
%AI9_DataStream
%Gb"-6Bm1LVOp1]qcftHpQT*U'U]`FRAD/M;eE0K6CeNVd8tmTb'If5FFaH<bhu7R>&3qSM\Rt!;1M>!T[;GIIq\"\j6j0Z"?QPdI
%p3M@Djl*uC[PIlTdojj.fg#LVrVE;GX7#bW"KTGrPG@PRnmXH2m>f4;_u=U3^=uieeJY`cFUn=&S_![U^H_WtCUr?UrDCnI4rd7D
%g/l1_iFFpWd5s=Xe:6=93Blm*\pM2[bVsWg1@gF7gH,%f)0[I1p>0bdqmG>[X4u65gQ,'%c0H-&HZgm`jO`qk@+72#r"[Xk/Tk)T
%lJLVHh_CbKqK2PdjZW&+:WASqB/1H\!maHJ4$N:(UO@RP=[.rX3uE6M7S/S+)8<belb.akI5j:Q9Nl&"_42J=HL)U6-NKb@rck[%
%5M>A:nDiE^UW/AZ(\a3/Ciq*=?\]^^lLN*(pJ:+]l)/pc'ijBdDVht1a;'-E9Nh3&<Mh7H=u.7-FUrfJj5+bEq%a>."2mpfl5k0E
%#@Eb"`W%lLd9H#+G>@uJDJLc!nfK6g>!*doa$@Y/bPJ'5keA\Ha59i6!VpY/iVt@[kth)U>C!:-H="6d73.g1fW8'is0E1Qe>We*
%bYTN=_V<nAj*kXhV&b`RCu/g5Q2eJi=d&WLUL^7k:"6U_/c>u?Vu>-DX4R=%h:A?=B<OB(e(u-?[X.u4V`4!.^opN0h9kOS&)2aF
%Wd*Ts%JRG^T%B'P^#-Y"f11Jm%OnhJUP%t;>H*+(J\Tqh1\pG6ajET@<u9UQ&!^rPG6cm?2q63bZD^r<=gcUdV6t*lh"_OM'kNF*
%94]SRL]#46bKWoTobW'WDN9#J]tmugReur#eD!Vhe`g,VIo5h#bM&R\re+>K5#3N]JW,60?WWhqP-Sp'fbS=.)sj[8O"g@]*nQbW
%Jfa]HclX<^?dfhfbnkA?r6Kk?r9$<8C>n?tE7,d(')UKcAJ[H\q5`gOTj1\])%Be"cY=nP3ofYF^7V"RJC2%N`]TgY*KPQ]qLuW.
%_*N8Zrpd`Vm.NntAaK0's'@\QN[BP!PAt6>\$39p)%?fY#:I2KQ/1os:DPk?>,j8]2?7)*I3*r_`[WF:I,U]@:-:R?kRR;Ij26T=
%&cFNMp%Q$*IV\CpO#eL]_&(*iQ#c"qG@>DLl$L"hCFN16]\i$t8&!%(f#%47P9.JiMhTuNdAT.ZrT1fHKq6W\7sD2dn]P.iE^A,,
%ljf)+Kec/Fqq\%(TJuAnSR1gGhqRPj#K+[#iNM:ZmU0HkFN8%L><(p7U02qIr?Ns7HOB+\Sr=I4ru-nnr1N_;UP6hKW8!<h3kHc'
%m_[A.-R&9e@=,V8ri%_M.sq5Da-SV&U`@*78"K2<8Y90cQMC"58S@,Ui8\7D^X%$*E84?V?>.f6n3saq`cc2WgH<4;f_[QfYg?]\
%=:%](=JP3jCR!M=Z<#/_(@s]O<0+SIa0dabA"'gIiPKZ9ckj%1))aLmAhCnI[qRY\47[L)GMN5+YW;,]9tZc%^#mPBCRJPM>jqL/
%mDIo(YEl=UXp0?SN>FW\EC]lSWTEPeeX]f5LPDSQ?.bG$k]6ALQekH)I8SgfYK*VgS>oYkU)2:#rGW1T_BC9K8t1RC%)\/Pk1f5#
%eH<U>EPbjS\>GHZHVS%A?i9MK#32&cs89q2)A>L0jQlNle,Ht]kC+S.j+%E[g0f+10&UX5CRkd#ieTcN1k&_D,\;;:rSaAJWi'E+
%Anua8dbXnFg^Osc.fAR9nA5_5KQbf8A,<>*qP&K!Isa3oSfBs9ljs-lNu;D)=t_q#6dOS6W\M6<$5e80E>FUQo_oJB^=,0XF\.^"
%^Q*JlrSI;t(0F)dkMI_'HfUN[n*&oZp[53I.qSjE5&Hk_-JdQ.l35Iqd9q%24W^/Q%pRf+@6ZY*,R?WRcMM[LoDFZK,UP^U!rq<\
%gqm,RrfAC+]si>hq.KUH.lo'Hmo8UuLf$*r6soo-qtTop(A'6(g0$"FrY2CmS`>2h4d`2HhS:qD/_W0ujG-7GO;(o'LRhqj8@`&"
%q)e!<14^6WC28IK[=K.QL<$\.Lkn8n>&QKtj58QorQ_&lC=*QsCnaTV3hG&";(KL]Ym+aF:)W6W/u>!9R625a#$-6EWt/'EiTXbF
%Y5s&eh*kr\6f5t=kFJAclOK;>h2-&gr-^jX_@)3f=CbPpoUT]9&r(>PM6IQ>gc7INf#3L5Im;]Ve@+-MpN@KUJJl*[PGU#3bu%#j
%E`RP!&6(]c?`gqh9SQkug%A$BGE747KOJP/K&!tFs85C<HK%/;pXm5a7I++Bj6*MOpJ:hD/,\Q0h*^_grRO+bk-\f97GU;`pKCO?
%l^n,riItq<cKl;eH'\rY`Ef,LRQ]$4d=YWG;[MVGr8M%a$jV-.#G9V#B'0,j"bE*@0+Am.8E7/CLMK(P`g526L04^T7dU;r7;!"+
%cM6n3K;&;CV5'oS:2C5r^[K(GVm<FmfAl;Q?erQ\hVS;+"nfX-9+\i:h;'C5#ldFaS5#b_Q)Tu3XkqHF5EY37,]-O0.'ViNY&]:D
%BiS_#+9ous_LKr&c[Tsao'pmKHgUhR/,sgpr84dM2ia1'_T`&;WUTq;Q[WSIr]`L[5)(SKc^142;+$EER-J/r?%*G#qUkd/kCbnr
%S03C$$SaMYjDqfn7Ao%65`:B>?gR]MG#.!?d1Etf%h.:d"k/B8PcNl(bZnRQDJ$C*\I\1pB`)1;AX6CSPVZP":+W'b\^@o=:r;lS
%$_EGP0S2<72JY",0!U'cYPdoMM?RR3IV3\Mb6N,%HtRoJ#:aE)$aH\$aJ5J<e28/=.3>lN=[a?Ardi3pnapfVqA"q2AT2[^2PUf4
%9B(<i9%/IgIrVf<l3!<]N89`pW$PL_Z\RM2c`I-g8p5ZZN2bDD5#?gV3hme)!rkIY1UGp9pE\gLZ(+j)>]YBj]\`-nWj+9S06p<5
%_5\#7b15<_BB%ZkrTf%8f[]b#,?=eJ?mD>4S7t2gWYJI]]i$@c>'WI/@arAN0^&[;TehSKD/8*1\)U8Fj%_QmY()EYb#)gL,@F-J
%naUQRSZ^H1N<A<*:\<;KAS1D@2]o7J5eFr5-p[ORp/_'$12OYhi"i3a+5Q0ZrV3a[43,&[j5/0TTD!2<%@)_pSso'U4/9L?/hSbP
%(ZIqu:IaQg@(?)DGVWtRYU8P-[(Yu@2m]V,OE+7r8noD$eGZI15)^N?/*M'Y)DYE)EcZ,F4dFacT6/C/I.Llhm$miY/cK/-m7Lhn
%9B[ha@!pbg9=9CLDpJr8S-5Sp?(PE'XuH4*[.P2>RX!?<qq[j?UoH/'[-gG6F^*MgXgPk!UpJP9pEmZ'.#1,bmiG8%%o,.jh:@MC
%EEjYCEu'E>s(`M<n?FCb>A50s]m9BqAMcMU*rc&mql*bL[n#6a91?,ugS7Unm(o*YEIcPZAq_g<L'4tP^,]JRA>q;h^LFmT8NIJW
%btdAq:>enGXA8Pab$+\)ZA`HkcMc;LSbSW*l1@&ih)"bC,EL`*FS@cr)?.=F@hNe$Q_`L*pQ#3@!&+!5(2e8MKCKiFU7UIK<liW0
%`5a"Cj7=[0IAZq@DKYi;3YT8A2MSi75"P"L5/??XIZ1nta/b3,p#!5?T$3jBRAdDfB?sCVAoE$CP=%oX.YG[)F(ZkLeAY^"XEL;_
%lqV^!'JnMa7,@EEHS\@Af"'8Y8@G'94ONPXA:"$?[!:uWeg7/G1`+Hs)-rD:^#0^FW4-h'l&HRo%sR/!AHC$dV51Ad:3Z%RKI<As
%h5M/aV]5["*UidJn`/3>oo?Vt#NIH.9XPOsL`&2<-c6s08@3,)7+KW*_([J&Q5=DC*JWT\m)mPmBAL8Xa\hI'pjB-Y8'lWg`&jJm
%"tS>M.q.>KC@"#pVC%`BZ%Y,10U<X\,L:,F*[fj\N8qbcQS_+L:RujTSBCMDKZjArkMi7^3nNKR^an\o#D,l]0G:8sT=oU:,KAt#
%)R<u<3W3mg^,aW3m5Kdr5I6i>O%8fR-f`><k^kC<7!m-BbF.g31:2!]iP0+AcW0-T406oB):+lNrp@+:I^N3H,^#ZkWKD7`VDpZ<
%o\Jb4S=ch/LpMhk;@s.W.BR;BlZ>_sdJVC2n)BXop?%.*KDCEE*YSDt':,2YD![4sDCk2'KR[:WHqJP:hu.]63oNK=KCOX_l4ZlS
%Roee&:Tq9\UEB*fW0b%;O["o=H^?&4p#kWEmG8pYk4e_sff:k9pgbcG/O-;AnN7[6?dt\;r([c,o\q][mQmbjLRs]EG;tru#F?_$
%/"AAca_B`iPn:CF0Nq'nF_3D5B7oXI'Lf)NqtKW.PM838fR4t5KGV#PV\gKD%PLI0^1[Wt`SS`**@t,,0A4gL]oaCsPJQ[@`.:g/
%#(n=b?]aVP;S7?UV]mq#kI9SXDnA+1<:g%7?L-(af%\FcT5M(9dc^8F(N;JTme>_ddV%1k)3h<('8N]efK?KBc]NA7oP'o4VhuNk
%qJql5(DIadZcbf.OKLJZ(Sj4N_t`j/^Yaq/]h;#[Bh9c"hEh.>keZ,)*eq/=QZ<`'dKM!J-QU`tWXI*P::rBQUigdq.662@+*TAS
%/"`$Sl-A@MpU]DA_4[t23A2]'kRK4l`kR_C^0E<bfGX/M-:aVb8.*dcU<tgtFPa:iWN>8R-IA\se6F8Ybl&$!@4jPDLEl;>Q]2eZ
%mX$^73#qmP-tggs7\W;GZuak)ho^E2pc%u,OROI>J.C6"!.sa[)i7@"g.A^J]HF>KW_%,lAq"'U1KQ`fqTTFdI>[DR]<RG)HX9=V
%/D[7J+`Srd!F=;PB/I>Aha`F?n#+@.6mHiK'YfcTe7<>J9AZ<Wp>#:Z%N&!Lr&7O*B\_^+lRi-rjO85=*7jP&Zp,O8\9Wq!3W`"m
%?S^B-:[1]PGTc"FcJgrUVhbb<KP)SopapdpSr(S:jKtZCm"DI2]8V_`mbfmH5A#+k`'#/K:cU6JXLd.LqK3r%9IYa\_fN17D+S*d
%X8Hi%YZu*_]m7-!]m<:@<D=9Mg_iLTIUTc7@Wd$5jmhBZXEr9?O7%4q(CrEBI%4Jiqrc4NSTf:Lj>T![QBt&ONt1V"%'D]q^N*uL
%k";g55JC`:5?bBpmk2;&GlLq:i9nU_S'RBi-bF8E9g:/3X.m+mA`M>0Ws<jSCJ4E9bhl`1]Q62A)F)a[^7(mF)coLllH*T4i6f`-
%V8]1@[F4sDrpK(Lr69jmF`$KYpD(9ip$6hXLPM)Dn"5r)%s)sK8&L=+qsi7uE;%#ZHEt7g>^O*\]moXUY@_oAHa7^)C"HUtn(t_T
%po1s?1B6M7>3kG@IU64UZ2T%5mWe_EG4j/RPP(?!Hi(Mq)R&gP?T1b]pHQE8bPe::]=[s`LQdujpH^Z+jP,[E?+'3DC%9$a[p5#5
%oQ]K@_3^kqFQ;QLj1WK7QKQEZf@jGM<sRN:GFcD\?VU3AAp/B8f=[VV3@qo$>ARZmDp0gu^[l;cC$"LCop+semJCgn>Woa/]A*.4
%:VGGhrJa1I>%J'^2sO]GG.75-akh(<qLb8YUY/Ejm>\4e5LG$d9D>"t_P>B4Hh2N^4kRGn2#HIBHOK9*e"8ed(<65sHaNZPc2P5R
%@Ze:':W@>NaLRdGpGU@kme0Zs3e!7BZTi*bmW=fmm_oe4iVgdhV3T)Z=5U1:W=1EA=!)q!=7<bdiKr6:2gZY8lCFuJWSIB'lb6$d
%mHpsAQB1aAI6#)>h-^/$bKbeFqIXXj;kL6W>@$GDhH7NJqdG.m/:R@\V,.e39t'Z6j+>"hhHsUuT,-=e4lu;dGLjKJC&5MllrW\g
%D"dl,[6&^-_82b;TXTD'hV7r,r!Ub]Cp>X3F4j)A51T4ffS%SM$#8VK=%Ljn#W#PJ=231&YBIqs$N%Yghed;8I\0p%?[2EgXjah+
%D;"?iITa@orpFoUF(P0dlMaiQkL.]&GN$cT>eJtnaohLVmX847Wb1->([p(Il`8q#IU22d[gVs(O00S+YO(.IILP[pF7.T80ND4m
%rB,D[hV>X>FFEi5hGYI9)/J(1=9=]Hq3SDuhK43eQgWV6ZZL,4nje'(alMN)kGAHm2A.b_mm^BSW%Gc:2HOij^%Pn'qLSXSpg>s`
%s0S$>3`u<g\A%7[aR)'qbJWVgoR&M$[m%>X)8(><*0*g.SC!c%:d*KVf`(_8dCNJN4hgZ-I:iNDHokQfrh+18qm+9pBo\!4Gu]"=
%B5S^H=uisnI]Ue3bcdr;lM&-l+VC3G[66(j-,7'PDYVL_]sVm"\2JO)G$i"!]+=c*oK9d2e:5pqr/ZVKF*Df-Z_jSqd=&UcX(cK:
%gRIlSk'j_L]^c!A=m`&][<)r:]7%G>eo[c2(=,`/T?3#a>;,jIelU*$4a[4f2cpE_Y5*P6m]Wgr)RjPG2W#)5R9,I+gn@nQ(VUpI
%?N*.A4'M%_h@//nL[VDA17le2!fkn#%%lkY)ftFWqpk])9qUhENFb2`E>V70Xk!B>O0!9gn;p6$g7*;IKVJ>^SpoPAf9[!HHj=ut
%D0;a9I+s*uI<XI?GGG+Oqd[D=hOe!tlB]^!<0Iq'T4El'5A#q&l\c;(9T@POG]gVs*u9@7e4@'kG#$V#rquRMSNKic@R8=6gjsBO
%GO&4[o%WNEa5_SD^NZlMATcH$f\ZJuA0q.W[D+:F5$FBK8\Vn.oO-_!ZMJP2[Cp^g?)1gV0kd"GNg</HGAlu8eMld1qo&f0.g+t+
%G-5FQ-6JS[V_^hYria#sm&A]So;<u)s/c-rGP=8O=fPus@$u&.RX3CWaSBr??q#*bpRc>'0/unO/i@T6>h\_Z:\We4s7C`)PD$lp
%TpjV!UoG5!eJt\dQVhOIbjjc7hJ-^6[gB13;LB^f)X]$hM.YRIhI8%#7fB&rOF;G>@\]i:h,k)\j3-K>I!ec6ra`=FkYo0Di;`Z+
%Y)ap[5P&GX#'06FD%Lq_5MUW=V0m!T_*p6+ffFJ/s6aDkbs\R$?[4'[jdR1:J%RF%eJJlnQbN$bU#gp,:H.:GhYb[+:`oIr'H)@:
%I)Xg4\N+;J>d-+M>hQ(M/$5/ej$c1/2.qmbGF&M$7\nUN,X-9SBn=c[*QBcBg2tA`VGL\PUY20kDWM@X]\fY&j`.Ekmdn.a;q@IB
%*^1:[l2>"[[:R5#6oOCaqGO0$^5'6bK"jD&QS'0polo3%g.I:0T/,qc4BVDT/Ol1pcs[tPg=*#!QJId$e0T3iqg.j4P:+$!hL>'<
%YeG4c]C"^1I9f'%WqO6#Sd-5#hk%Nr]7/l84H?hN]5tFq%Ue^nk@[hF/A8anqI$/ojm1@KmZ3u!ph[#$(hW?uHuZ(0Mp/m]E<joq
%;rXLJXrbgCHGDZ%MoW:jV*hF0O(DCZhV=X#<Xqo3I9:poo]L8.9?U\Sm8nqjc)%NqUE)%trM:ahXCdbdMn@<Arn#-"DsP=*?Pi^O
%p!F/IDiWFmmqaX.gH0_a-<dG2SV,J\mBoH@jWXooa[qc;-?*Uib0?As=6D-Ir!EJ7lE:`mR;G#c^q7HrRi<tBHhF@tL4OpH]Y+(0
%?P-Un6ZO=SlG"a[r.a8VlsO(sF6FSOedVr]bE!pbPl:F*UG*4^YQ"lEe%7!N`8RSe8k&]^'0JhB(5_A)Vq%]gp85%Pf$<j0V2r*P
%?XEap+]^UMnkckQL8ll+d-AAaT?aW(rpDg]j</\TnA5mH#ERZ0rl0,.oCZ%sm/8j(24@]hT$5#<HJdH2E?@;Jmb<AT,THMnP'CrW
%WSPhLLHhqcrB>S=#kc6@s)_oEnG&'8Wg^V&4E$OtEK1I6GV]o#L[D5Cd]CcDn5J_gHEaB8?=0[`34jUNlc8<]EJ\^$J,"#+jm^`a
%]=u6k^WI2a4RY?o%k=g]j4ULM<*no-EMM<Ch!enNL]6m;qB<$;m-`_-5JpG`Bh6ZqH$s]"dsN^cXag.oqs+%3huqe5?a#J^?=.oZ
%/UT,*m`(IPQS4Y2kZdM:Sqj27]YE<Pq0_K;6ur+^mIr^OoC,63I[oc;a>T(Aq[^`:h9f3PZ9>+#s6m,E<teZtqU0&!pq"!4m-OnT
%iEl69hDY^j/(oBZo!h`qk4/#;jl0f2;g2Q/Y;GD#j-Oq3n*+*T@Cu:pheTR*[WZ:toZ*.claLfg.6Qj@lNNqCHNSb&]ineCHL&]s
%qO0&hmX,m']mVnfj6kmm<mRCmeTY3b2-PE#ea[<jouZFk\$4:UYF@%XpGlsCac4_tD]<KH^-P75l"i!,aa)<5?G)85/\s@=dc,4q
%V)RgF;ErBRoM!6Xc]tIRImY/O/,/-?J!eD;cIKgtVgV0X=-ZjYK*pC[s'jE*qHiRZ>lOQkq;1Dn;0>Bpi639LS:?X&Xus;<LXY&J
%b5HTd(pLI9m@WNYpY1[F(og(Z(7+jhYEU\^CI#OgYD2@jrjr$?p@ZW%O1tDp=-e:fJ!l-`fO8$5Sd*qbfDT)VO)Y@EXR.QdkVY@>
%U>I%a`",B5`W6o)p\*;1<qAH:Ui%nol`PZhh"g4qQ@#8fqmY."B<tD$@]"J98`AEeq1DLnIW]Ap_<W&@O,nT/Qd)"DoBhmR?Q?F[
%D9o@phct[+fe*5#H_WV(_["DX$`f=QDVPF$nqrTT>.qFg<qFN%)qVOL^L"VDIWaNYflFj?G%^KibcMalGnLi7p>Y$,&&0m"5ORoG
%gH%Hlf"rN0YJt@a\*\YC]Yf+;IpN&Zo]Fk<'!'mYdsQ,R:,^ZH'J>mBq74L`2m6bQ5<`<\A],g[oX`A_n*f0$h0f%Bo6PW7l`9Ir
%h*.l\NHAd`=**j%nDgF);SBX.T'tOjS4[h*qrQB>d_"=`IW2L"G%^S9Gqs)5HcrL?IX!][I1tkZ7q-OS/R9CoZfTj`ZSrE]]8%o_
%=5H',=s2el@s$h-B;pBpnh[uOZc4nXU9]&/_JeDW6h_s@beq*NW)'PoF8b9s`RXsB8ITX,a=gVuXR:"T)m8i4\7Y[8/iMI:qi?MF
%/L6c(XM)m;mW%o9ImLJ$n#efZ]!m&lB?NZs(2&q&F4CRFoMXFlhKuuJ?[Z-\qp:nhQl=E<qrm1Nk68T4D\!@;De%._9."[Vo^u-t
%^2MSTa0haas%f,V[7[G@mBu>iX'QB&q/pi[jVWb0;iT/\7p";Dg7Jo,=-a>&4hC?bHJGY=I^IErd_>[.l-8q^cMHPcUt-M]Q`pCn
%FSBYH@&Z70I3hnU):bhQ>IS=\r*"Ddpq(rcri]JIiktc%UY5P4i?OjO5<mqM+(m+u<-)mb(&pqA7_[b^HF(A7;Ch[ZI<)VSs(ZIi
%l0e035AH_#s(gBgYs)7r=#Y-VrbQ@T74]PVo<9qQ2u<u<h(RYr\@Y1X6lp3:X?QJ9*j=GR=^PCGFm]$@^EVS8>X$lSDb_sSQ[eej
%m)K??T^Jcs:\9P1Sql',=P_jUH$M*u5H8S>a5bM'*aW3gnoSSfouglgIlNl]A)12b*'LfcbFs.G/,KkJ[#IJf!QX,k^1Gl2rS"mP
%]hFn;LT:sS?gi<TUU$u3h0nm'*6Z%)54a$f/HjErTGHus]8L#=8=[mN))5G2jgSl?Q"G.,X_3q@IW'/)jkNMh%t6&]hES_Xhittu
%q+l>F[=QQAG<X[VYD]fsR="cC,X\,"%AferITb:WB-'s#XD\NuG0Rg(4Z@lVN:FL4G$E;DrB.`Bd2oajB?mKrO8dW!]J=(];jABY
%I5[SlZZZ/bQ/C<$NR]-5k.D-7p%I(WDs-LR44=_k?i$Vl/R-tX5;K94O,e]^i]BL]HBqX]_tQfP\pb?ZA+n4r+.gsda<*dAQht[b
%)G(k+6Ib",_VIBVl$.>pDLZX?qc_TO4F;0#>OM6H^J2iG[?XcSb'2E[ZGi;Ur]V$1q1j..e&@lt<F#6.m8q2bam,GAT6nF?rA]YY
%DO`Xbc&K-e5O<#9l!,+.YEc:49lhFA+2-ANEVePkd>])O])QX]Mf]/)nBBAM[<\3[<-&)8EUW;Km,lPq5DEP-/kU?fRGX'$YPG3M
%kKg0^<tfA!]<p3t^K"pnVb>c*Ifj.5s'0i`<dg_FB(l6!6^7p'81/`VkKM+RmifM0?g(e/],5cu8[\Q*^L04@[/D<FmU3/&4rd@;
%OZp6<o47:6ML'\-^=U&Fj2gukeZF/JpO=4rHV"qJ_/?_R3`"JkcLF3fKHTj_iFV27B**kA^&=/_BUTJCDm(eCEl:%O=ujrMr)D44
%B?%F3f9[!F@c'6"hRe.Q>EXqZ,TnBqo5!Qlp.WWgZhDt@,sO<n[g.n-BT91^T)A,d?-^^p!ERTC/M_f>%D'a%O1d^Rk4RmrV0fH;
%B]\aDhB*<Fr`E?OR=A@fqK27gGjdbc%=HlUkJl6(^!ElF8*XF+B)9g!>u1)Wr:%brrc.g8hn3ffjNbB6nZ@"bX?M&qqpg1=q7(^m
%n4&8/K#M,KLF.Uan,L'!A9E*mo4.H:DdiASrJIC$;QWKo4uJ9,?@6_Hhl_t^Okj?TpEf]KIqI^^Wqj@c?e0=TqSeHI5MKt#I`HB9
%hl\"7T7?X8ROlu'R@IgZk3'-4l[#/@h>W%L,so)lmdBK0DVomAA`mV&gZObfZ@:GQHkZ/<P@qSc?X<Z9HLq$fLY\L3B,!Au;t+I<
%^&@6=.%"R&ap"?np@Rt8'-`h.=)a^p^b>S3[Gfkcf6t()rVQO`&%B<"iE4$4)X2H]SSuQTIaWsph<Q`#>G;7snTq7%qf?NLiJ2IN
%22L'IPXc<O#ENd&>[Lan*FCr*EIu3(RkJD$=:pJboo$Ke^Nj2DBo;]b8=3VrC.Bp!4Wk@2k(=UL,9M5lfQR1]J,*pRoCr(BWV#;L
%5Jb6lEZ[KHY*\lIS6`XQHFWmYIEaA\j+2>jqfqRGFgm?Wl1=3>o&PJR^%E]@o$c.^RA\5>Hh6Lh[kQ=rq)*8810%c:OdMX:jjD>P
%"2%seQ`"WbX#hEqH"H=nh0Z`tRB#W!]@A91p9TM5rMA[`SuplqflR,>_fGA=RZSblC]*Yp^>(_^Dm,1>f;'^BX;sUF^"od$>$kFX
%Eu&:glO*"%rYhe>?eS>'c#[]<n]o8AcMGcYPo9>)\,DmVKg.9RhPUQA]^@^6;$Qo@rdehIUHS$>VK\A%<Y)?^]#I0%>5e:#1i:k2
%(<^l8GJ;p>f<t&1bI&QY@%P)<=nY8JqP`3IE91-/s)mb__R!$&%7p&R@U'=)S,)mR*T*BRF2$tt:AgPFR(]XrrmCaG@;]]/T$:<-
%/RSMF\**:<58S4Nq1%f[CH`3r8;[)t64a<?/dT94=4`'@+"VnsS8R'VZ!KiCe%dtVl`Q3>A6[/]r\>"pR?+bcriQ2QQNpV@qTaL(
%J+r[)BXlNZE(oo=n!>6;"lDiM4-*RI'k^^q9"n$*j^0)=O4pAN^P8L*bEn[tSssm"@b]a\o=_`ZbkKn_)p.f`\6uD1%0sf,6_CKm
%P0A6Ep',!a>+B;]>L0uDr7>?3JZgIbU<qa7rme^/h"Pp@WJK#@Z%'*1>15.IqJas[<U9.tP>3^$K%=Qp%b.gkd-%b&QI!kS[sC^9
%(nB>mq_rQH`ouEb;TA`Y?`.pOjLs<lrk"jjc5Eb-,;5RN;)@_c0,f-d"G?AVf^D7Ac>s:$A`Zr;1]ffBK4:EZk)7d6M`>\:RIYUK
%QdORV776P$kj-3-,L5[q=<0)H5LnY[?hX++rD';YMlJpQYSu&akq`&n6?c[6^DEXm4a+\We2aj`kRWLcJm;(]]<1#hef'<V10X]=
%ljd4Zc<ls\cCfl4OJA/`Bo&@f3b/)Tc>/9R1Z*LAVLnd(A'W[Spt,#2FmQ`eo#'/";Xh)e)-lA+UAXZgS?GpSK($'o`NaqZf:UNU
%+UZrj[X&WQU!r:N38ZC-$gQZLTO".tn]C2B)Z4ia8rdVb0WmFck81skDtS'625iHOSIBriZJ5<QB<[?gm\k>WM:73Tp1$K#%GR5[
%5>-auOmc-@'#IEn[jIZ^?>"Ab#F6VFOk+tE^Y$6mo"ZrG%ZW*Zs"(jn\92pPBY,$,kr2A.(lG-W*.MkkXcjcE+iD.W'tWuUjY+N\
%C84jk-uqM86]%-_FkLRVhnI_bXHE5,AaWsN<nI8tc>gCYo\6.t&H]\[]e#11@Y)Xd(O>Ks`UDmWBCk/ASb3m+o5__Rn(b:!$_S*H
%P>jSgae9B:^ta`Y<eV2A(U5[PS+'fb9h)ZEq:Q2&APD'NSE.Y+UZ%_XgnftbRIsgpIJl2#[_%0B<km)u:nl72]7"pEZnpq<qU#E6
%P"G2u[Lla1GN?-b6+"XEek5+m6^76fcfJ_BT8+_sPpd6a+&C(I[@!F^!<qur<HrR7`Af+lOX#+JpUjH5&K"f-s(<ncE+9.#*':bs
%&2Fb@^G-jff<<-W:g&cg2=]BJXjLjio.);f8>H0fP8MaE^D^\^GN-p-!OSqN`$%T/n;f$^6[0JC5155bJ,\L$5Q=U>_7"Q+M8PM3
%=F?>9+$qmb\a^tn*2((*q#qJ>;2[Y1'@@5@HKO!"R2ZKr=dpDG`$^2_d=j@ie,93PgciQ`eMoRC7,7G73,@e$Z4KnJ@7QSHj29cD
%U-)NK[`i""QTq\D(u,^UVQ^edH(HID/3mKQ3J"4&r,2QklPfs<$]%(ON%MFBm<km]Q2m5.b-^cc3ZD"`/go#3<@h'!<A<Vd-Xa(d
%QYEKm$YXoj"<(?0YcMja;S#]:p?hJmTm#QJO!tZ0Q?lMu#W;p@f4M1Dq+@@1@_Tp3990p2VC3;*1`$-gfoeUc>:6)gF*'72\%[%f
%<^g%$keH=[T[Cn-d$+Z2i;kK&8m0ANQ&8tERA';AT!*7p$cm]Bjnk#!BDK1i0IRu!V5^BnJB!WR5ZJ^ITN+")EC"ir<M$aoln1u<
%s.!62@&^8g.8)ne!39AIS8M5<C@:7?\$f<5qD%k;N"nB((c,Tcfm0EpW`A2q,+3f<bP-)H0iM(1VCNM,.r,:JnpJ#8$'\r\4Hu/0
%Di,W*?r`L-&Z[jO>?tcg$2G=ko&Ju$[%F$:JC[M#?8-&;2?9&207^i)<<E#6U`&5^#HUalXu+9.VTYLY=k"8'goi=71Ddko4*M$R
%H"^$R$Gi`IlERp2cnBiTjs_ucL#GL5ed:!q\."2NYaJj_Z2PsPQ1W0ZB`Ns>i^Pq."*IpF2*^[_NZ3[dO`Z$p#ZEVlUP*AS/s1?(
%2lG`*Es+Q6@"HDJoH@g(V?k):UuOX7)>h:os)\KEa3./g<aIdNFBL%5G8Xo9fh)UU\_dAedp,dZ"bF[,-_TNQP`'C&cL3rIr_EO%
%hn0ii(-4`(W#J":?R(BZe_J;F`I:ij_'r#U`/:#^$2_(4FnX!;YB!&+[^8mpBP`]0BjZJSXl[A+gC0`t@3:b`h/GlHP)&+?R8TC3
%NJ,6\dS,&i3bk&US"esq>F(d-1HKpX8#H:q?t"1$TKcd@2^hVu'^.K!-*<,Ke3R:Qgdu8_L%h5rSD16lR'=f8d%W"Obu9#sIB4uO
%OeYmjYcOamk[OdJ(-lY[3<Jj&\fe4,MHiEG?h(o4$DZi5]*sH)5ZK8Y>a@+N[9Q@)jZ405E:$W4/Rn.j\^8F%l;"fnH=WBM"8Ci@
%996s$om>/Qjf)]F5N&dIINAePAJfb)(7+e"_IT0e\obU#12UMn,%99S]FZd#$80fh3i6`%;c]Gr=8mUAGfJM;LdAd3.K\Z+%+(<Z
%.8UX<=l1V^F@g3"*a0>N#:irO8f"!?-EXY*NZ/+Q<&t%G!%FVl0qlj&OB#<fkZ830WJjJ!NQqW.\PlmJ$PP&bA:q]LjsC9CIIo?Y
%@a8u./*3Rb`#Sn0>nP+Ij]N>6g0iQpclYmeURDeE^/AYnl]WQWju5drPNeu3'tfM+C<c.QV%i73/E=<T7g@>)'b@4J@=`dPAlTGS
%)>F_m1rSTiQ#c3;W63SF"BP=t5AM^I'`fjN1hk&G`^[0^(pm:FZH+(V`1"INHRpgL)8JKQlCc6mClt'O*.a^?N@j]PZjpI]l`m%@
%,Hu.<T$!X*qt.B+&L`<75ng)_oCS\+/b_j"H.[jZS4db"!jaFc&[8?o#tp?t!j.KI.>,i27:nlS4G`1'$*:-tCpXLabf`\B#3:eW
%Zg_d\9#sh:Q2hM0dHEX,4>bJ%\N6!2$7okOcjA%t'[iPpLA$uaMfk5R6FBm']:n8V6XilGF,Pc)k<A$'W-lFH&t$4oZ3g\=#>&#B
%d)lYn)rY&4fZrVQap_ANjM@/P-Ratr;#n9`6=?JhWU_/f2]g1s+sXRh"?M$LBa!Mg!""W=>`aD_Wr]f58h!EN7Ad>^DGb/J!BJ%8
%loAf2/bR%9-d]1P\WfqKnI.J0Q)Z%,Wf"-0*aV)m`<jbQ3<bS=&\uUm9;![-ECfX5CWD&g6HrO<@u8:e#+RTMBjNK'M4*o[O[0YJ
%a9#/70PfsT;$(@&35cLmD'G>PGs^]2)u:jX(-tQ3-D[074gDU+.h*RU^]&oBon!eh6ZnV^0%PPI+>@aP`:&:f"m@C%j?jqG-D_Dj
%aB+9e\lkgn"Rq:3<N_6(Jt-%b(1Dfg[%NH54LW>?,7"HQikS-S-.!r06&-YlQZ!%Cp0:)*$^LKZ?1M5[O,+%+$dCUSCue"'\b._%
%Su4+S-aZM-!erUa)X,h!cT(OCj\@^jQ`?%7_GEs,''MrOl>EsaZsJ:g;I$6@WI)Qk*.3tA#u%"m\-1-gCB:id3P2_nT*kFjOrL'8
%<lk>`RHEki0l88aL1)S&4D#sE6;@%K81_(U9?askQJ$)e9M+1^@rOD-/-U\UW@TbM,m:#AL5!-H&sf&HQ'_/dVDtEtj45rB:-hZm
%ZFFr_@NI"KW#&XAg_+7+6(Jb,AqSNLZB0FK;\t-E'PnjG&=+,0II.Y\<KdAMU_H:c5`hND14>R$64joq8?%<(#H6W3O5aLj)j&Q:
%4kc4,72B\c8YiAF>M1uFboMh2.#\sii\aZ_[RGs$Rhp(*foeYI?Gn1%Ic^oX\Vf-"UQa5dON-@%@T8(<H^R&H$re)%1*WBWJFXsk
%/!c@"htTg9W`Ss*hRbdLS>ZlFSE9*0l-pVX=rsd9@_+R'\X:_mNHTZR8B"'H`ZqJ(b0g?hAiQJ9b1K"VBGs"nQoPsKkX(]`8I$a0
%NAtJe;]98u4c>_@YsgrloUrV2<6rB@W^p"i)ePgl7e<b!\="ls3`nAL;%>_%r56?V63nbTqTg9Uie<\MfU7-$<*<Tr_0BUo5p/=*
%!6^=c!9(Eq@+7&57F8$"`5..b9Ic5_Mu\be0S`W>,#"IK`g0F-<Ld8A8kk\q)j4I&1hTmDMBWM/li:Y;7+!GW][*/q.EP\T,BH)?
%JNj8#8NJf:P);B#$oc9X)p9d3^haXhEonr.`'KTJKGfmY&*cKP.T5n]P`f*qhN75YN!9>u"UbYT:BF0.A]BUSmYRd_PJ@K1-`,$s
%67*\$,0Q4rZ?YR\;KO!0ZYsAd,&!Z*VN,;#'T8Gr9@dA0-'"M9R$dRl"q+qje-oE+:I2=L<sc7(]?#sEb`n'S6KG!nljYN*>Tgeb
%Ggo.k8'OngQVeBI4\P$UkbY7Fp/6!%3F>Pbd%A;dl<NCtcU^\t?=ZthHWG-SBoJqp,7K`"&.<,Q]gh#C&VFDM@C6p-cYP<!B0.KF
%;Mf[rRgU,p;/#`h'b54ia*@fY%V(i@O^1RkMl?T"'u<4jjcF2=q+-P(G#in,r0lX]=XUd'SFEW6UV03c!uK*fP(jtKC^bV-1Op8,
%.VRrGpHYB_m8@(Ya8NhU"I508$LF_r-#%LJKK#X:d(#6]?6kp\1$HY&J7[BO3);&%^LjbDr]gn`ksXPJ<6hj?@f80GhH,s.<M4fH
%OFcX]:NM^h.<g?gan\E!%]_LN1h$W1=J/Y8bLA#'GY^o2fUk9bHtC_K#A#']PuLFk230+joEEJ"5uB,U"#Eu';"M7BVTeY9@',8q
%WPcjo/tUUc5t>1GAPujGY`L%l`0mQ6h)a-Sq(&Vg<+0:/RU)>(c$+W<WcTQ5\qZHiMofn::okEY%:h2]%c?W1F"8OTQ99u"!+gHP
%rM3(]R$jUH"NUg[()\qU-[JDF"gCrlWMlXZ0dT64,.<Y&:$RcPji)<hV=V2u[]C.aTVOYY&FY#[Qr]RZFjA,X\Sm-B`f&?"'une>
%9XM@)N<X$WM^$F,Vc*@+U'*:V2^kYHTIC9&0n1h/#YNQ?),&1j<:L)c.=+jW6,d>-XN$l/%-D,9&4p('To)RBgFXJ+4LGIh4p5Vg
%:$Q[=ZAT&"I1$dHNgDT-i"l5.:fUY7AofF[U<8u@iCGNOjJAH7!ht.E`&Rme#3VUT.M%]d(m!>MdZ#5XNuH5)>Y`X#)fBd]BQ7Mk
%0^`C\-NO?XjQQ/R%03UD-$@L=Tsh#?(6N//:TKD$9jtqib(U(OAJie(\PA->/7lk$$96iM*ALZZXqhF2Q:Fi26^Wm[jW^fX?,\i\
%Qb,ee.h+*68%f=&KguM.VmK'P^Ba#+#eIPrSY`Em.\h`L"lh]nf2OfP6TUqp!gTIpZBP_G%q]7-Zmt'LQ9c.!bj_UJO?pbNKB;Ai
%%s>f5*sp<].4G;+.>@Dm'$M$,d.hQG^_\@e)$VNcTZ&f9`F9Fq6AEsS61\A8Z]nBe6-K\,\'fQ@.Mi-g[foG1<Flk=OIK!Ciim1*
%B\iqc/6Dnl`=[<;%?,B]NeJS7>fB/f98S<f=2Xc,NqZr@WB<^^E[iAL\>[V<7q,?SH":MqFj(?46+N6l-&>/Rc``\1ib5P9J5/Sj
%/_8s;W,cl)R`cg*&#Z1c33E`q"O,?-duts?L;s.KiBV6BrAq>5/Yjr]D6$P\O;JqlnYUW"WIiQ#RolJQe4tWIi<(WH.=!sNA6KAl
%#+]hpCD9uG;);Ji#IH3*)c:CpQdsA;PtEl*\A83>F\inYeQmnK*!fs_Wn,#n=@!KGY`&c6SC?RcCq"dd#geL]dEX$gTepg5N2AR7
%>[_GJ/b9\WA[aC*Ze]'@XU`C&aa'F!1$BqYP!QWSnfSNW!d,XV(*Y3Q*<VEI&4D%j*G,.?<J1g:lju_gHKd&Z,`<7b<ocIU=re7<
%3[SBde:@Q,lmtDhd%U#(jfq6BN6rb&-:!Ck-if_(<6X1bH'i#Gd$:T=ScQl\4CX7+6NjunL@l[JaFO'i@NoCl#'EbeGg,*m!(J_=
%!57<$4D<oqD7\V4/:IXFhC=$_joPZt6!4QAbN8rMYu(U3;&CjS!(,4(/QYqg&Q(rHF=eP!'&3dM5t@hodXM@?-J/S)",-q-#)1,m
%=4.).$2WE@TaW09=!1m&NTF#l/X0<f`+[Ak>eG<CPViT$1=1Yq*=G[pl6mt"+2DQNKJGi-!0Vqu^llYq!aTLCFL]pM0PK-%-In3W
%P@+qSW:"U4adN*FTiSb/qks<.\m?)ppA225+-%0`0b^2di\Z3$@q&@=b]?_e-WIn^Y(/7%(R#+5G(Z=5dhRBYbXdjUAc[4d,1]-U
%F]p(T$Xa!P3.XOH&=7X+4\4G-4!\no>QZIPH2Sd=W,WgYYd!*AZVXid-%VjU+Y`*c@%g`W?sJ9%%fM_l-?^IR)-[0<X"OLY)?CI^
%%Ue6W5Tnmb#;Gmb,\NHjAaE"7W=_Z^g!HNg'3HqG#p@k_1/8:f9>EBeA');=n0Q^%R3j<o+Fd;K-pu$L&L9=HP#7Xac&W]:qB;TN
%!?ds(!@3O4co4o382mo?]aW=BZGS^-TTB^ajIg0TmA0KAg5E&j=c9$UhBV&9X!3+*Nsa6iV6\:3n0eHoI?9CMkg06[5Z/=jK:]-)
%fkmPe(h<`Hpu7lcM[cZkade@16d,`S'TZd=XPui?OedC-=;pH#o\/)VdM?!4.(i9WK(4"%XJGos+rTjr>oc0b3qIq*fV*o5Ye>)?
%==k":)BLlQ^7`mT=QY/fnfY3?"D32m6$D$K;43ghjhV#@dl!t-g+gsd_EJ@#gaN:UTFM(&o4/4DHA'6VeaK:g-EKm])4=P,PS9(b
%l5AbC7SHo@T8rtF(U`8Id?IN%oEo\AjbDHk,6mC[!D&+:N<"P_![LLs``1)7n0emhMeD)Gp7=M_[VK4=m<8Q<`lNFefZ4&=7\LqY
%>("-b#!E!c75cSHht[@J@glkZ_M6c5:rTi*G19,FK*"R`.J5feCBhB&d8Q]L[4oBAr8LIE='Ujr16cOVRd)3KD^Dk@=^lq-L2dlj
%GN=Jf2iW,9L7>Hh)FXd"`pk*l;6fOjX:6:Dg/8HBObk9.X[SQ/&]np(H>VGl<"Vl5JB?<dL:%K;VD8l[rrEmdM;c"`P0GT5M@.F!
%Eoa/4Q\)!SE-,"$6F&F;0%o=)7;1?kIN!<JFVpFQ!6R#+OKK)pd_0dED491ARGJ`!d9'I_$7.+_bCX0,FX;bk0]:2Q<fr$89kP+b
%C?V!bnk+F<0i)H-2n3jfED0a^aE^`lo"paD7N#9.a]skO`uOdk.a8R.h9kqNTcf!7=3$jHp.H'o!]Am1a](#ed*1+a^ge(JrUq\B
%EWfS/@XCZ+!3d$LK[_%XDeNln7NtI2OYmOsm#\A*&L7.5!_(N^)_(QjTOoDu1<7$>^rX-X=p,dAJPDUB>pg@C8aX$eYm#]H&U?8F
%7i"?q7:e?IB`r%B?O5rZ`lM##S=*Ju@2\,)L6n2Basp92CGsZEQo&!808]cG29e`q7=&:c:ggp?<EqqR`,U4B"&d-l)6nVZA<JN4
%<fKMhCC5?c$Fq''OEFM'k:jgCoJDF0UgZ_/2,p&:>6/FUR8&u(<06X#Q!%!rOnB)V\LZ-25iL=.%n;Nb4q*6Q*$CX@;\q5)LR1/r
%0G_6Yb'`CC,#.jP=fXeY8&c/b7^*.\3&#<OQ)YiA):(LLeANBL<NNf`[RZ?=cf#_.%$FX@W!,;=66!2PdQ@fe!d1^e(='1E$T-)e
%`oYC=8VGBh#T=U_P2HcIClrHAWA="%nedd;+f@$m^jJ#TZk8>*Ua_#o9V_rG.Om&sBfT)4C1*/sFJSY"^S3ZSK>oI;^.(Pc6OS:V
%an.K1=;X-pb`P>1YZ5mTf/(8Va&p.g/Y=YV%%+)s``H5hWo<A2Xoa0j*hF-\1oue<<Fm4s7FK%?@k#Gd`Y>PTm@;glT\J47Y+ERp
%ASg]pPtl[?YuQ!aQsP&H5rup'm%+GiXpQ]-H$0ArdRn//#e;-5#<L[s!;,W\,>_NOVJBS^DFE(I&ks7H.6NCQpJOSU<A*k%UcX6^
%U.B'KX_)[t-l7*@F*sBBl%FV.E5b*n<EYeWbDek:dl*W^\SP,m=@3!1Q*L^_E,^mh>d1Dmf.dGunBi7NO[.@'Y`V:^RrQNSNJ!3<
%+.YH7nWE,C"q>?J1PRWYMQN&uZkQ0G]#?ianUdN)Z>^=j!YN@qlf7jUr-"7.7*_B`FH)k"S#O@`%qe6E,n<j'Q%hh-B&RLLe$4-X
%Q*G14`hX`-_+,fhj\`Z/F'5aBO4Wl8/t/FhDT\IhTF*%2V%TIU%k^5kIeE@*DFDC\@%F4K`[)HK&rXOn5)Z:Z_6"08X^j+&>\mgE
%&g82Hr2i^hFeM4q2qaFXG:ap/@XSWZXC+huPSfj_bD%[`?'.R;Ug(D8aAi@q7nWD",fAq!\C-11A-7dS$'S.$rB0/n(R''3[qPA-
%UIBOFaOs_$&JNh,-0+Jm&sf8^c.Gh,0u%8AB;=pNNC23c*gno:2MVHW3AbR_f._#CPnd<ip_6P;A^oZTll8jCI2D/@H&N,Mh8)A'
%Lcnsn>L7ID^nr=[Li=u>XuN*^,`R4PF'^V26pP(\V.%7Td=n;5[M/6@S;N_+egHJR,q%GT6Ko;[ZE_?rPuUpkZ&R&kmSpYGl#m/F
%%&FB;Q>?DM01h3A$jJ##,>;4d;#N)ENOIN3dgj*_KoAkM`lLRfeXX-1[\nu5\qU[YC`3[5[Ki,%_?60,_)+&TNY4g*4YUOuPEe/m
%c,b,UM[=MI0Y]a0eg5_oqq&mjJkN@!_HKO#4SXk#!DtYbB7#:UBrY+"7FOelBh<`LC=312@W=/^duto<j1%rCcC1:R#p`RPO'/a?
%`SEWOrBg00L:E8C3uQ5Rj9=pY_[b&U.].k:!F^#4ObHU6PZubB[<0N.'Rke$J@QiDC.sPG>Da,h1^-Xe!s57?914U%F=0H=(&QFq
%fURm?W:(HOAB?C9&f^;&Bb$Q-<tWX.&K4$?Vm(,4"OJ'->q_j/$RmU7OCiicg!M*=)O0&X&M/!@]@/+X9p]MZ2.7_CiPnQ$/3PZ>
%*-o+],`bjk8h??&2Sc;Q&_-uK%I_M[#m4Hc\-Qhq&_mFY'qFU0BW-mafG%A@[8H5M-fLI!#/+C\^be!!nB<^97Od:'L.i0oGXUnf
%E!8U6)8P1r#E1Wl?t*kXjQs)P9Z3j'#feg<Gb#$MP`SdTmSq&*U1TrY@3HHi5Y^N2A1j5O"fQAR`-&+Z=KTL]iZ^(MDQ!_m"!]fi
%FG?$"ME(+0,mqjOot!]%j<9$[&r*%i"Ho(e+\%3n0kXX?^gPnk+O225")Ccp6*ZCRL$Jto,n.L*N0u2@.!+N9R+'R7)Hj:M$oQJ/
%)`'6*U(W0k'HoXF5a<t2k[k>B);f8#[8b!UJcZ^.1/rC:;#i9uLPi$V"A!,:!9FQP;R/3Vi#A<h3nCn'M.7^JG91j@+Y!`4!i&-9
%KfUDhY#mP5;V:5W$5kL"^7iFFZZ$Ve1`pm01u'E-@;TCI`&4?$%6QXm"rD!rX`AT!aL.O3V0Kcm7,!J#5BssXo9"rNo4".0miYC`
%E[0:a)&$h7aXQCd$5<jV$3ZJ!o,V\CfVT*5Mol[R/frC+M"QT<mQs?\(UB;XK+km0[oQ`)X4PHa31)Y)RS=Vun0Shu=!o\[/M_4>
%7*&d1Pp5_M-=s*U)<S2H"LZW^VO.G<i-U@i1!rDJmPDq!.82u`Dbb%>E'Ld?/1I.,eL(`/-<Y/KeI9Pb<?*m)%;H`f:=%Q^[(24*
%VK<@RS*QdWVN<OR"1lG+9GW[l8uY/KZTLk_T*5V=BGkPfb<BbhQ^M7IQ#+(+Ae!m4Sn".nY9nTH("X4*TE5hB$aSHg=Rr>S-eXL>
%(+%ud#>69oZYg6.*06)(@g4IJW%SYtAjQHr,P<A0KTu"]W*j]3"r<6nV?XcmjTShOM.-m65@7%DI.\4>#IP<^=k]eZ&,LH4+"nmS
%=M5dH7mN2j>k=gs]t>+I,UaK8N4286d$5r$]V8&o4@Mh.jeV8ERFLJ)0AOqh23V.(hMOV";N[Q=ALa1P_$W@2LnKW+.^d>c7l3i;
%3+3Da%L(Smdg_?hO8:0#.oRhUrK>=H30PV]d/B,p4(3!q^tG1.<f#?qG?.]U<=oCA2S]_MBfARV"W6k%KmO;XR#I,=9fIXnq@>Lc
%L2Y7+Hk2n-Zj#?GM5<QW$tG`mHK!;FH1@lMX79;\bf#`n]8XRbb:(qZP&@`Ced".+U@n[k)EresG_[p'fStefAC&-7RV1/MR<e0l
%0kSaIlR:tmRen9>C^D^hKH+J(de*]r8'@fsHi5iN7.[.;72ZnC)=@LQoio6b%KOu.p(ZW@LmJ(04?:N\2:KtD^J_nt<3B`L8tY=@
%*-`@e!^U712Z?CC8I:SSlKOJ.Th2%n'Lb$Y?EBNM&Z?s-:rOtgpbequ&luoBhpHA#,&&nLG;[`gYD%LC-]d*g^J?UV2BfG$=ituT
%ijahb8\ST[-p:R0MVDeXA91JV<)W6%0@.2riZM7\8m8KWNC*XK0V7o.j(ZII'7R:0-D1uYKISc,AKKVa>j\]//<$&:Nc9tOEuMqI
%=_>P':EnU37n[n>)fJju`$W[)fceuf4&LY,Nb=%_dq<YWLs[MQgapd@K8F7N<`VNr9`>2A7ipTm:bansX3l]=C3l<cH#05;b+o>V
%hguQ0/,B!8eP*'l\Y(&CjS\0J3sAY.('tG#4cN&.4b2n!iG(YqE8P3tWQK!aIFM`\cNM3YR5P&a4Ma.J9V(I1BDpYc%b7mU0Vt#)
%7WYbCO2C%7_k)]-Dq%7E&[_3s@UHI@,2'DKC-7<NT*qOdW&X^o1rt\gfYuhrJe!pT3YkNP>@Q4MX$(]@YcgD3_*X'\6o;HQJr`-I
%ek@q-L1%PU"kG2u1S<E&`DPX,$+^?n@ZNKm`=X,Zj&&mTB5E%OFI%G_?c\i'jDRJ5Tgjr*!ej]VVMo)lN.Mi0j=1qkJbjX*6'Gjl
%Cn=[JMFgng>Zj$@`=E0RFOq5q-A!m.XA2]e6Xhn9Y,)i[1h5[%llo+8'sSqQ:gIcRK!0.#Tpg:mA+1AkqaQif&Rl+B@m:,^jS2l^
%%MPCG%!#1Z#`,.Ql*I]-`2T\LCboZK35SV\@j,aJ&j;>ZDeN?N<KlNI:r\i%]YCG)>TQm'QC3T=\ksX[<>#Y`1O=b3fe[W3eT1GO
%_$L+J;\W(E@eU78qF*oG)Ak'-i9jQ)4tJiI(9`#u]8NSVX4(iOek@O`J&Oks_84h<orPr6Lr::HY,`-+ZK;L"V:1V*[p1AT@#>[0
%AW3*FDHVjlJOI+0niYsr.(1fA@i#jcfQe>j#9R;W$]F(J/'ME2PD4\kd81A^/b3s#A5EQ[d:F\KgX]hC<>+H?epK13V4H`F#?aSI
%7*Ln-=pZWM6WM*2&bZ_U](#ic+rX1.-6s:cMcBJ3k:84HIS7#D2r4BLfi'reH<4)kTTL&)3(B&BEk:b5'8%nDZZogi\4*K1foiW)
%LgO`Q"q"RT$KN_?.Y^9_4&s"sWJ'0hHe+@$QY"m"FSSPR/CXBW!#5`B[X""g&0rYm67L'9;\gi0UhrkN\5=akFp3Z!8eJt^A=UQQ
%VI`$L+ro'3V;#'_3KTLJs!fT;$2U)=#FUjR5d3okata*YeT$XMLoeFtT1iLU`7!)4e@Zkr&.XS8Usg*]PR:ogVc[@F?PTHW_(1D/
%>8;e6Su)Z1iI\j!Mkm"G^`XUO8<0_X-A8,=2gc:;.*uA?kX#QB#s'&(/s?bL`e$LA8]kp+^87(Qg(%k;14^67jc-hY]PK(&8Mj7T
%9rVI'ek2&o,:Tm;UB+'*I\N)A>X6+\,MlN>[UfG0Sne?P2csUO6$eV*],.,2^Sci=OBc?WF>hhO_5cUQ6*!W6ZsQfU:;NOK8=W?a
%ApML!JeEbL%NH$-aP]u*e)A*))qVHUK;XM[/835O75"!Q,ZBV-8Ju6>i[a'iC)u[3U-"(GXat*5d,<sG8I%c\,FcJf=ohQ4A6T_b
%i&m_h[M+T8Z1&e`32'Rip`5F]:ejQmTE#TJ-<ise+9AQ1b%SO"B::Rd#*,E"<,eVTfYTB6M[4O0#V;CP82JA.&]X_,$pq]Pg64<Y
%'b1gL"cT[n@2]iW9]b>/O=+oZb5`T@Id#o]bVER+6/E&3flL"]H/,0.*DHMs<ofLUAdXB.qQMp0=r[Pk`]RCHlIt/W.#Ku).:&AG
%k3TGu2.sE$Jqoh\R<9ZN^,@FQV(/<8QaAL[bd4,,Jmk%Q:%R:A4$j2`lk9s1?B!g'(aQtt862)S6-JE6":"f:^mt/&j6/7,=-<uq
%^lZ18WS%`4<%PkoJ5S^\"fW[oe5FF==kjUK__n]^O:.6""Y^P&&8W(hnmW8jBn4UkbgRFH,nV!T%eL#r>/9-W>(N>JTP&A[+f*;e
%@%k[%fL=/Lf0H/NK2dsN2S`^U8n3f96d^$L.[.4fMS`s.?U#(l,6?7.@:`9!MK$=j.3eKhM?KFa!Z"[\QCCu'%2a6:k';$&CGqeu
%-f=W\).#!./(i=8Mj2>&quQr-.$.M6?<J+*.fn*!P"*(3[:\Fdb7S>QI'6M/:;R!c*?J9mB;FS869[sJJk5:),U4[:,tAVh*R$;2
%`l@`k!)aqUJ4<W1XQ/VQ0W";=`.>i5Wt8j2&e\bgPG!.tm1@P]+K7mjlIXgVMiIoCEqYZUT*<.V0-QMta)k>3[Mmp#.H6Y9Whk:d
%Aes:qLfFQ,i`$;'!5'L@dGr]ln#;[Vo-$h"V5\bMjN7dfXs%R4dJP7V&Y"_eO.%8BVH\:c$6l]41rSs)p.A+<=tpOJ%>kK7?k-dL
%'C/ag:r<b[@!(*+LrH>b:fYo1JhFtA-K>9XcVimr75Wo02*2\7.B#IN1M@7[6XVW[ZN6.m63:9KVEe(=a"#@Cl.2;7`hk\MfWSBu
%9mOsWQ;Z=jA^8#I!,FA^o)alf@o%_02A;CL'i1ZaoHr4(!#40Sbdg4*SGc<RF-al<N(V#o$pZP)ViKfsMnj##!EXot9kBC'Su7C5
%0MMQkf<FFpCJ41D(VjQnU$+N>R,#%LUMU;kD=:m"U,*IdoJh%p&srl*EMtgH_FiD%1ss.7efmK//L;Rq-8g`*UL?h%irCdGE^Fq1
%-1*N>V`QSik=8XaB</-9/*?]U/>c9#/>ii,KGUD/-o145&Y9i</QEH)BPWO[YcFFm%+A&'[UY]nnE<SfAJC7YB"CAthQX@1'u(N)
%j6%'&K;a>u*+8>2A"BNN@H#r(a'?f)PPHDZ4;AC8p]_@6b8A^92DYB?Oj1!;XDO&8])L4OMG0!X_E1i:>dp#^WM`Bd"-D7KrGiNc
%]=&.h8"XWn[#8"A[9[#B29TJj94#7gW`DkH-5Y\Je@&SL_BJu56i\nq+ds)H^dKrVD5&f*[J(elYG0R4$8EU-._=-[[S"LsM?+u8
%7u@Y8]=<F_8oaWW.b^OEnf2EL)Gk6'$W&g+JDbmS0k/`_GMF&Alpm=sh]<4De6hF!X-#@3Gekeop(Rg/4FHOdE_21R#[uDj<=<kO
%ej:Y35S5M[SNo(Y0Mb1d.A[%lN[V'mZ5*]iY3(mS?'$hH<sXcOJnE7Ac"*)1'OBa/PU(,\/J^S&4M?mMdN$Jf`j:u%H:Kb/O'\90
%U,K9p-NK*+@L6!kefRdL[Z"*](8IkR#Y`ZoD8(-J77DAmX!MEQ,&&2G'7_gS8_ci._H3IbTY6#tr<g;&FB[f(Cd;L(X.mT6/%3"h
%(jSI`<Z;[k$&c>')sg5HBlK>ordhI3Z8HJ0<9#95-Hf>3E.8BP/'Sb9UV](s%5NI]a=G`0DN%d6!eVpdK8Eg+/I,,-IFAO&7;W@Q
%B`Vq_G0D\/<46[j8roD@94:2@KL%Z&&O/HR<E2,\'['?WK>B,afmnUITf7dT!"%9mJSEOfei*AQ;e+Z>G(9VW:P+t)>e'j3@n<lZ
%/S-RZ^QC#X<NU&F\ZG_)\g*h#Z`=\.8]?ATMB,<27T*hlX0bW1$'5d"!is7[[)i$Pp5:4ca['h"1'5[p*\ub`0EB)@)*quXN(5+9
%K/>Bf=R"nm^SogRj;^^b^r.FS5j0!a$GQWNlOk\.+KXZJgodgEW":2/aHS$B=U_Nu6&Vi9YeCAGh*i"9o,YK9!RdgSL2C'G<jX%H
%&5nCn*'fZ^.(b.!8"#5J7W&^$Ro#/ji<#f6)$q!_BjQtM#-b$p!!`"ja]MW]%@%p[;j1@&@,OmX5n-.OLFf:?QI367pF3&2(."PI
%71aBnJG=4PC8)G!4":`7]<5:[U!mNoV9r=(2Y*LY!gnQ]=cR'l0lt1jWur?;0HO=;EH2KFoDjgNW[NT&aB`*uV)+hd+N+c*a;'Lk
%Z6n"pUYR_M8G#[YUaahj:C%\&=99$KJFX<uJ[Cc;Xq@+R=X!JSR[H--3D32H5kqZ`R3KK0lk'7L2)Am!+b;7TUg!pj%qYu!,IX`U
%_FP?0\St-S6:uoensGUg1pBA6apG-a)-ZI&Ws/`1d%%>sDj$C`q2pt>*6L$#:^3$Ws!#FN+V:(h>u]5&PG\XB\Yu5;G**#fC]^B:
%GoZJ;c.rApT1HZ>]N.+V5(Jb=_MZ2'!bbkCKuA[Z';MQO+dilR(;_qjSUDA0$2bllDDKcf8q3dW'5l'*`ec=:/=g"4+#kK[P?n;8
%OMZ#U*(Oum.8gJV4?V>TARJru"]3Dk!Ks:Sk0S:'nZcZr>'Ij$K77PJ)[[6DfDko13YV^7^j7_(i^+5[!<1.AjXL?Tl"qh[m'n8"
%W9Fpt]7A\R:W`89^bk(;5=DW\[E9@\:O`FV*nIQM/RU-q;TEWH8/`dB$'b+dppj=2n[,KP&o<956\:rXNBWMSOMH)f./'9OB'2Z;
%0]A9VF_(Eg-a6"Q1Z$+"@$s;%0KSIuk_^c^GZGSY7I&U<_@:J+m4enRc&U4HW[*[tAom0-"2W'LQNfRDQl2Mh!6&X%Zd'OlP3,E9
%Mlm++B9L:^5b45MVO3(&m&)%a/@]bQ)T\OCkq*gX'#Z"4'.m/a3Zdl>89PbJAgnJ*5Qt#3i1CU_MPL0=34t&^V(>[]H`eCX%Y4)`
%',N\UD%dk`#lq%.,ch'96X5Z1LEZi?I&0CFNIZR(p=7fk<'f:lD7N&[:^\DJG^rX$f-*D;7SHNR]Aj))VYo01[A]$MAZ;eg!<rnB
%6F.(m`.J,8BJ-*fidh4"R`%U0f]kAF##$hg>h67tfcCk3ZYtB$Caip:lQOM&YfQiZ2M\#AKK>cDQjlg"dbkE]KXcuT6Q1+LTZPd9
%L*L1ABn.otVlG!9.JBPSBHd'ND$oUg9A0On7,Wr$gG/sZ"DD2WWtG7^oMMm@W-7gUT8DfG90!?o<lPbD??.b'4LHOA$VLftfH/Ht
%\J,f#(bn\a`C(>EV!B4T7\7':_7U\Z+%diP_#jf?.l"-Q)7(M*_-b0B+!Bh(l;;.BY_F=FDqN\d:d3$<"8tV<8M,`X[X$M%eF]`?
%<F?mT/B.RoU7I.bb/s^Lr0eZaVp($tiPcg]*[cojg87.[maQ7n\,mD>o+>Y7R2#FSZ7G/MCkG*tHC<hF6;7e\W,dGE;B4McQUXLW
%X@=*;'B[MkXO_%n7h'QcWgi^lUVMSgQ)rNOH3js"F]/987k6bU2DW>Uka+p^9QIcHW8tMP3,Z0`+_NMH]PkWnQ*DC]W$=-3>aLI\
%`DLM]g/NlX!\ep@dY0bo09[V-,,nZgA/2kB/eue3fIDXBVd:Q8'L7-h,nPG+^ab`.d9mSKjWHdSE@t?fK0^u'C-2fa81AH(Z16Jn
%7f%"jB;F<L+`*gG:=TOTjsE&&YU.7'?ZC0C=r]k3U$tp<$-VK>FL:Y4">&TU+K[%WIjE&(-/fG<(79"TK'a-uYFrd0V4aZ9X&AJZ
%L;+**"gNGU5VgfV#3cbO^eEUAbP=^d!f[Vl.#8jsLfFM>L^?n:"p*0$_A]SdAJWI"9a>t89%S]Z)3lXjBiVZP7<UDW6]i+#8/m1C
%(Sn%)?K)`-\t7)ipgK0.fkG'[OK]GnFNm99.'a7W563$"*e<c(0UUN);?W$]GbWY=4=/1)(1_5pKN^M,U')_g'jt>nkB=F;UGg7N
%kR+ab\GgT['[NMc4Ng4eINu-O0bJA"%]gr[$RSc'Kc#-"<G^#=Q&p,K(gT/2&7pAY*lF%EV18WkT`L+7*(!$oJ>En-i"/&E#s,N(
%TV`M<+MmS:%f.$7,BY77!&NU4*t"`/.XD48$ZZ1Ik(j26*Bg;3SVlZ7$3K<L8/G$&ORZLZMTYJUGYoW0)AB=4kacn50_tnY&VC"r
%E1B\iD$_KHc]L7=2EYdr['>Q!0=$HS'Kb>hO<8t5_;&?:X@)n$NC[@#`ftkA>2n2$\.Bg^"i*`gGrWGhYl[R`Ld0`8L#N,@N$]0"
%0nC()N*<I`ie3K,#hm4[Y4%X+72]!8=r*DP&ZA--YR:t8n2-,:(9EFklu@I]Fu,lHAbfsY:_K-MdduDq8YE4a69N0ocq?TL3d7AZ
%'Li2j[j6gDQtdr>d,Mp6o3DWubc=hk_FtQ-adUdH_b'<X9=THlFCT86N0C,!1]i7!cmM*R-30#&9:#0li@0j)K!(M:kKHt&2r./?
%Ag^to:6j5FR`q`gH";g"EX7*R97r,B$HTe>3-<.XB>GFqrB?#qh\>dD'#lA!+a?%1;7#=>_:6)uSV?(I!&2)Q>R"IF4EJ\VVp'NL
%>U$Lbi6<eQH+0*;7];JM/Prd3o[FJggtC=$B#Z7OVn>5,X<9BGB8MC1&LOFG.T14*"__Bo!F/;1,V,-b.]>-<L!Pd!43;51P9$(D
%87N)30It,2=u05G7>aT]#T$'4Wt<8^d@T8kVX%Q<op#G0O"'lkOs:Z1OH!<ARe6(V1U[EYp)7$dP<>Q?qE5[*?1J;WY/eRY1`L+,
%f2WPO?3^$+Mj!%lJ>\j13YZRal#L$-\-...@=:+E2._*lKjRA9[&dr/XuOFeY.ootM3JBtRcqGJKg>TU_N<.V[nKNblq&U2H&j_]
%=gjW`(VJ$`1fCtI`A\,<3dR$&**AIk$,Ms^7uC][&K\BRE093hLsnYaTXp#a'`mSN`+jE0qZ[%bkCF6@P(Joq">bn)(f]!F*J%+a
%$SE*#-=R[4b7V1(>i&Ngbb;Jfl'aiHZ\'9l80D<8,jLj,De8*fF>)LG?qTYe6OK&"r+TDD)KQ5o+'d6"c?AS8>u(^_A:X;#)CeW_
%;8IERbpMPR^npCKh?)b>MXX$>4E0caUrhkPAJ9utk`e(jg+3f?d-![a@8KosYNI<sZ,<5E]tjM5Od1:7NhaiQ(kY[NIfMs&NQ/l5
%+ADqqLPUWrO>\r28toY%n8:1]Phb6]Td!,9'H?\WgnJ%-G'6:&-$lj)O_N1akR7hZ!;CmAo,t2E_C>0[9qsg)$i\WE&7nJbC'_4=
%Ma6-aG7mbKd0RZ'6&C+`>[akSoI)j@DXn'Rr(9t9BN/FTOeKM9?jU&[-N1c/'&DM%E@7Btb%^i_/>#pRl8Ue<6Z`t`D[[6R@k3b7
%`iOe^SF@tL&_.@fa,Rs0l1"%n8g)r$Z6r'Vj.h3K,F==_Lk?R'A?rM;V[>0t&(mT!EijnLDA7K\kKms4LgF<0Fd=)BN&q)e3sk54
%5*F5P[#<l_-]n8=TF8-4#%MhA>\79g>m"';MYj!%J^0u&Rl2mQB[QJ?]bZ]##dS)W1\29^-rL5h'?K\(ZJHuB]G,Q[7>+?@J/R%#
%Z>hT7_>8gM$EO=MRuu!('4VLIPXQar9s^E3TToa#TU0]m<,3mS14eG4!<ODX;.VLEMW4=ek<Yhu2MtK#4:HqHXs2-KKarg>Fum#N
%LDdo&reL+X;d8=&+?B)@'Za,mTb*MD6S@$>k"p#TlP=.Q;/b)paCBHihYG`EHX@%L5--HI#i5W-s+@JZ!ER&9K,uk#(-._JN!LuP
%)c:.!&R'j3>Nf((]WEH;%<!E;Hbt$G.6$d>(oB\>mQp)S)YS"?TT`2GnhpqW'HCfV$4X\/LEaX9"@dqh[>Fm4o\'bf(T%cr/o4c@
%iouSCNQi@IX"D0je9%H_7?F,AU_cc-@psEgr2!%m&-8Qam/Y=-\cY#'cnUM!hC@[M7o8Hq87&RK@EFV9Lck<^l,??5H)Zm\IM>"N
%S`?/6@W0nXIEut>\!A26Ja4BNGTK0\"d#ZW:;M.k#4`n_)XJ2jcS^9Hk;ga,,V$+!pjgK.KHg1JR52G0Ma09kBY5e3V!%!*JO!o/
%F*[g2S0.g4d*B/X4fGdMP]Cf5P4(HBmAWX6-Vd);OYPkEMt\ku'q7cY_Z6ej,KSiUkYVaE<@"`o@YkdQ+OA5EPi\rrq,'_V<PbHf
%OJ`^h_Q,(Q"#7;];hSkA\R6tf3XCq%_H9i!&K&R?#3LG0O2<Y-_5J/X'l:$%-(PACL%R3e*Pqi'2EGFts*0&Ko"T0l%1/,`D!;K&
%WrV2?FEOfo4$B%"(U.?XS@u2d_)kbbfao5+(P=Ef"'>_%b8=9!jtIu0![hAL=R@ebMp4*VN+3@H^Mp/@?j>5%f[QmfOEC,?;2`e4
%i7j;IJj$0Q_?XbYY1]Qr[`Bga4ZHNLfQ8c3!lPhG9WpmPG=Q$i0qdU1&tf[T'/[Wr`Ls03!U:<i#YnZ+`GoN'#N)q._$H-/Fputp
%oH!D'k:h$UA_[o$6"#rt%h7@S-j"7&7m[%T(7e&\7U\Rg%(^/'F<?U^$D^-68E_hil4uqtZQK800ksYW,P1t'PR([XJe-(+AL&qA
%dLC;4<QY^kbpX'e+k7]ml;U)EmpI*Rn!FK=-VOQ(nfiSu`=ZMG>g1K?#:YQRi2#_N[P$J]RY<+3K`kn=b4++p8kC\fnr&F&KN,%*
%0qpVL`'$^KAaEuj6@P`M(Mmn:NJBVgCY"rA]qceC`j+)NK%/%#\H3^jIa8mr@h'X/,,0KcCa\`[7.bU'_mG[`?q>._EFu.k-:&5r
%PblXRR\AaY-\5.FeB#NIcc$sq6&"YX2NpNgqGF0!P>rlhCL3RsHG)irKP7u2RnPNAjYKjWj-)irb:*VE))rCZOJ#`7@pT7mFX2VU
%*fLAP@9%D#`FfYu@T@`g_Q%R$!L.eJXU:sO5T)S0/uVIgT&9Vp><mL#<*l_b09k2OmmIHn#fOT#.jZIk1GLOT\un#_"2Gap&"TIt
%/&]*!fM$T+OA`ZSOoqq5cpS(71JJ);jAGGHHP-5(W0nnc,A!,]30gpBnmOB\afp"g+`%3fFJ`3Z%8:p9K!iu9L)Z*Ca5V%F09]Mh
%AqQ)e@NG)I"1V6?9YtboJ:BH)R%,`_M:32/3Y)8PnID95I)L7r?XaVT.i^@RO<H-L@jXIH;5Uf.jU$9<KJ6%.d'0Vh_"`KaCeZ0d
%/d`k>_PR>!T')6tL)1H+1^c4S07[XqJQPg$-&;ps94"=q81%L@,\DN5,L_$dqU4%F!BB2NQ82OH8:I3JAglVMW`Dp/Ol:ReC1NT9
%DIb=-`_rU[)gk<BZ,^h,8#)nJP;4_q7N!6e5iX/@!>=>9Lu*8*Z7%**JcntN#V&4q9O^`cZ]HAsKZ>>eM_H=L9Ym6<jY-0`EoDhK
%MN!FU)b]Jk&780@arccHEuX4>Y\3a_7dXXrN?MsN8J5UVMj+3R8u.6R5b<(QlA_a+kRI\c-IFhZ]W7tl+@Bf*-'W?XFca+Ya\GH)
%\iC:c#aI`m9;#"eQ]f%D-\,r6]h##ekCKU$L4$1n$%m"=<?pt(7?&4bF%fO7nOA5\8rH._Qqren8p&C$h2YbEjdM#C++6uR`Y!B&
%BgNJ5VK[7Z8TtuFNX/0\"2HCI+E)=VLn^WLEGW'TROmE/UTOq7rE.Gu=nXZuc*U*CXt[UK?EE79%A,En9N5bZe1?g6B2]qf,48!h
%O58kN<qs(ca,+&_FjQ(P`GY7!%9)*D]o"-One+e;FQCqYd<Z!E#C=$R@_%3u[V/p@<k2`]ACTj:DUKe-1#_%b/OCl0.^k.#?itMU
%PC,HBkIWJ_B:T.U!OO_G_M$?q>G;pW6+`#=,&a7>'ESqDX_-fH0J/PoiTlSUhVH"bL9STk,+R[#4hbtafuo=!r(&J\#u4lo`gt!.
%dt:``o^]l$M\/9cfs>];jJPktjRuB=La,B%NT$\k_>qQZO/A$,43Caf;VG:lVt@W0>Vs[WiF:W?(X?,i%'[$`WpcUR<SgtPA[&%l
%dt+`Pl$g0D,i$T8F?M\)S>3L:Yn'EnN?AB.-IARU(.N2Ab_j1u"`8H0^Q-C?F@E<;ObY#A3+ZXOK3&FNa0$&rDe.hD[RrJc'dl[V
%&[d9HN#epl',[CKZ0oi`(_uC:**UH=o]T.)'A"Bf$hC&tkug&nWg=dgP1MWI5ofaJ`2cJ`3YWGFG8f^lNh_^UQ@Pfs'\8j"7+hid
%J9HguPXghq*n!]m&n!`sIiJ9nT$*/[\9A#P&)W9F.u:"8?]lcsE<$/aCcG*t+:86TSBsqX%RH(j/&+9GC9:[qkDUf&i+6$Gqs<1Q
%qm(NRW\!t#^KG0!O*/<C=V\TgO<SZof(XSHUD&A^=`cIo#0=?4_9sXq9K#qYZ55LoM"%='Tb/$1eM:C`bO)68./>HjBH8)3T<h!p
%F&-RJ/3M*3oq*=4SBVi\Q_NB#kg(00q7pucMo;t)["G^<F-PD!q-gY;j'p?;@XJ>,bRkf#%1pIjdjHD](.;R]24U>hI\rUb_f%$S
%iYl-]4%+HO-=2iA\"#W#WAqk14'L)s<\KoeL"bBmTI:U*!fb?$,EQ7%F=*$3e?mQb*e'h2c:4GIGkquFG!>!._<21lb)dMT/$rK*
%o1DX=qFQq<4T$)@c(uToMfQ*!/1R*3EO.\D37Ym3gQ`s7B>R!+0fj>]`]?_H$$@4^%"RH`T43b%31Yma4Gg>G7U"J:(:XM,\AQ_V
%6N0:mE?un>R?4]V1N*@N=$-d9e0(_='irK]p:g.A_qS>4A!+9>^VRE#@[FD^6)bq_+dADh1I3HK;F]fB,gp-^l.&d$a@Yt#dI1+B
%TOQTtWO73]4-.\4[b@@/[=-(:l0h=-8Cm2r(`k/^f2J[t^IdH,UQ)*&r5I)jk4?;u^n$P+^_.b]n?%32=Z>\QFGN/eLJQ/L;i.,#
%0\/opYtb,o&O"'/RIQ2.GDdK.gTM:q,ER[2).:@DX=6EX1-k8+.&q'"]/aJ)&P5'CJFam5Ck`#Zds?khStIQO/@N3UmR3*8$B8S$
%Z4Ab##.TuDq%2o+DAK-(2u`6ORsoYgRBB75(\\8-Ku2C[M0HJ>oFm9;[TP5_Pg5MR"ISE>1%EQF@sDZslu-/:/_:q6h=DLoneHX.
%`+6J%31j6_iL(ll;NJ&i'?f:VCk29'%-MiJAO)"sOg64t&V4k#T0[P7Fj-Hr52<O"<1V\32G@$-b'Ai41=1R!ZS0]<e%[oSK`#/)
%fY"a/<R"-KHJ_RNG>XlWjPqe-(Y2cb-^tms;Hn7)Gm5p5:,@iDo@\*$`&mAI>n=X/U%kfm?V4Y_Idnk$c$Jr75b2iARe<n,0*O0%
%*1\C-"TGBg9A6G5787t(C+ES^OpDXAs3lS2V!!W:V]F)<qV>a@F9KQts0RhTMln@Bqb[Dsh&kO&?W__p&_.rubL:oGbi:GPdX-QC
%:jS/h=8h<[iFY,l2*UDIb2[Y::P;9XrJFfAdnn*u*WJ;rZA9_2DSL5\_[>:%Bcjb2B_#LqEd1]M;RFpGXP1csKr%7G*]hRS(_0dI
%rL;l*T=/BtO>9U4\nmk7&niR%Ed'5q-_0](EVI#WlfmMW\dto&p>^%-;6g!Cb>nD+62*t`PNKbR#;b#(`AL52>O`\39R(:6Rb%,h
%fS;UNXG7mP?XRaI43"7[dd,I%icMr?].9Y9Xh:t55AcDsGhA9M]?g.8\]EGP:UjqM`5KPH.HV"B8!)STbflGSQP\6R5m"=>?]14$
%PUXYtgnA)(OL`#9cY?QY7b!bE*K9LNmOot'X+O[cY]?ZKb5$T.C3i:PIZ')tH?ph?;J0NJPE+pB8(^Q@_DsZ)IDF0%[Pp0m3PbQ9
%n_fi6ojS?i.i4N_Lnb`+Kr=Ap^$-aO$-(gHH<@!Q+"58(4iD?rc5@?2n[9=lKD,Gn?lN-s^elP+Mbm0$KP_*^1:Q;`fhk;a=\V&g
%B4"6=1Taf,O)1?@5/V%O"f>i6o5c"Y4e#sQLi@1.$OV/C#Mhq&k:6f$4SVu%ntFIg-VFj'Odr:3/02)\\L'QeLRtt;`"d*#FY`f8
%^)EI>9YN\9f:'uN*7'A#`lQF_<Mi4L:`PV_\WZp2MMY_+^VJJ[-"gn=qNh9!8k/"cH\tEF=KaI1a5E^oK0Yuc3ViI3c[d'gWOTeN
%ef7d]n7`%\)MY*m_,:q8!2S@Wb0-defQQU=n`1o*hA^1p&NO-:j[>C[_)qg1V8WmM<;<DHY>N_6Q3MqBKaP;0hHiDjkJ)_'02Shn
%+oirOOQ,LMBXJ0heVC^3#^(poX9Vu`P.K>lO1_]r7KjipC6H0+E[mPtK*`\lqSZq\Ssu-"fpm!F@:bILA=,-T3<5@Dq_N<W1FnQ\
%dapWEp^+FEA8j7Lcgg'JTj7%t;XBEl9!l)N7D4q<jDh[7'"\14]"D<"0`^0/-eP7d?]@sC?sDe[2=6Hrc97Wrf.09`NOmcoa<Q.s
%&P4l4l5$X123T8&=(+sK8aNM=/:MPo]C#lai,Z516k_P_nJM+>9bt=$O29MAb.]8fSbjjp6WfWjWhMR8CC@rn(o_fULT,4SKlKoR
%au?9\N-F5GL-J3Be:*:DeF!*Ebr"ip5uRLL2^OglJXpB@W"T*)jaAkKJp\8-*^72N]QD?TiQjp*-T8<qc]4\"Fk&6R)DpfZ6CmWX
%-hm1*rm$hd`oBZ8]4k"K8TbGTI7=r!]tSl!F'`#uS&5Xn:kBr9GCIr6U0Q4:*cj_jI+9+sC%/`;s3*"4WLLOYLVH"%6c0m>]LDMO
%\-ncIMf%()*\*@PG@"0:(F]06[q@T*WI3);Na(!/Xhn2_lNP,P)lEQtYDQF4%XrltPcFP<?'9oN3'+a),dcb%o@+ndC058L68sAa
%]Z^OS0mDF!=^,r(o\<fhAj*+s4(&J$Ya&.8m`]SH,,,N,MX:*7\,\<hjS@Z6dk8fbIO*o?T)O24D8)`Gcir5C[iGM'Ji?KEZ<*7]
%`Kj!_[O_ebHkrVLZ?/=f]iGi\qdM6HFR7G3pEWUeB!KRQ$l&"U#=j[;=JNrd)lF&#"m1SOiTb;b8hb[:1l/DEc<r#i66g=b)i+4K
%_IA\"a.SB?7^YEE!%34sZ%(p40H_h[C]k/'4j@21UCGNFX.!9]!<bhdJhBP1N#uAb"Sgi^h!IHMWa^D5,3CPXIIk.jI#LBUXKhIe
%Psm@8dm-Xcfa@Y'#TM^8*gV/S6qhc=XN$]A[H./c0U0\6"^D?,H'W#oNX!!8cM?^FCcqF-cuO+\@m:3");anbo>QN_T#'co2hku>
%TdibaJsYG.9/TTj>M*W'W'a1'`8.MQ0NNn;gLZLd<#B&815Cm_PX8g7cJm`_c2c$)p7/(%U;`(X`918ar&AJu%6GT9Q<l=R`\CL<
%]<5Gfei5[p0,=H%C!@EQ*L7r]HQWB,/E+fmN+Eb7a)]cDXdL&"AdodB>aUu()HA/=lF-ZoCsHllG66R4G,=i\OqEA/VaQ6FgK5GT
%j[>5`jdK>NZr>J"q$mT,RO'WUoN`!hF%t#e^)3_Pkr1C7PY<VY*^Ucg@&pJM9@>1[p7&J,-d'(N'&Acd5=lb7P4XD`H21nLb+dqA
%m?tZ"Y1T^i"Yf[A_@%MtXH_WE;D_gDOHmaEasKN(T#NSS9uf'HOJ`+5cE@L$cp@f!eWAt9KVlhb'lC;g!j!l09*$>jP3t0l(",BZ
%I=l"Z3<3X86r9H0==7d>-nnf.,,A9k#M0fn:)KA+ETFQs-Wj*n:kJ@n4XW`UW_MQ^9dWVKoMc1gHf,L/r#-WaA4K&Lk5MoN`bk5S
%@GTge9)%l\@id70KLp.6:E,_,9R\hC6_uDdg9!5d,<]$/TTg@pObXX&l\_*neILMT-f9LZj(+YF=2`X,YEqKR!lG>H^i2[&>jmeJ
%@q2VpK3oItF^TWi"</+W!SliSmECM=[si`3>#tkIIP:LA!1-#Rk9hnhF4@e=nHh\!;bas]-nQR_=.QX0c&p?@8q:A'#mpS$ag?Y2
%65IK<P1BcM_g3Uo1"l`<`DbVSr%2[ohSpqIG.#Dt`5oG;l1R,s".^.!<C>4K_>lcsI:S0dSA.Xn\k^D0$1ae:9^uPec1,m^C!T16
%(fQ"m8c];_8&NgZmUK][=csK$9#m>T<1pU)j0RE`-[#]qF`D!+Igk]RM(CCh8$G)pm5MfuRd/08&!Gro@@V.j"\(DP3,Q+"/7YM?
%M)u.1PJ?s)ppB+LB_N@7`eb&\?7Q*)ZqJ4oSeUVb5WtOWlVXT>!s5-YQ'HjiHmMkt?pOdWZD&]kORkQc=Q$]DOdTI.O[p4<07th:
%4_Bd-E:'mWfV_7E2Kr2@8gDtV3JA)e"m2:odC8o/*TWn@N`'?[<_/GDdJIIFZ>c(1c5g<%pP)VG#"ZTE'#uNA$n6]4X](-dcBs(C
%9;7ruR6Y;K2iT.qp*"=5Gn)hJXnTmak)lRlkT]L!d.N8(PB(!A>A08gklEOgOdZe`lU`uI'bf7++pCoiCc@?+N(\cFp4]8^>'E*[
%19[5;\n(Ms6C%^r>fHPQ.'tek-Dg'iapPR1B%3JQNQ(Je!kMWo+UpXURh2*I3FE4\ag66mSRAer7p`002:SDjUSDeue-:9?[53)`
%.go/s-H\4RCXGj[k#Cc92\t;KT%Y,aqR\.f'GHl7.W1k=lA!L`#Z/?ZPj[1[X2/q3W[0\.D9/LQf?Q9b,`+\t8QJLriEZ-@K18[H
%9IuDq5!jTGTNl*:;^+pBiWO?&1SA4/W7]?7fY`<n%U&i4Z?T<5_-SfeI5Ze%;9auE$Yn$7'c'aCcG67Y$0lSWp1Q6='*,=9g9gE?
%e>"pSMGb`]Ge($^!*&5ZV\TFjZ+0rmB2le:Pi?S%)71+uWs%Yt7B*0d&gYYTs1[;h^r>;OXWr_iT=fft"QjA&a7:"c3hOt6D(CK#
%OhB:2_&P>"2l=&U<qHW92-$%kb8^X5TcSaXNd+\qT$^r1CBKMQZf*_CqnG3[Ob4[=)[$6uhbEiNL`k+Y0IM00Q/E17$$iZ)PLA?-
%QA8hNS)PhNpD5\B3;Wc0O0W`K5^BWX+Tpe.'OXqF$Ju_dU]?m)E'VF8%4fOrY8F]`flPm:]aM6d6Ocr-2en12G1_iNkQVk-G`07\
%;2Q=b,q2b$5&>3f?r=gmVXmpS5O%5S"?i@d.jAYoLcPDS5RpfF_PY,+IG%KIC!AEB$$J22\efqim[b64`=)QYkBXQD,[2.i*,88,
%7ll,uq)_iE3&!sdh[p"O$sTkY:KEPJ'sl9u4(t)o$@\llFOUN2l%dg/DKDTDSVm],]I\4C82^n)=`Zh2!4GNo]sU#HSr+B<^g.+A
%b1qHP\k3Q"A4@/HSs`bZnUS:X1WGh>$$*#b;8Tg%MBJq&"h"6J!3O)59sm`M;"_4,?upU6n0]nITBhD'IS%Y3m_J1.SIOAG&;/$k
%+kJQeR;G0PMBOttL2R&X03+Ll!7GD>H8"mrd^EFCGa9I10q2<aO#JQj=ij';)-<^=R-5&oN;knoa;_!F],7`E'Te3?UCr/6/e+u#
%q<'fh\6:U=8"$L-)s29PJUfL1bnZW+2/]:W]W'?'\2tkYQWK&KY&$am[mp3N"Z=A)p@,"Z/)0IG*.g_s`\;I3U7AkK,m32?N=.\I
%01nuNJQ/s$-lt?uV-Bju1'34jc<`?U%l@jdX_Z'>C88ck:("]BK$/kF)l7:sYi=k>G:HR+VBCn58CA2rl/7*ZVi`sEJa<T+5<P[=
%N)dg`I'D8+8DMLce.-5'j$r;l!6T?RP,p]fa:J_Ma]@m#gp\QV1X$.j_,!H\``/7ai%_d^?#40\ZnM]o0Z3tp0,+]7fUd)9R=1)@
%;g`bmd2'W^/(_9O8$]bEZPV<&S!F3<c'>26q"!4;0Ia#>-chBq7bDJ0kr0C$9SP8`rFV*b:uE7;YWSoq[IOBO('5Uln0l2KJlQ+`
%Y6F(!2@;Da-ehc7l&E'i!D;4'N+!UQWJ6?6W5Z:>:o)1g:YD#jq3^7O#3<@Ys5FZL6M;'(RNCNLg":cKNm0.m0Kg4:[g.Hq[)+:'
%^Wb=hN7Hp2QtI;!K9+i<YV1@s#m#?5HO_fk='V/WHP.A]P`N:I4\a'1WTG9G'Pe8o]g`dGY[O.dWI,4OEstt3-`Ld59Z/i@_`bg1
%A@<)O/I'$7*g2_DV)q`&NIXHu"@t[t%TT?o+gOCp.%,(&Ybo\`LZZNM#2N#mD%qUp!KpjLB`KB^S\6[U;1uOp06Em6K$@2bd$$n4
%2N6kkp226DJlSSOT9CV-$0\2*L04)@@O+Ef:s`Z+bCe[a]LRFj#(bmulsXG4#M>57;b^P(kh)ugh3FaCLW1u4)J8`^8"L)us60-X
%:Q^V;KAT20QcUOMT"cO/Z=`u4n\ANu>UF)fT#b(&i$`cBS-r`m*42?cFC/hbo"76.PER!gj@L&YDf,`8=n$L-05]P]VY>**H=f=V
%DXLBI#j;!ga@p$f1/I!TBPSQMJe(DEJ8$%S*$C9Me2hWu14i(JQ?P$-9^?H%PU*q:-#"uSXP@aq`r65,q["tF$J5"ca8eoq_+GQf
%&E(r@Fgc?79Md2MH!_6p(3&`Ch;O^D5rK,E<p"8GF6\*TOncLZ,1uu5*4'3qO"'3k!XR?RDN.VYB2R)6?cR(sVE+tI@DrIB[Olr`
%P)DRDkI-qg\<79g>Sis?)@XInZZ=e*+1`IYSRRN=__;r0$PM5L?<C<"YZ[c]A'J/@!&BJi7]$-\<sd7snO`poI4dFGj5VcD2Pf6[
%pL`Hdjqq:CR4&+gTT?M3Qg2HO9XY[3`]"15aW"gVH$p%,L`MetX;>nO=Z4BYO@^,B3MWNt@Da"+cc]Be$(2DWeNe,R'UEt+HESXU
%=1<;\;-*_=kohOZ-!i&fb'*+1*Ibgk:Z[faB\U`==G3+:'!8NHS/h+;2m2PZ*<=.(AhhH.To_OuU,+#D:X+DJpXA:Oa+,jl$C%+1
%NEhP:!5V]PE(I29+=i$u[arfD]%.o]h7TLOKpE[dUoQrH5GY3k7aj@D7q`P*Am=i;r%Y'&;;9Q'10nJFAu'kel/+\HAR,AE_`\&M
%?8YAm%30F#Eq.4/0QOo?gVqp,dl-!%d,8q&81N*89okog$7KYt'MaP_9'f'<B*m?s>9FS8ms#AHjD%>1/_`lljbH^8I5NH0D%L\5
%Bi7bI#"oueZ(0hj+Gjr/Ano;M4Qh:,1$d'p-H7gtN:8\L@cP*GjX[9TQ1Igj0_lDj0D4ThL1Tm@bDmW=%$Q\?Y6&62';.lH!RaQ!
%aIS?UPR9]c)ShO/TOCh"N'qF&S3Fjl.eOCHmJ$s4NZ(u:'MgDBlE73E,B3dBfsc@N/0s3_E+Qa\2Hn[6,6gNX/=C[?RXP5_f*Tf)
%*D/$Q&KiKK$$qIUJ$Q>C=B-$DgI?tFG>%HKMm$YEb&QoZ=a,qZTCqSk5dODlH+44AABXQT>04%V1[9u2>e5*:]G[>+,j(oek@+SF
%j)hGO*4q:bi;2%,RC#K`l#gm9_m4ZS4\V1A$;5sdrb)A$f"i%D9jiL8DjcSGe%n2P:b]dX>A?*n.tC5o#M;3*W+pQb7r=j>Um!_2
%hSj(BMlHJ(bnC<CDPfH)lXR1p;LT]Qd`._V:CD5oRL-XTrL\e/GYI?^C-6)QCjT"KR"/I&4G@AS@T8Ks1sQgCO@9rg[<J@"#t6eM
%MrVR^Sb\fEdoP*jIXAInZE,IYMGc_fm,MoI.0.DOBpGg-+/#tm#gt2UNf>]3+P<m:'<Yl#kE?2uC/0B85oMBdd_Wh+`a(dBZ=p;M
%J()=/'MYfZgD0W9VJqVKh,''>1]XWj@n,T$]7!hfmho9OQ?6^^:DkPL1+gf^FM\mKRG3o-j2I4;-W<7q#ob_f-WT*ET1n(HTp8Oe
%OS4p8H*;I;!VsLPH]0XlRISU,L=0P@dI+?"rd@6drJE!3-nt`>;.U5C5%EFB=ldr[1FpP]Blt'"h7"8RcAg,pga[j=q6Ys_$QS,G
%DXg&GAK5Y?jfmJ'4%$TMB,pK;J['g)\eb7a,8I8$f',j\Um>+ag'bD7F,IFO"9ia(f+jpa=_tT7O?oM*Qo4ur8T).E`T#D(8BX7u
%SXMeL94MUR[@9nqgHHh[hK1MT^,F8%^qd+SVB8)T_qA*^2ZR1^p,jpOV0bXNXJ/`2o(j2.EtC@5<ikL#l*cd!X5rt7]M[IP`ISqG
%\A5,*ZR)S4\;cb@\rLd?7Ac[_$j!fQ1::XVD?kI&ZCF2K9#`4F_AJX'(T[=+5m.IT#@=HjbeiQE"I:lN:kFBIR"__DkAh)?&p,$K
%J/cUU]RA!`rR7l8E#k9qnVcB"\\e$D-CJG,9EkbT$CWlS<`[cXAcaup0fQP)>pL5n+R%P)n:gL+%[h0kTV&d8AiL5m4'io\D6+1A
%EWQtg0ggEOOLqHYef-m#h6/@cEXnJ9(gdpEp[W,N#AJRin6=,OM:/6fc"bW00k.q/aDc5Y9.+,eVX$`QV>sEPZjAoW(8k\Qh?deh
%B<WC@).q_q(HRlCP@F*84f5ia.mR;G:i.j[)^P0%Nf7r\BIjbQadYEHK+)WM:+KjbJPeh)bQT%-6$bH5,@XP9_KOJJr1pCqUjnR7
%'u)`Gs2j1QYTR>nr`PfZ.!-R3Q>V@C_(U?jEhjd2Y>c)VQ4c/+dhX)a*]02U:bZrF$ei?jYZi6\R@L5V<F1R,l:`t5Bd%VL3>o.;
%'6:uNSh.CqYu(S'H/%O9EiUsX)(#,Ma;)0*lO/H,oLO?u&iI`<3.OG%L&?;Xc,&fuGC?o%TWL62G1r59$&eH/E]3#gJk7WV]X:dH
%IR#R3:8d4mQ;eb,8ui@Cq9?EWMY0&`)1YfN:afkY!2jgeC\3E*Pb!cQ8:kXiJ0:4(G[_9g/G&S^.aA-e]-1EL*WVrHDDLd>W(UbW
%8679iS2E:2@u)Q8RC%)S]>k]+4VMhI1F'Hq3)q]]p+$j^Fbs9;O*a,2$5VVN$#(YuGn_o*n+'^"f'#3GM=S8N2SM]4]O0&A'"=Qe
%h0I&Fg/rMA$.9,H#hJiW!CA?(rd0\h0eQs-'d'0G*1TroDh^PeJ1Ot*?qnJlK#7.h,V)kT-TDWt?%'5i\=:ul*5NhZ.a:Oh8JI6f
%I-e&[epiNUQ"H-ZE^M7/%0@5?DQ@@h"_dfP1b)"Ggh]"LPXL.W>nW??"7TD>abH2l0<38`Ppi-^:&/*l`U:o-%kS_3mU"-bISstg
%_VJ1QGq9mi"VK30M$3WfP]p?AdrNG!a>a[rc'[oc56F(jE_V-Hk)+&?8"1-5&W&,N3X>VI?4L]\c=3_/)`36akbUYfq"!'\F0HCp
%Fi&&c`L%gM+p`)>m%0#!OH6rgAl>$d\2>JsD"N_O#cZd`i(1bmCiLKS)j&"":'P'k&CY97526`;Gmd1#aEBY#VLo;.1:'n^@RrVK
%b:#_N<OrJ<gtQL5KE&>O$k7Y^=X<XQ:V61;_MR#=7q8?b*mFcmk;\[(<I,.Z3)aX#3t`fPM(gY`q*=F*;VD0DXt/q;+jCBp>Cfnn
%XS.job)ARiHs9At[fAFXQn;JO31S-88DO`i3LgAb[W:5FP5;W,fa;F9PT(m_Dc<A?1:sH84Xk*?41th`0180.%8B9S'^l[f4&2i8
%F;9AU:'%"YhIW84ZgfM<1YLhUYS'c0aMYTFj,nXGMb+l1*fYQQam-ea[$:s_4d'fcbNK<?VA=$edK=;Bou1s?.<%[.cf;(cZCVk<
%I9j9LP2KOAl?1k/Me(>;SH?mG&Z"!aT&6=q#KgqH,9c`QPPom"R0ja[SOUQr3%llVg>I5V=/r^m!HNbRPrgTT231$nD.#n*+a^a:
%1TF@Y,AfC':Z5n5H-Vf/RcWm\A/J*7R;/$Bb62/Yhc-e\"(/VE'6t`nl:J([I2N'f6/qSZ,+6ZW.`oK#6kkpqORE"-d$k$],$TIl
%`8X+`1Q754S%/XUq!XK9LbL`@;34:1e\BMS)R1G\PY"L>EdcbYQ#RKGM"EL5/]gapbc'"O,G3+,-PrbFlHp:QJml)Kh&A3OUajK:
%,AGa#@=G[.VWg'.N[],iE[Xgl6]6W`5as6[D\n?ZJ3pd7_uHZo/,N%"08o!BR$pF"X='mpn2KY6rAU'CT(lnTRpR%<p4sa=d9P;?
%'1.SK#,mTf?8a<)9W4/tE6AV%'9Xn8eIIW^,G!=jDG4"c8;FgjF?`_I=hFF\l\n1GC#*KY"_1%+AoPq(OSq"6#T2%eip)K[bfWpq
%=`1Y9VK6ToB)0M)#FMt7&b8Lsc_B[8Rfqae)2;sj%a`nD$sup;$VJaTeW+`"bk&-adAP!Z:pB_5#2(-a%$A3nUstN^rB?i+r=)s-
%hFh(-'saQQ'&o0VNV?U^INrEB5<uR6namG27mG%LfPs_48IH>\,Ta$P1C*(s`MI["ib@2`3S_N'MFNck6X6YYG]i%Bn&'$_0I+,[
%U/>\%nn!C*lfConkOcW5,m2Vg!990KW1T()pSGeI7T(qKU%qZ9\n"jT:P'r?CP#KE=GVVYjm>Xk-;Vh@J-+"ul4(o_!S4V$5HnCI
%l/s>BklK"1jT(2*#7?JRL\>ob&UZE6RqX8G'jim1=78_aB1?EC(Z.MujJ5!BMEnI/R%Uln4".E5RNLjXaBZCi-,Zl'`1g'/0dMp;
%F]_U8bldk+1c;%*<udQ0#Y<JkOV?_HMO/E)QQt\<$l!)Yn3kP@3EuTbBJLKj%^gaT=lV>8Q!jsM?r+!@IpXKuM+e)[G);<c^pjrV
%ff,VgasU$WXR2cOLQ"]=rP87jh[t/"PeN#(Ku@,OHQe<s7oo.Z?6ncZ\IK1WKR*g;l9$LX/5n2(Kcp&!LF1X8=sl6C?^oRm.C)iq
%K,_IKU8>&fAFfq+\rR5T20)qe(JL?5Lu0fi7mAH-4D4^'>qhdb&UFSIYOcMjHt:gC+D*)G8O!hn]+Mq*]jK&8QAe^cXdXT8gD"91
%'=UnVEqTrf16827i@te7ZE[8G>.7)),r)!ZXC?A'[N.GGUP[/$4.Z;RK.iFD/#'bqY"aVXI$ln7<^TOATB@&L#St4U@jdJ6L+2U@
%4TQ\=m*rgDIe89/d[#aW8TP^1%^MtsQ/TR^R0<;L-5\*FZ^rDLSZDfJP\%g8=-5j^O9A%8a]b\N&&qFE[QKTei_->2Z;S(aoMV)6
%eP41?[W*/9<-qjtj1K]T0i']JU/^k1;!g!<6-EijOJsUjICo_U<*4(c<06%Y*9PK/fX@n]`N'a5oWq%D:dUGgI&A!5ATIl/*F4Oc
%)H97Rc2%Nf'i>I^rLZLbW\'D'Cul!f"e*M=*N(BR)M%%/(;s-&C;H;<4^V/=dVM_=i?7mn!`mbfFO1`^l7&)fSI<q"Bm)#[\5i:p
%i'Q[c@(K'bjO$8Y"DQC@NdS7m$h@Ro41POKYm6S:]O3J7J=487DWc9K?l"A@Sl8AK1^X@fG([=n[nV>>+1Rbo0+II&E(]f(jCd/"
%GDENk$]E-e#]RqB@*ioHO_+aJ4B$<<m8Q;)Qk-EWW=RO1-DK6g5KQ3dCb.-Hp2;bbKMk'4XkKFV`%epQ]bkT)Vmr/GqMM6?b9ft7
%ohfNHABI:lIlhk\#gW@-lAb%\V'*mm*fsSl5q^-:hkVG*pB6c22@o=spQ5+TjZA)jLC'W7]A3@;bt#eaPQV_&$4cW%J<T!3jf&0d
%mDP4hX1lPr8^pW^s.6&WYY"Z[)B]@[ke56=>*#t!Gf^MF9n%PFpU7).1qEU\eUi&=@!:uADHCrj.MqjGhFFU5bXNGl5$B".6H,;&
%j1<T*qhg`U4#fdVMu"&^2^V)gK9D:71;HfSp@sl"%]>3)PR/-"=jW-l"#P9u38@LY`o=UJ]%G.OA0IkH];Z93Y\J!Oi(aBqAVm<>
%75e!JfnRU`%rq<\6ESmcaQ+Mhcftk.3+JLoeOdK!0VXAi"@A@:%[d8G+MTWWSbM80N6',&%]G:1_!h`G<a84a;j`P"!c_7K-p.<H
%6#cU:"PZuIM*<ITMW#jApJB0D':&5(ndTcjK&cQH\:j]8JIr+1<#uB,f#BXELUW^ETE#S@'4MliLcroH2NiK%J5nAO+q.5aPSkJu
%b(!G\po5&9L/23`3ljoCa;MDOZp#<e%hWQ#eWlVW(%q&%[fPQEiul[F!0=isEiG+QZaA@W>c%g8KSjA^X^3cpM@7>tT)am#>rd+8
%&DTd2SJB\f4V[:chMfe.0EO]eR$8e/"!EY<CjYB#3U\>&>rBVm+@R@S/9,b'>?2Ul5VRF-2h=R7%Pmng@,(,$!1</j'#YpGdbKod
%&b>)*'h&a"F"K^T`0iDag7W^<m5oi,cN>/J0*"he@[,/j0;\#>PRaM7ZP!]8+HqNn*X)@0oI8$[PcQq0qRea8C+&'c@kn$pTsTG'
%.kHW\W_)"Z8.-lL,rY3[&Hq1s75U][@R5'.iO<Q_=[=`/&g#o1i''C/7$tN`+\[m/a'OE5s.DVBp,2Da!B/KN+S?HS7-72Z1%Qq@
%E%TS]320ce+=q:ak_mO)9!"!0oq@6dZU7a=`oL'G1t3./&6UPHbiVuG+!<NSau[IZA/g)f<6/PpP*SK;.jh]2!]C<o'pJ7sc6jTm
%MK-tD="MHS5h[^ob`L2`CKrgc#M7Wk&;iiD%e%u'KIR4;(A#qJ-!Qrk__g3-B.p\[=Mmf0-4(ms`YM3a(q_&!<Q$lIcK'\*E9BR!
%_u]:*![KL\<DXO^I).V)QnE@0@:60Rd&u;[69m4r@A"J[$K"];1:/T>HJJ>8MlEhtA*E_tYDHoQJ1$IB"AoG><G-sN6S-bd6;%E`
%(&L$L5SbXZ$tce_bWu4N;e66)\9\'Ye1f7qK$5%S/6$2@*#B*CW7,419B,`7Q4QOt]GDMO#jDf'X<B0;%t^KY^H?_A0P4DgA83$u
%<&B-&`?p`AIMB^sZe54K.3M11JQE$lS/8+(S-jsd3fY#m6`ZdMagubB$+bm1Pnq2iJo!`_ljDiH7tAg["'@CaR"J&9+TFKOPBhVY
%%M52_p(AO!D'&+pl9PHPg;bWT:`WN&%1@:3#"E,F'ku<A=d1);--AS_K1(Z;LgQ9%El>h-KiCV(*YsRa%e[jr!Z,)Z';'Dp*$6R2
%4M9pS=Td<@?aUa\["l[E"IQb`?0T)9S\$[0'_V"%P&5^]P278;"IQ!B"qVI*6BT+OLg5:7iSWWqh$oTt)-HEk_d:=gQ<9=8@o3<+
%!_/saa4:>)kb+71(46-bRSO"Ol%KQbVZ[h#TUi:8/5"nEBo<7O`]uE<js#q##7K6j(cRBc6RHJSWi%Y4-`jD^:iqo?'$p'2_7PM6
%*%5qnf(#f%Z:1>-.)>q<r$NK(J9>]D;Pbcd?U%\A:Dn$V3G=Tpg>Vo;=)Ki#QRF3p6Ppf-V=2=H6#E_mX@WGZME88:lL46hW;KPl
%-f4tN5o[V4A),P#g)amdX,!RKN]`Wra+R/A%d8-i7i9'sA3\&4e6"sU(uSn[SQQ$/3l!OR1sBsO4>7:bg'^5LpKU;13H%ujf61%T
%?F_o7>a!fIVYpfPQr\&57[Rd0r`&GG!h9nKL6McL-\=jl^^N6[IY_1\<P5WE"2_/FOG'e=0l%B5C">meW&';2:g1N]LHoTX6(k'2
%']'-HE@#fF#ArV^asH?A@aQ!B1PpCcE0(c1b66ul.2`++.e-uldKO_ISn;S^oN5k?9+3ei&b@P]L.P8YE:S7(9qhp<k`11i\`+tq
%ZHPp^U0<*b-3.Zp:N<cU'>`n+b%1M"c=5s1q[W$.XlOI2i,FE1,OZ_m>+>%u;W8J=)-&D@(JDjSW!Q&s"&ucE"@_=h5n&FoeqU0;
%WJA$,Znj.)6io^X0p#Z"2`"'`$Xt7MdSt`Y$_ZeN#U0IWaKfEL"Fb@_ChYI\-D]H_XK16a0koV71sQpp42(<cC-6!s9K.E6i?9r1
%F-HjR1EpF'A%"gB4PYnRaim8nK1'neN(3@Y@62=*BeHNj$Y_dJ>]R6-"oaRdD+pqTN@`-+aD$Ad&8p<I-;)6K[ZJ3mbg\$Mie%_6
%cC&;f;]IT2cVX6cA5:f49f#SF#`Zcs[>f+8+?*t,;^#<!#9^,n#OS%3YX4J.8$YOIJmcO\EBEjA!:oXOI/Al4%Ta.3Y3LC43gnn/
%/r27WqVU@`.-/gTETLL0]C_=S&d;D%8*HbaIX[6ui-uljdnmI*WE+&WY9fLYOBqr)Q]Vdb8@]L5Efq+>VNbi%\&g]4XOeB7C1_uB
%N1+U/nHJ04Z0aP;'Yk?Ge([!?"[N0O.<>1!R1psWrlqC.K5h?t+=6!`TY`SmYUde+V&mQ!=+5LV*?QM0*O7n']6fEB&LA`*c2!Q5
%`9f+I!#Ur]&j-44Hm&K`O]"GN,XF'7B*+q3)i?3j[S]l;WsC\c@BtG6gGE%[luGcemDg!DPup]"L:2_G))c.3K%HroW`SFoC_>5q
%j:R08"BL/qn;#1Jeqe4[."JD!e:g$]^cef0+F#\M^R'=rZ=,<C!/$gM2,f4$_IMQ9&tr'N6,="lB92C9;@^t\o+D0s@X"&M'>W(8
%bE@A_o6P.&R:KRaQ0gUp4?dYsZ=JJ/boU7omepI@WeGr5^)fG!F.ubn7^,$f)YNffrKP@KY=AABj.r9`,jYBM@A]-=1gN`Af0NhJ
%:)guYr\'a_Kj7&.DC7/W!ARH=s0DTb4]08Clm"74d;^?f4MVld[f!\76>\fe[#H4NR:S"G`@fY]\7"l0S_`J.c((O26pR>l)S/@k
%H3RelYrK6Y[q6W1,LZB%=>&37KWo9I;`!R^2I4j,`SVO@'ZnKR<?=e<$3%8)&sa0FaFt2`]jrm3P:8ndf2H<m*%bXMEn8H.]tAYl
%8#0^-9&m&;i!(D_lh%$Ok6Ft&#M!jSOdg?d](U/Ja-gKHl$5>n=ON=$+N[U>.8#.bkisnZo%LA7F#/7r%@Iiu4cCCB_)&(oY3QX"
%a`OJ_pdGssAZG.[0Eem"Aa&kpecD,1$qHcqX_]:j_"8XMpBi]3Y>_50"p_qR&8(g:R=+^R]mr+"-Y(cQi")24/-^"Q!0r0V,<4"l
%W?*A/)uphoa>"1GI8J79J?miZ.Wau`==PCCf6,r?VFh$]*:[9u%\SbhY*lLRq4J_n22uX`.'gVOR9A433T<S($O\nSQn$dj+Zq)D
%)Th!f.RAJ?(;4+75:j/,N970'^lY]iG"Mh%[HOl-)A?MMJH10>k'!>f7c>3'!!)9m$qK=>kK,(&6Eo3N$uefS@(EHA@%=PhY#G6j
%k-$heD$+0A!o_p\5j<6&Y&$VJbb.rB&DKj46V3]EP",`o;Mjn+UZ!J[<lE!No)OZEKuFfUJ)O1`_a@3mPb=YU(%VEk[#E7IM]f6F
%?%2.ap(YIT]WMO-#Rh8^@0n"0..*2N3&?E%I>ADh%mhg<nZ0W)q28DW5oKigTF?mLQ=&-0E.X-b_'K>3ilbh"]s<o;j@t^UjpmPV
%'k!GeDKtp^@$Xps&/XET_](iP3toD#W`;Rs@'&U']YT:<r?)Db2R/(5"2bTQ0[^idD<U=KNa*X_#Q4g&N!d4\]od#p3CF7m0]29F
%*0_E#k&A13VW([/OZ>7(d2q5-_)d!_,q'pE\:q2['9(i@<)'f!"V(g<l9ROL3(O[.5$^@"3+:dpbbtf'nXD)K,I;Qd8*lTi(Vm1@
%ka84RrR@;R'UdFOR7iNIfB@0B4+b_OA,t_$!6>i'o5@[i*ll`DBaQD=pNk$`>d1?t)OZ5HhV5V//i%fhpf[+>[&T-qA37TP4(]uO
%+Xj+,\B#=J]'MU+UX*A9(,7'8e8,qmA<+od%:Co@]DJr+8;Gb5T$5=<-(Sl\5#6-1ACM5s=#(a&0\/[gU*D<'+:W,l8_0#,*DrTr
%'8c`,2%O/N:I^*G/0)=4&A(q3::f"#\8\tlp<-bH3"-0,fTD0$0Z0O:E]fhh5Ch]46.9OY+ZXjS+G_1]GEq6&O^UV+A3TlF'`j%P
%VP43D9pp%sW/\:LPMu6=C/5\DoUM=<4Z-OQphqq0TUQ.T/bDS7P+<[>[9k:1N.+/k1U<q>fS1mt1D`5:NCm0m@<DYAZG&7*P1nq*
%gH<@.=Cf7]PaP5-_%B'c\1+e1(sY-3pZ?Ck(bX9r0O/n7GFC9,5Z)YH]7b&XJEM?H,t);)f#dP%MbZ3=_(%P5BEp)oq=kf@GX(-e
%1^Jgl61"tgqC5+(?&DZpG[rUnR8mr%&36Nd6\YggLB_l9;EUKT%gjOPrF'^KcH("T5o!C1YXEL^`t*aq`ep'd3kfI4N!Ru:*"$98
%-b!A0!ZHGl)D(q(>!Zj>L)L\3[JFBiA/"R>?*HZD,\d'RqnrJf!m,,\.WQa6(p5*""SNQ@CG%<fal1+=&g!#'mD#S5-'FQ,?SG]s
%8TP#u27LarKaOLR("L@#7j9X*f<0tk.-16`5nTL#WX@dK9s5um4bFVcH<2f&DrY:/a?A'>k%3Yt_i#u`o$c5foq\FECutsZNnS]L
%QH9B9WmV.61mQsF*7GP$*&@$M(WQQ=ch0+>Yk7$p=8#l$,V("Q3"8EA+k)X&,T2]49C*9f=;?T9%eLs(8ef'M1A@SigWmpMR:6VD
%<eBs!9mI4tRBTdCOJe*L+^#<]+I$Kq2MMV1>;7<Wj^!2r)@V9,!Cf2;IEf<-&"*JO^fkHBrfN>edSYNL^KWFR5H"(;VG'R-J8s7P
%[5UKiX%4?$[XPZHO_-`W13dkU=2U6`I.>V\ZK1cJ"ua^gd,N>[/Pf"/D!ljdYA&,%lT:HPI$R2p%jY+d:mB/le$>5nB=Q8FpWuYH
%U#p[mo-5Uc->1$CA266Af9'QMAmEGG8V!LbK=q0eqkIK00Zn$BLEb>UWt'O9LpdCJQ+tSQ#nlF$iYh-jS$c@!2e32[Wsk3C1(%!5
%^0k.t2aBAlU@]\*C/p%JZE8F'1OWTkOinRR13C8VBiRt5bbjQ%7SS%,*/4IU&m*L#!\dZ21+h#\@)%0>N[(K+eaNXMY]J?q6kBlt
%f_B2B,H4?]+j%sN(L-jDU.>3[4M7bLaTaYO9/9[/CJk:N6&5jDQWFaoqeUVk0[pF1$jYd?[nQ#WR(MSsI]EUTDJ+)DZ2)f5UiTSU
%Pu,0q=;4WPZO?KsEfhpg5;E>bmZV0q!`H=E\T0\a4SYC!TXbeqlY$TXQQ0BQnM0)Id?i&<FKVd;Qe>co(dMF>)[Q4'O!4]k$a;u9
%&E#O[(I43!!*"8)3Yk@!_??U@-\3c871f)8gjfV:?mNrsD#bskc8k<i]pHi!dei?+7TTYdd0WYC#0+?)M>Ko8Cp9n'bHkJ;M&i7E
%C0BlYX'N5%dKJf_0Gsle_@@"?'8]J%/6Q<o<ArH<^41\'Bkqj0&5,R$k.(s;^ej6pXulaSXA@XbMt!3'Yo/l-A8>$nH,J5X]Q`S(
%9I&lF.&GMC9OS<\QZ&;81lfZXALiW#!OmhR&U9MmoQG9L).LS->cQm(`E%\0%LSKdFdPlW,#D"\:O*Kb6NKZQ2,#Iemj3Z(qLC!>
%%V6W`0$;j]fj;KSQ8\RXGk\mg;rnb?;'(TrB`X)I$B<bVQg$;XNZK?[4QL<acG=#8dFWAAMTgt@)Vo1i7Y.gZ,=UMkY]eDA^pA`'
%M.f[GC_F0eTb\fkMi6\-n6a;tbG$g5'L:+^S+1Hm'uJZcFD59:WA4`R]'n@oGgOkerLKH2?N@m^&Ur'd$l)261Xjd$C(<Rh1<;(!
%N2LF7C'a`#rHuA%M7d\!-SNk()CYrte3fnG.c=#Jgu+e)0uruEOJg[l@uukGj0<cX;_aMgQMCs*>h'@N_5U!uHW=N-X-b(k=0RR$
%?NtGD`qkD>HQ40/'"OS)@XQ!u\FYi(EtP8sBYY+)Zm6[447"@@^]N!'5oKc53m9$9Qbc?A_-)b;`^K'^Se`+@1pPu!iR^\gcI"OU
%+d1DKH-+2[Ok^kme!X=RF&`\`%<[*7YUD.5\ccT[aHdk0>s#>HENf*,(ea+`dlC5?R]$2@W4$9sD2B"7PfL:CghK=qE<TVER"F=0
%+cU2sHQT/+hKt^MA!8XN_g+S#.aU<#2$N"Pe>Qcse(Rs*A`Bk>\NlG!@gmu80-+X=Xt/h$*apec@iKai]n,)S_J6Bbn6@LZT^7m=
%N6#5=!n_9^43fe3E@L0D;6@l%aH1;;s4H^pZRC3Oab-=-;@TdMfKhA7#lo1N_Q`qL$'\ZBlWVntN>Uh$S5jboBaQi.Jf<dC3YrQ1
%lu@t/N>8U[Ro-#?qf8CHY681m4%cLk74T\S'/m.H*u!^A_gnHAFjI,:'Y-[-]m1$V\9AuMTf\k_ds=NSO3*uJ.%XOgJ>&-=,<kC>
%.bo:GnY,]g%f7Ss8=nNJkAj`39IK?""6Un^$*fH4O@FA!j_g2)2FPiOC3tKZRHX*RLjM@0M^T<q=/cfp3LjTidlNIEFGFKs",s20
%=B=V%9rZ0UW$K]"DP"m]7u(TCAn3mr0U"F]8OuZ$Q,-t96-D4$Xf$2CLJ`"MJJGu\T\Ce'bH3SDS[NB9@Zuf$J7q"-.').>_[=OA
%'qE.q8Zm;GOe..a'8(&H[L^L3DRLBI-%++nK[g^d;TsF]n56XunG)C6S_Q#4a)h$b'2joJ=n)"h+>?=f$S7g&`T(^3kEOg7>^&#t
%Ngm*h]e!u`YW*h?K0i)qqhVl$J!e%^+#;O";@q5m1(kH*K/o@'-Vne'4`rDEOXL4kbou$%9mE6VOHQaXgr.$d=6_2hGVd%TW2H.U
%@@2^-]MaSQcm!)W)@W@G>G6NI`@AT_<bWru0EhKikrPJ'U:\565h.G$aSBqs32kjC.9do#[A4D_K2'Gdk\":q#PI,r-]&n'3nT,>
%FJ`Wa!/l!f][/X9Iu,\np'e,4j6t`]>V4PU.7#g1Xl0Pr<fJZ38#fEbm''_ik%SP4:P2Z$N]8U=_$Z>DFAAP?]Ud2<M\_YG(aBK#
%du1/nVX.A(<Pikpb7;\NPuNO("&<uh@>U%V>DeuM@XXtM],_)O<5BY?cA*AN*3=<pS:9C%B5!1JQQjX?RDiaqI6#r":sW2GJPLfB
%Hq<ubL0k;6Af-AKT:j-L5r?$T=m^mfM4]hOp<3e\@[`'G]J9[^JTZ(H/]s(eN-m7!BprBV(mKXrXpIpq)<hLd9bR7X8dHTs#V[Yc
%Q5gl8[8Yd3MX>6V4bMPI!KMK+%F&TR^0<Nk!MZrS-U]QGpMVC(.1Sm31gqf]iQ\Z2=#-(25$P97<;L0$k^B<l1u4Lj7&)QcFLi</
%\5d>F`Gn&oUroF3QnI:>/O0=\/7ol?jdM@g'6?EXE8pjr?c'#WB(&kb&Ia,Y$fnUJ+ahjs@KVe28-_@QhS!`A.;aus`lseNW,RGi
%EWD]gN%$oNR5eL#$_W=Tg!8`oWaOIHSr$2+H@01_=)SWQ"aI=UL.BhI+#U';I@f=ZVq&39CDU)BM@M<g'NKk1NtEnt@_*)<Mbe2k
%cbFSeW$jOPbKKh<Q6&[Q(=I&_N81nmRuk=X@i+PI"_n#IhtFt&\Qlq=n"\>q#'!u0Gp-M9]EnSI'$8Fajfi9(^tQ7KB;3FW_4"ZT
%dk/TEC\BUl/1??4qg,hV'4B^ZdrW(6#s`&A/^L68,U:^,L4=QYO$J#C8rXAsCR35u'`ehQV:cB652uCSEf.g[EN>=&5.!GIK&/,`
%:oVXG]s4bo0qcZsJDk#>aNPuI2@<*_KKGZUP7*b1oJk9].aNVpOQgf9MLZW5Or]LB<\+X&S?r&dQf3;^Kq_IkRr:3`q2sDif!DuT
%&okY778c+QM2"aS84?"gjYi\NUskb*kRbKAW-i8q)`b2(C%T:L?Bm=r2(/.gI:Mh(2$8;Qq9u5pD0SnDa<VU?k'>hk78M7cVWYYb
%Q]\LI'%HL5-%I/qH+JDE\d=CMCq!?s;r9MKHcnB6/Q\<P?mWg3Z&2/.7NsM4p!+BSRcd>lm&295M@YP],QDes%G)_1Z/RApb7UPm
%k<_Y'H(b_Zb8I\gL-6G2(QS0(94V/=?EQYjY0M4"W%,;j0douGqLg_eqtAR5=>?F&7SS07Z7&6g0^UT->V/mA@e\sLF1;#$E7UY.
%,Ki&j>NT`RVcY)np3O\\_Zh;X=pd'WQ/h5S8832>2#aAr&:h-Lnaq*o*R+>=(K*TOoYLcI;NLg]//e.Olni<jYsflupgIWSCV(S=
%@=c7W1tmjr"Ab3%8]Wp=mImMki_)%2Q'>aE<G,[ES]oTfl<Z`Fq6_:$.`PM)fjh%;o>+H@`,fF-ANRNq2s'9bUV332'eEp(NQfo)
%?*V,K?n,+,peXH,/!WiY1N'ZH&@o>u/=A[Hqq:#/^hN?+(eOMEa\_0)NY0@'MOsbdPFV*(YF70u\J@2s-eTHB^5IR$cs+If($cTE
%=:BUXJm0T/[,%V@WGO_6?^K06]`oPH&rROg(a#M0P#^nf?K\S+_-_d6[c_jN-;hb=#lD:1R1)A4;)`UGCO?'&Tj[m[=Toq#@.:.A
%g58.5?Y%U92]F,G+FIbDMs<<]H;I#V1W/b6&"/*Is.ZO=Vt;0-PKeu-DRKg(-<7/Ie#G2`-Y*-LMf<9kjn[ID5?Ub8&>`F73,6-4
%QI`n7`6HIT6_<Jonm.`+6<j9XjSmk#ULC^,cL+^'!:I:(22le!62G.W!bl\=aO!`Fb=3!)Nm=Qc-h"$YJRQ3bLs"mo&D`pj[qe;^
%D2.Pem:[&(B:7Tgp=%HJ2^8A8aFaMl'pX:O3=L5BW8=Ue@i9b9R\W:=X5!MCStqg02a3`dGRt5mlBU!jM%(;:M!V-4(VYCB@2[,I
%FFulKH(I3\HO*niUMq9#j5gO5kLI?S9fV_Z76ACs>q=.I`\L>g#-Z-J<%?]F4qtb[>ZD?YF1sZZo1*Z4]@3mG&c-O4bMoK,r=K:-
%-"CX/W>eBI<SqU\qaLal@:)1'ZgXT,[ZtDV/T,<3#.aRbG:!'5c4$f+kpqL.V+pnN@\5?Cgm-lff.]hQGMY.2]oi%-ZTRmoCWniG
%`B3*8lDU2h#:mG]Ku:@sd3V&Y0>Lf4&DZ^FWV&<qD)]`0k`>.kf5lGiNA5BR][9@J0pPDD3C5]&42fZIAY%L08=rpP&_d-_GWjgq
%V?+dAfM6RUQ+>j]/\\+>?t5'6DHF*KEqWpf.8pVC8U6eR)RW8hdO-fV7T:gB/^K6MEA1s'F'?sT($FLuK+58=I%#-RPuL2/^[>K/
%.i0]X"W4#!HtAhiq%Q)E/nKAr=WQK*BU4Rq>UqDaN5<DqIj\WTZ_o-3btRdB'#V?KAeDC;*O$!RX,i#*WO%XpCgcT'*aX_$;N]:(
%kt\LOf?Nl]q2W=,I8)(L2d&PPNT+n.A9XGLF\qaEp(ALL,!Pd)MR]S;)OaJg%rpuA,ciE=XhuGu=L-m??9l7k`p2;hV"?(Q;qI`L
%mEm(Mma+rBUBE8<0R7s&1kut"DFl?VM3VBPO?I7,0lF0Z!pFVtW4Q4O/E6D5.EHO>efB&(:u@g\g*SPf3]Dg/H8Z7`B)LFdoj_B&
%dH=XB%qMEG.0kt6<s4_8p&H<bB>.LoEqL,&A/U40"VI*`$+r][&L_Uib7\EpkQ#.)0GClX1elf`Xs@7P+N([)l1?QZ@h<fqa"Z%F
%*K1>IL:=suTgDU9I2RW`!GrdpmB-gc"_l/0Dm@5;Ak?!<;G^aDk)u#F-chcOV/)YXO;mW+'FO^<;kSh"flYF\G4&[1$>MB3'VJ5n
%8oLWe=1VB5O`$Hb[?L@9kSqF\CaVVG1%;WQVF*iTJ.q"-!9O&lLuVStb)/e;JEF>QM.IOZ@7p-OA9EDbPCq(\7EBS1'ru:NdLq8X
%RE!sEC0[HW:)=?nV<kVLBarB2Er%INHEoS0#H^nrWk"fY]0dY2LP!,a4p1FuJdKEZlG&_!6/)ZAStE]u@pVG_p@*6RnpTeOX>Mk<
%W?[M'M+/O7cbB?W#m)r5$Yu*!FG*kLK/$<__d[aiNDpm*S#-D"Nq@1m'k$fg'Zglm^aL:f6(aqZaUK)f'1)Y+oMge3\,-0$.?CmA
%+3.'-J^2*_O2h>F;ml]"()P[[L/tl]WA,ELT<(K8-U:.J!63j4c2<$N%_NAP?<!'+*$pG(^Xt[710Itqe[dVX$dlo[<[sHC@%Q92
%(()0D4m2J%8u7H@3,ait+=kj%5i>*hDm+,$;5L.MkMI92!64D2MFOCCo@;eu#::3G2A:,]H(:r<ghk?&OfqiYbf\t")SeI'%')+A
%?*:31K7u5/(I:7h-cHQW!$F^2H"AfQdt^qa8cMNZ$LS<H/#7%9r-ej`553QD"5Jh^%Te8u8D>*>UQ0.?@]+m@Rh2OAfN,A[*%PE'
%h0X8T(lmh35TQ'#$ja:VA[fe1e,VsdY>0&=\^W^V.9!'SpQhSA<^XRB>R&<AgX(rQ+'uMsb:9i0=i>^5,.Ng#Mtu?6"R&jg4j%$^
%:6]doeG?07X:?;62T;;q1ADHtSa.Zdg#>i?_Ru9KXs7?1WfW!U$oqFk7U32u5ZT;UWj`ju`G2#7OOXAA[p"K2$BWY="P[M4SP_)e
%[&;[a%WKKEE!r-%AdimRoK[j\0AfhH(bon6i3Mus#BiN`JODPO(!j]'!&B-[,r+-;^Rt>Gj`>!i4AUQ&I\0'N+2"'\?KCu'o=<Uf
%cnFrV#5B<;kbf;YC)Xa@6[Nd90@&6,@Et,o/?oD2!]8Mi?i1+RJjL9E3Ka9i`9`F$IHcB1?G5k/\YGg`dpmb*R:AiCAne[T-\,WT
%TRr-cpi4aU!La5qK;5J'Mn+3@H4>@>meYsGeM;<#Vk(e%H>Jb"e,[o$jG<CB(mSe,P`1f7fr2B2m<MsF'<8imCdL<k%*e&TkY.8p
%#M`&k;50+)Yf.!$ZEk5!:*@YB_Y-d*$U;N!Z__Q7Y[+$[W`Hp6&VJ9E[I^[Tc:FnMcu;GU7biqUahe?lER%s/h6`k):)H*^ko4#K
%O;4h]2h5m3"3@U"N"Grq61&C&j=UZ+?>o'7"fSahf5R&,O^@(Llh$MtcY^]H@G:kPNqm1s!YR](CLU19G".NhaI*)'A%_4OfU8Yk
%.?OR0%qr!qA#\eU]uT*bCTbA\Y_td;X=tm)orb^dj@ML?H$p``p,HlLp_'*oaMmbX^9_cPrqlN!T.l1i+9=kg>4WakM`0Z3<5bAT
%+g#MChTcjsmWR^'<]B*PYX'eFIBIHl_)Q34*?3UP-<.[gnb)8<eaVTC\<[_EM\S&EE_#O35YEUo#gYl#gll.*"!!X:@r>tuGBJ9!
%?8pM9Us&,%&tbMq?=[iI()I`7GhId`@+$M.H]i,bY34k]'i%g*##H1HlqXM$nMeLG233;B]_Zo"0b,i,hs^?U1^qe#4)<;HU':.3
%Z7q;cILD]1R_/qLM@Z2X>!b)2:m`"X+ZL=:5ZC/Cd"U4aY[:J'J_b-Tk53)+030"^bfcf_*i2,^:,si2e]?eJlIa)pHFm#!s0L1I
%1Ni6n8Affqr]U6+p/-A#!pqB,iGX^pT$bn!p)s#58[pY(%WCLjWf`Xg.iBX'ps>d,r(VK1=$%[6XnYb4[EFMcheZ*^;Ln/?7Vt*a
%+]&<8Ag(Q,J86\We#36*Z!+K=7\Jkj_7gbg6dKr<r[UP&m/oJjYndImosP-7#eY\r49E1P42?2%[3P0%iP6d$e^n]6km=*aX"Q"2
%$<I.O[Q/i_38C61?SdJg3@Ac_>k9_[MhtsH<;I)A'cq*Uj!A?u)6(gE@\:]OLQQtQn=5$GS!;7C1W$VLm8E`KY[g2FYF,WAB7St#
%D17Ek(hQ$S:E$6c_K61TW:2\X42='H8H?G82o\\,AM=+:EP\fJ;1QM68S<c3YkF.G?7'c!4*R0HN62<mp<fU[D(<f9(@]<:_/+6t
%j&"RRRn9jP!6nlb7O42UiPqCo7V";\c0WJ4#Gr6N412TO:0@;1rd%R\g$rk<g5$hVQFqnr%.J_7IE$=eQ:$2^Ba8=s96<sgh-mVD
%H/2!.$TqL6m9<k9`TnmIMB5&)RukRM2,nSX`?>j,)-b;Qn,f,&C-_icij[gi1hJ^BATt2^iSMFoH-"o_eYLO=+4GY,l_H`&G"[6c
%rN^t5pA6X@V]8r)L`ZVc'tm?L$p\igZKJlJ!h^Fsf-d2^%)ifl+8p\=qT6MJDkDLLPMc;tQf!;fO'hq\_q4@lrSm]=^AU-$l0T;%
%qY%h]?i9Ir3PGCbrU7IIs+bO-I/Ek,Idu7+\)4n!o%d+!r[fc"p\;e,T7$@!O+73#=8b(-p$J*<IIY@%huE%U%fGG#YJ1"%d&3Ku
%#2reGhtSRTgABW7E^0OqD]RbKs7#8#J+;:fhu3*BYJ9qS%mPL>m+WUshL3p-rp,@.^]*pW[.SG#J,/)J09+.n^\m_fKR`oNJ#0X#
%hZL8uo[Qq$:RC_6s*i"(rX&W&S&[`7lV`@KoA^?=j7%[7njWX(;q3$6pok[rn%\l(2qlTU\%hqfrp)d5rq([]fK[-Y\%dChTDpFT
%IJN-fs8CcOT7$XII+\0Xgn;uCpZX'?ps%^0s+g=jhZ)pu]^jg'6Y[(Mr6K<kP$1&!I*J/oC<PHts*sh8gZK[Jrb02^GfBj\L<o_b
%Gc.o.ej'3%UW7kT;uLk,o;?N!rsKeFq>Yk"lu,)Q.10*`"Ff-)J)W=lY/Y7q_^eBHr8AmrKDQ0CG_rZ`7m6YClDFk_/BRnHR30a-
%Nu*<D]?SC2e)S3tY>\qXE(T:sIrt>/FO+?dD#SF6I(B$ZnRnePB67+FB)$Eh,N8qL>[8ZBa$'7[lDO&Ab\kdO.K8E,K+E,WMBDZP
%kGt3rr%o<rkMJLub:1E#Ir#3nY(#g2c.k!k5uFOERem2JQMTX&Hh>M3s2qrT%`HDHj8aW#_ln+cNWG&(>(<+>Yj67&miV5O@pT-,
%PPt1k5CNG+s2"`p>4gpST+#.XHHH0.hgY+G]?e7lip1Ne@"7kH0E14lgDAarqu4JL+5VG?pg7rHIK/a0+5VMIm]dM>s(<Ia.;nqB
%Qgat5h/@c8br:.IrJ0jVG[1!4`tR<Yn_r<u^\dl^a%s?rp$T`P]75,#>@%*X:qh=Yh2fb1T=aGS]`7-mpV6R\j)L,1a.L!7_]QX?
%s4-jNI.r\Or7<"g>J.eE]AT0&s7G`Ko#!]`PFqd'hu'BJ5Pb>MGH(T~>
%AI9_PrivateDataEnd
